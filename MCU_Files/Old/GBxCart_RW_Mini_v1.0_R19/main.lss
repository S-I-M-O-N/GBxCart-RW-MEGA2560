
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ec0  00000f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000113  00800062  00800062  00000f56  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7d  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ee  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d39  00000000  00000000  00003687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  000045ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000134d  00000000  00000000  00004abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00005e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	c2 c1       	rjmp	.+900    	; 0x392 <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 ec       	ldi	r30, 0xC0	; 192
  36:	fe e0       	ldi	r31, 0x0E	; 14
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a5 37       	cpi	r26, 0x75	; 117
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	b3 d1       	rcall	.+870    	; 0x3bc <main>
  56:	32 c7       	rjmp	.+3684   	; 0xebc <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Receive>:

uint8_t cartMode = GB_MODE;

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  5a:	5f 9b       	sbis	0x0b, 7	; 11
  5c:	fe cf       	rjmp	.-4      	; 0x5a <USART_Receive>
	return UDR; // Get and return received data from buffer
  5e:	8c b1       	in	r24, 0x0c	; 12
}
  60:	08 95       	ret

00000062 <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  62:	5d 9b       	sbis	0x0b, 5	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	UDR = data;
  66:	8c b9       	out	0x0c, r24	; 12
  68:	08 95       	ret

0000006a <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
  6a:	0f 93       	push	r16
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
  74:	c1 e7       	ldi	r28, 0x71	; 113
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	ce 01       	movw	r24, r28
  7a:	81 57       	subi	r24, 0x71	; 113
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	80 17       	cp	r24, r16
  80:	91 07       	cpc	r25, r17
  82:	1c f4       	brge	.+6      	; 0x8a <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
  84:	ea df       	rcall	.-44     	; 0x5a <USART_Receive>
  86:	89 93       	st	Y+, r24
  88:	f7 cf       	rjmp	.-18     	; 0x78 <usart_read_bytes+0xe>
	}
}
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	1f 91       	pop	r17
  90:	0f 91       	pop	r16
  92:	08 95       	ret

00000094 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	c1 e7       	ldi	r28, 0x71	; 113
  9a:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
  9c:	de df       	rcall	.-68     	; 0x5a <USART_Receive>
  9e:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
  a0:	81 11       	cpse	r24, r1
  a2:	fc cf       	rjmp	.-8      	; 0x9c <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
  aa:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
  ac:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
  ae:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
  b0:	96 9a       	sbi	0x12, 6	; 18
  b2:	08 95       	ret

000000b4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
  b4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
  b6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
  b8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
  ba:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret

000000c4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
  c4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	08 95       	ret

000000ca <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
  ca:	fc df       	rcall	.-8      	; 0xc4 <set_16bit_address>
	
	cs_mreqPin_low;
  cc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
  ce:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (At 8MHz - minimum needed is 1 nops, 2 nops for GB camera)
  d0:	00 00       	nop
	asm volatile("nop");
  d2:	00 00       	nop
	asm volatile("nop");
  d4:	00 00       	nop
	asm volatile("nop");
  d6:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
  d8:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
  da:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
  dc:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
  de:	08 95       	ret

000000e0 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	d6 2f       	mov	r29, r22
  e6:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
  e8:	ed df       	rcall	.-38     	; 0xc4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
  ee:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
  f0:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
  f2:	c1 30       	cpi	r28, 0x01	; 1
  f4:	09 f4       	brne	.+2      	; 0xf8 <write_8bit_data+0x18>
		cs_mreqPin_low;
  f6:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
  f8:	00 00       	nop
	asm volatile("nop");
  fa:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
  fc:	c1 30       	cpi	r28, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <write_8bit_data+0x22>
		cs_mreqPin_high;
 100:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
 102:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 104:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 106:	14 ba       	out	0x14, r1	; 20
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
 10e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 110:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
 112:	d8 df       	rcall	.-80     	; 0xc4 <set_16bit_address>
	
	rdPin_low;
 114:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
 116:	00 00       	nop
	asm volatile("nop");
 118:	00 00       	nop
	asm volatile("nop");
 11a:	00 00       	nop
	asm volatile("nop");
 11c:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
 11e:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
 120:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
 122:	08 95       	ret

00000124 <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 124:	cf 93       	push	r28
 126:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 12c:	cb df       	rcall	.-106    	; 0xc4 <set_16bit_address>
	PORT_DATA7_0 = data;
 12e:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
 130:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <flashWriteWePin>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	49 f4       	brne	.+18     	; 0x14a <gb_flash_write_bus_cycle+0x26>
		audioPin_low; // WE low
 138:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
 13a:	00 00       	nop
		asm volatile("nop");
 13c:	00 00       	nop
		asm volatile("nop");
 13e:	00 00       	nop
		asm volatile("nop");
 140:	00 00       	nop
		asm volatile("nop");
 142:	00 00       	nop
		asm volatile("nop");
 144:	00 00       	nop
		audioPin_high; // WE high
 146:	39 9a       	sbi	0x07, 1	; 7
 148:	08 c0       	rjmp	.+16     	; 0x15a <gb_flash_write_bus_cycle+0x36>
	}
	else { // WR pin
		wrPin_low; // WE low
 14a:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
 14c:	00 00       	nop
		asm volatile("nop");
 14e:	00 00       	nop
		asm volatile("nop");
 150:	00 00       	nop
		asm volatile("nop");
 152:	00 00       	nop
		asm volatile("nop");
 154:	00 00       	nop
		asm volatile("nop");
 156:	00 00       	nop
		wrPin_high; // WE high
 158:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 15a:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 15c:	14 ba       	out	0x14, r1	; 20
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 16c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <flashWriteCycle+0x2>
 170:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flashWriteCycle>
 174:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <flashWriteCycle+0x1>
 178:	d5 df       	rcall	.-86     	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 17a:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <flashWriteCycle+0x6>
 17e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <flashWriteCycle+0x4>
 182:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <flashWriteCycle+0x5>
 186:	ce df       	rcall	.-100    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 188:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <flashWriteCycle+0xa>
 18c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flashWriteCycle+0x8>
 190:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <flashWriteCycle+0x9>
 194:	c7 df       	rcall	.-114    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
 196:	61 2f       	mov	r22, r17
 198:	ce 01       	movw	r24, r28
 19a:	c4 df       	rcall	.-120    	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <gb_flash_write_byte+0x3c>
 1a2:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 1a4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 1a6:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 1a8:	ce 01       	movw	r24, r28
 1aa:	b1 df       	rcall	.-158    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 1ac:	81 17       	cp	r24, r17
 1ae:	51 f0       	breq	.+20     	; 0x1c4 <gb_flash_write_byte+0x62>
		dataVerify = gb_flash_read_byte(address);
 1b0:	ce 01       	movw	r24, r28
 1b2:	ad df       	rcall	.-166    	; 0x10e <gb_flash_read_byte>
 1b4:	9a e1       	ldi	r25, 0x1A	; 26
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <gb_flash_write_byte+0x54>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <gb_flash_write_byte+0x5a>
		_delay_us(5);
		if (writingTimedout == 1) {
 1bc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 1c0:	91 30       	cpi	r25, 0x01	; 1
 1c2:	a1 f7       	brne	.-24     	; 0x1ac <gb_flash_write_byte+0x4a>
			break;
		}
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	08 95       	ret

000001cc <gb_flash_write_byte_special>:

// Set the bank, write a single byte to the Flash address and pulse the reset pin
void gb_flash_write_byte_special(uint16_t address, uint8_t data) {
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	16 2f       	mov	r17, r22
	// Set bank back
	if (flashBank1CommandWrites == 1) {
 1d6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashBank1CommandWrites>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	61 f4       	brne	.+24     	; 0x1f6 <gb_flash_write_byte_special+0x2a>
		write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <lastBankAccessed>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e2       	ldi	r25, 0x21	; 33
 1e8:	7b df       	rcall	.-266    	; 0xe0 <write_8bit_data>
 1ea:	87 ec       	ldi	r24, 0xC7	; 199
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <gb_flash_write_byte_special+0x22>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <gb_flash_write_byte_special+0x28>
 1f4:	00 00       	nop
		_delay_us(50);
	}
	
	// Write
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1f6:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <flashWriteCycle+0x2>
 1fa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flashWriteCycle>
 1fe:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <flashWriteCycle+0x1>
 202:	90 df       	rcall	.-224    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 204:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <flashWriteCycle+0x6>
 208:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <flashWriteCycle+0x4>
 20c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <flashWriteCycle+0x5>
 210:	89 df       	rcall	.-238    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 212:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <flashWriteCycle+0xa>
 216:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flashWriteCycle+0x8>
 21a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <flashWriteCycle+0x9>
 21e:	82 df       	rcall	.-252    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
 220:	61 2f       	mov	r22, r17
 222:	ce 01       	movw	r24, r28
 224:	7f df       	rcall	.-258    	; 0x124 <gb_flash_write_bus_cycle>
 226:	87 ee       	ldi	r24, 0xE7	; 231
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <gb_flash_write_byte_special+0x5e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <gb_flash_write_byte_special+0x64>
 230:	00 00       	nop
	_delay_us(250); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 232:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 234:	14 ba       	out	0x14, r1	; 20
	
	// Pulse reset
	PORTE &= ~(1<<CS2_PIN);
 236:	3a 98       	cbi	0x07, 2	; 7
 238:	87 ec       	ldi	r24, 0xC7	; 199
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <gb_flash_write_byte_special+0x70>
 240:	00 c0       	rjmp	.+0      	; 0x242 <gb_flash_write_byte_special+0x76>
 242:	00 00       	nop
	_delay_us(50);
	PORTE |= (1<<CS2_PIN);
 244:	3a 9a       	sbi	0x07, 2	; 7
 246:	87 ec       	ldi	r24, 0xC7	; 199
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <gb_flash_write_byte_special+0x7e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <gb_flash_write_byte_special+0x84>
 250:	00 00       	nop
	_delay_us(50);
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	08 95       	ret

0000025a <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
 266:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
 268:	ff 24       	eor	r15, r15
 26a:	fa 94       	dec	r15
 26c:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 26e:	01 e2       	ldi	r16, 0x21	; 33
 270:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 272:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 278:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 27a:	00 00       	nop
	asm volatile("nop");
 27c:	00 00       	nop
	wrPin_high;
 27e:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 280:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <flashWriteCycle+0x2>
 284:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flashWriteCycle>
 288:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <flashWriteCycle+0x1>
 28c:	4b df       	rcall	.-362    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 28e:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <flashWriteCycle+0x6>
 292:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <flashWriteCycle+0x4>
 296:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <flashWriteCycle+0x5>
 29a:	44 df       	rcall	.-376    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 29c:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <flashWriteCycle+0xa>
 2a0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flashWriteCycle+0x8>
 2a4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <flashWriteCycle+0x9>
 2a8:	3d df       	rcall	.-390    	; 0x124 <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
 2aa:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 2ac:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 2ae:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
 2b0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <lastBankAccessed>
 2b4:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 2b6:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 2b8:	00 00       	nop
	asm volatile("nop");
 2ba:	00 00       	nop
	wrPin_high;
 2bc:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
 2be:	61 2f       	mov	r22, r17
 2c0:	ce 01       	movw	r24, r28
 2c2:	30 df       	rcall	.-416    	; 0x124 <gb_flash_write_bus_cycle>
 2c4:	85 e3       	ldi	r24, 0x35	; 53
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <__stack+0x67>
 2ca:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 2cc:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 2ce:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 2d0:	ce 01       	movw	r24, r28
 2d2:	1d df       	rcall	.-454    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 2d4:	81 17       	cp	r24, r17
 2d6:	51 f0       	breq	.+20     	; 0x2ec <__stack+0x8d>
		dataVerify = gb_flash_read_byte(address);
 2d8:	ce 01       	movw	r24, r28
 2da:	19 df       	rcall	.-462    	; 0x10e <gb_flash_read_byte>
 2dc:	9a e1       	ldi	r25, 0x1A	; 26
 2de:	9a 95       	dec	r25
 2e0:	f1 f7       	brne	.-4      	; 0x2de <__stack+0x7f>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <__stack+0x85>
		_delay_us(5);
		if (writingTimedout == 1) {
 2e4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 2e8:	91 30       	cpi	r25, 0x01	; 1
 2ea:	a1 f7       	brne	.-24     	; 0x2d4 <__stack+0x75>
			break;
		}
	}
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	08 95       	ret

000002f8 <start_timeout_timer>:

// Timeout for ~500ms when flashing carts
void start_timeout_timer(void) {
	writingTimedout = 0;
 2f8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCNT1 = 0;
 2fc:	1d bc       	out	0x2d, r1	; 45
 2fe:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS11) | (1<<CS10);
 300:	8e b5       	in	r24, 0x2e	; 46
 302:	83 60       	ori	r24, 0x03	; 3
 304:	8e bd       	out	0x2e, r24	; 46
 306:	08 95       	ret

00000308 <stop_timeout_timer>:
}

// Stop the flash timeout timer
void stop_timeout_timer(void) {
	writingTimedout = 0;
 308:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCNT1 = 0;
 30c:	1d bc       	out	0x2d, r1	; 45
 30e:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0;
 310:	1e bc       	out	0x2e, r1	; 46
	PORTD &= ~(1<<ACTIVITY_LED);
 312:	93 98       	cbi	0x12, 3	; 18
 314:	08 95       	ret

00000316 <check_if_timed_out>:
}

void check_if_timed_out(void) {
	if (writingTimedout == 0) {
 316:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 31a:	81 11       	cpse	r24, r1
 31c:	04 c0       	rjmp	.+8      	; 0x326 <check_if_timed_out+0x10>
		stop_timeout_timer();		
 31e:	f4 df       	rcall	.-24     	; 0x308 <stop_timeout_timer>
		USART_Transmit(SEND_ACK); // Send back acknowledgement
 320:	81 e3       	ldi	r24, 0x31	; 49
 322:	9f de       	rcall	.-706    	; 0x62 <USART_Transmit>
		PORTD &= ~(1<<ACTIVITY_LED);
 324:	93 98       	cbi	0x12, 3	; 18
 326:	08 95       	ret

00000328 <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
 328:	84 b7       	in	r24, 0x34	; 52
 32a:	87 7f       	andi	r24, 0xF7	; 247
 32c:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
 32e:	88 e1       	ldi	r24, 0x18	; 24
 330:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
 332:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
 334:	ba de       	rcall	.-652    	; 0xaa <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN);
 336:	81 b3       	in	r24, 0x11	; 17
 338:	88 67       	ori	r24, 0x78	; 120
 33a:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN);
 33c:	32 9a       	sbi	0x06, 2	; 6
	
	// Pull ups
	PORTE |= (1<<PE0);
 33e:	38 9a       	sbi	0x07, 0	; 7
	PORTD |= (1<<PD7) | (1<<PD2);
 340:	82 b3       	in	r24, 0x12	; 18
 342:	84 68       	ori	r24, 0x84	; 132
 344:	82 bb       	out	0x12, r24	; 18
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
 346:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 348:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
 34a:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
 34c:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
 34e:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
 350:	1a ba       	out	0x1a, r1	; 26
	
	// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
	cs2Pin_low;
 352:	3a 98       	cbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	80 e7       	ldi	r24, 0x70	; 112
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <setup+0x32>
 362:	00 c0       	rjmp	.+0      	; 0x364 <setup+0x3c>
 364:	00 00       	nop
	_delay_ms(50);
	cs2Pin_high;
 366:	3a 9a       	sbi	0x07, 2	; 7
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
 368:	93 9a       	sbi	0x12, 3	; 18
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	89 e6       	ldi	r24, 0x69	; 105
 36e:	98 e1       	ldi	r25, 0x18	; 24
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <setup+0x48>
 378:	00 c0       	rjmp	.+0      	; 0x37a <setup+0x52>
 37a:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
 37c:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
 37e:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRB, TXEN); // Transmitter enable
 380:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
 382:	54 9a       	sbi	0x0a, 4	; 10
	
	// Timer1 setup
	TIMSK |= (1<<TOIE1);
 384:	89 b7       	in	r24, 0x39	; 57
 386:	80 68       	ori	r24, 0x80	; 128
 388:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0;
 38a:	1d bc       	out	0x2d, r1	; 45
 38c:	1c bc       	out	0x2c, r1	; 44
	
	// Turn on interrupts
	sei();
 38e:	78 94       	sei
 390:	08 95       	ret

00000392 <__vector_6>:
		}
	}
}

// Timeout after ~500ms which also blinks the LED
ISR(TIMER1_OVF_vect) {
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
	PORTD ^= (1<<ACTIVITY_LED);
 3a0:	92 b3       	in	r25, 0x12	; 18
 3a2:	88 e0       	ldi	r24, 0x08	; 8
 3a4:	89 27       	eor	r24, r25
 3a6:	82 bb       	out	0x12, r24	; 18
	writingTimedout = 1;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
 3bc:	b5 df       	rcall	.-150    	; 0x328 <setup>
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
 3be:	55 24       	eor	r5, r5
 3c0:	53 94       	inc	r5


int main(void) {
	setup();
	
	uint32_t address = 0;
 3c2:	c1 2c       	mov	r12, r1
 3c4:	d1 2c       	mov	r13, r1
 3c6:	76 01       	movw	r14, r12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3c8:	22 24       	eor	r2, r2
 3ca:	2a 94       	dec	r2
 3cc:	32 2c       	mov	r3, r2
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
			char commonChar = USART_Receive();
			if (commonChar == '1') {
				resetCommonLines = 1;
 3ce:	44 24       	eor	r4, r4
 3d0:	43 94       	inc	r4
 3d2:	21 ef       	ldi	r18, 0xF1	; 241
 3d4:	62 2e       	mov	r6, r18
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	72 2e       	mov	r7, r18
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	52 12       	cpse	r5, r18
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <main+0x26>
			rd_wr_csmreq_cs2_reset();
 3e0:	64 de       	rcall	.-824    	; 0xaa <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
 3e2:	3b de       	rcall	.-906    	; 0x5a <USART_Receive>
 3e4:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
		
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
 3e8:	83 34       	cpi	r24, 0x43	; 67
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <main+0x38>
			USART_Transmit(cartMode);
 3ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3f0:	38 de       	rcall	.-912    	; 0x62 <USART_Transmit>
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <main+0x42>
			stop_timeout_timer();
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
 3f4:	87 34       	cpi	r24, 0x47	; 71
 3f6:	29 f4       	brne	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			gb_mode();
 3f8:	5d de       	rcall	.-838    	; 0xb4 <gb_mode>
			flashBank1CommandWrites = 0; // Reset back to normal
 3fa:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flashBank1CommandWrites>
			stop_timeout_timer();
 3fe:	84 df       	rcall	.-248    	; 0x308 <stop_timeout_timer>
 400:	ec cf       	rjmp	.-40     	; 0x3da <main+0x1e>
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
 402:	81 34       	cpi	r24, 0x41	; 65
 404:	59 f4       	brne	.+22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			usart_read_chars(); // Read start address
 406:	46 de       	rcall	.-884    	; 0x94 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 408:	40 e1       	ldi	r20, 0x10	; 16
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	81 e7       	ldi	r24, 0x71	; 113
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	94 d3       	rcall	.+1832   	; 0xb3e <strtol>
 416:	6b 01       	movw	r12, r22
 418:	7c 01       	movw	r14, r24
 41a:	df cf       	rjmp	.-66     	; 0x3da <main+0x1e>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
 41c:	82 35       	cpi	r24, 0x52	; 82
 41e:	e1 f4       	brne	.+56     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			gb_mode();
 420:	49 de       	rcall	.-878    	; 0xb4 <gb_mode>
			receivedChar = '1';
 422:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 424:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
 428:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
 42c:	81 33       	cpi	r24, 0x31	; 49
 42e:	a9 f6       	brne	.-86     	; 0x3da <main+0x1e>
				PORTD |= (1<<ACTIVITY_LED);
 430:	93 9a       	sbi	0x12, 3	; 18
 432:	c0 e0       	ldi	r28, 0x00	; 0
 434:	d0 e0       	ldi	r29, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
 436:	ce 01       	movw	r24, r28
 438:	8c 0d       	add	r24, r12
 43a:	9d 1d       	adc	r25, r13
 43c:	46 de       	rcall	.-884    	; 0xca <read_8bit_data>
 43e:	11 de       	rcall	.-990    	; 0x62 <USART_Transmit>
 440:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 442:	c0 34       	cpi	r28, 0x40	; 64
 444:	d1 05       	cpc	r29, r1
 446:	b9 f7       	brne	.-18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 448:	80 e4       	ldi	r24, 0x40	; 64
 44a:	c8 0e       	add	r12, r24
 44c:	d1 1c       	adc	r13, r1
 44e:	e1 1c       	adc	r14, r1
 450:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 452:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 454:	02 de       	rcall	.-1020   	; 0x5a <USART_Receive>
 456:	e6 cf       	rjmp	.-52     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			}
		}
		
		// Read and send 0x4000 bytes of data
		else if (receivedChar == READ_ROM_4000H) {
 458:	81 35       	cpi	r24, 0x51	; 81
 45a:	99 f4       	brne	.+38     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			gb_mode();
 45c:	2b de       	rcall	.-938    	; 0xb4 <gb_mode>
			PORTD |= (1<<ACTIVITY_LED);
 45e:	93 9a       	sbi	0x12, 3	; 18
			for (uint16_t x = 0; x < 0x4000; x++) {
 460:	c0 e0       	ldi	r28, 0x00	; 0
 462:	d0 e0       	ldi	r29, 0x00	; 0
				USART_Transmit(read_8bit_data(address));
 464:	ce 01       	movw	r24, r28
 466:	8c 0d       	add	r24, r12
 468:	9d 1d       	adc	r25, r13
 46a:	2f de       	rcall	.-930    	; 0xca <read_8bit_data>
 46c:	fa dd       	rcall	.-1036   	; 0x62 <USART_Transmit>
		
		// Read and send 0x4000 bytes of data
		else if (receivedChar == READ_ROM_4000H) {
			gb_mode();
			PORTD |= (1<<ACTIVITY_LED);
			for (uint16_t x = 0; x < 0x4000; x++) {
 46e:	21 96       	adiw	r28, 0x01	; 1
 470:	c1 15       	cp	r28, r1
 472:	90 e4       	ldi	r25, 0x40	; 64
 474:	d9 07       	cpc	r29, r25
 476:	b1 f7       	brne	.-20     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 478:	e0 e4       	ldi	r30, 0x40	; 64
 47a:	de 0e       	add	r13, r30
 47c:	e1 1c       	adc	r14, r1
 47e:	f1 1c       	adc	r15, r1
 480:	22 c2       	rjmp	.+1092   	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
 482:	87 35       	cpi	r24, 0x57	; 87
 484:	d9 f4       	brne	.+54     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			gb_mode();
 486:	16 de       	rcall	.-980    	; 0xb4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
 488:	80 e4       	ldi	r24, 0x40	; 64
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ee dd       	rcall	.-1060   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 48e:	93 9a       	sbi	0x12, 3	; 18
 490:	01 e7       	ldi	r16, 0x71	; 113
 492:	10 e0       	ldi	r17, 0x00	; 0
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 498:	f8 01       	movw	r30, r16
 49a:	61 91       	ld	r22, Z+
 49c:	8f 01       	movw	r16, r30
 49e:	ce 01       	movw	r24, r28
 4a0:	8c 0d       	add	r24, r12
 4a2:	9d 1d       	adc	r25, r13
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	1c de       	rcall	.-968    	; 0xe0 <write_8bit_data>
 4a8:	21 96       	adiw	r28, 0x01	; 1
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 4aa:	c0 34       	cpi	r28, 0x40	; 64
 4ac:	d1 05       	cpc	r29, r1
 4ae:	a1 f7       	brne	.-24     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 4b0:	f0 e4       	ldi	r31, 0x40	; 64
 4b2:	cf 0e       	add	r12, r31
 4b4:	d1 1c       	adc	r13, r1
 4b6:	e1 1c       	adc	r14, r1
 4b8:	f1 1c       	adc	r15, r1
 4ba:	68 c0       	rjmp	.+208    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
 4bc:	82 34       	cpi	r24, 0x42	; 66
 4be:	e1 f4       	brne	.+56     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			gb_mode();
 4c0:	f9 dd       	rcall	.-1038   	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read start address
 4c2:	e8 dd       	rcall	.-1072   	; 0x94 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 4c4:	40 e1       	ldi	r20, 0x10	; 16
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	81 e7       	ldi	r24, 0x71	; 113
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	36 d3       	rcall	.+1644   	; 0xb3e <strtol>
 4d2:	4b 01       	movw	r8, r22
 4d4:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
 4d6:	c1 dd       	rcall	.-1150   	; 0x5a <USART_Receive>
 4d8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
			if (receivedChar == 'B') {
 4dc:	82 34       	cpi	r24, 0x42	; 66
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e0:	7c cf       	rjmp	.-264    	; 0x3da <main+0x1e>
				usart_read_chars(); // Read data
 4e2:	d8 dd       	rcall	.-1104   	; 0x94 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 4e4:	81 e7       	ldi	r24, 0x71	; 113
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	3b d4       	rcall	.+2166   	; 0xd60 <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
 4ea:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <lastBankAccessed>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	68 2f       	mov	r22, r24
 4f2:	c4 01       	movw	r24, r8
 4f4:	f5 dd       	rcall	.-1046   	; 0xe0 <write_8bit_data>
 4f6:	71 cf       	rjmp	.-286    	; 0x3da <main+0x1e>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
 4f8:	80 35       	cpi	r24, 0x50	; 80
 4fa:	49 f4       	brne	.+18     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			flashWriteWePin = USART_Receive();
 4fc:	ae dd       	rcall	.-1188   	; 0x5a <USART_Receive>
 4fe:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
 502:	81 34       	cpi	r24, 0x41	; 65
 504:	09 f0       	breq	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	69 cf       	rjmp	.-302    	; 0x3da <main+0x1e>
				DDRE |= (1<<AUDIO_PIN);
 508:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
 50a:	39 9a       	sbi	0x07, 1	; 7
 50c:	66 cf       	rjmp	.-308    	; 0x3da <main+0x1e>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
 50e:	8e 34       	cpi	r24, 0x4E	; 78
 510:	19 f4       	brne	.+6      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
			flashBank1CommandWrites = 1;
 512:	40 92 64 00 	sts	0x0064, r4	; 0x800064 <flashBank1CommandWrites>
 516:	61 cf       	rjmp	.-318    	; 0x3da <main+0x1e>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
 518:	85 34       	cpi	r24, 0x45	; 69
 51a:	09 f5       	brne	.+66     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 51c:	c5 e6       	ldi	r28, 0x65	; 101
 51e:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
 520:	b9 dd       	rcall	.-1166   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
 522:	40 e1       	ldi	r20, 0x10	; 16
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	81 e7       	ldi	r24, 0x71	; 113
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	07 d3       	rcall	.+1550   	; 0xb3e <strtol>
 530:	79 83       	std	Y+1, r23	; 0x01
 532:	68 83       	st	Y, r22
				USART_Transmit(SEND_ACK);
 534:	81 e3       	ldi	r24, 0x31	; 49
 536:	95 dd       	rcall	.-1238   	; 0x62 <USART_Transmit>
				
				usart_read_chars(); // Data
 538:	ad dd       	rcall	.-1190   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
 53a:	40 e1       	ldi	r20, 0x10	; 16
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	81 e7       	ldi	r24, 0x71	; 113
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fb d2       	rcall	.+1526   	; 0xb3e <strtol>
 548:	7b 83       	std	Y+3, r23	; 0x03
 54a:	6a 83       	std	Y+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
 54c:	81 e3       	ldi	r24, 0x31	; 49
 54e:	89 dd       	rcall	.-1262   	; 0x62 <USART_Transmit>
 550:	24 96       	adiw	r28, 0x04	; 4
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
 552:	81 e7       	ldi	r24, 0x71	; 113
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	8c 17       	cp	r24, r28
 558:	9d 07       	cpc	r25, r29
 55a:	11 f7       	brne	.-60     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 55c:	3e cf       	rjmp	.-388    	; 0x3da <main+0x1e>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 55e:	86 34       	cpi	r24, 0x46	; 70
 560:	c1 f4       	brne	.+48     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			usart_read_chars(); // Read address
 562:	98 dd       	rcall	.-1232   	; 0x94 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
 564:	40 e1       	ldi	r20, 0x10	; 16
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	81 e7       	ldi	r24, 0x71	; 113
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	e6 d2       	rcall	.+1484   	; 0xb3e <strtol>
 572:	4b 01       	movw	r8, r22
 574:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
 576:	8e dd       	rcall	.-1252   	; 0x94 <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
 578:	40 e1       	ldi	r20, 0x10	; 16
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	81 e7       	ldi	r24, 0x71	; 113
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	dc d2       	rcall	.+1464   	; 0xb3e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 586:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
 588:	c4 01       	movw	r24, r8
 58a:	cc dd       	rcall	.-1128   	; 0x124 <gb_flash_write_bus_cycle>
			PORTD &= ~(1<<ACTIVITY_LED);
 58c:	93 98       	cbi	0x12, 3	; 18
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 58e:	81 e3       	ldi	r24, 0x31	; 49
 590:	ad c2       	rjmp	.+1370   	; 0xaec <__LOCK_REGION_LENGTH__+0x6ec>
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 592:	84 35       	cpi	r24, 0x54	; 84
 594:	51 f5       	brne	.+84     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
			usart_read_bytes(64);
 596:	80 e4       	ldi	r24, 0x40	; 64
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	67 dd       	rcall	.-1330   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
 59c:	ad de       	rcall	.-678    	; 0x2f8 <start_timeout_timer>
			
			PORTD |= (1<<ACTIVITY_LED);
 59e:	93 9a       	sbi	0x12, 3	; 18
			if (flashBank1CommandWrites == 0) {
 5a0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashBank1CommandWrites>
 5a4:	01 e7       	ldi	r16, 0x71	; 113
 5a6:	10 e0       	ldi	r17, 0x00	; 0
 5a8:	c0 e0       	ldi	r28, 0x00	; 0
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
 5ac:	81 11       	cpse	r24, r1
 5ae:	13 c0       	rjmp	.+38     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
 5b0:	f8 01       	movw	r30, r16
 5b2:	61 91       	ld	r22, Z+
 5b4:	8f 01       	movw	r16, r30
 5b6:	6f 3f       	cpi	r22, 0xFF	; 255
 5b8:	21 f0       	breq	.+8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
						gb_flash_write_byte(address, receivedBuffer[x]);
 5ba:	ce 01       	movw	r24, r28
 5bc:	8c 0d       	add	r24, r12
 5be:	9d 1d       	adc	r25, r13
 5c0:	d0 dd       	rcall	.-1120   	; 0x162 <gb_flash_write_byte>
 5c2:	21 96       	adiw	r28, 0x01	; 1
			usart_read_bytes(64);
			start_timeout_timer();
			
			PORTD |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
 5c4:	c0 34       	cpi	r28, 0x40	; 64
 5c6:	d1 05       	cpc	r29, r1
 5c8:	99 f7       	brne	.-26     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5ca:	74 c0       	rjmp	.+232    	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 5cc:	21 96       	adiw	r28, 0x01	; 1
					}
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
 5ce:	c0 34       	cpi	r28, 0x40	; 64
 5d0:	d1 05       	cpc	r29, r1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d4:	6f c0       	rjmp	.+222    	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
					if (receivedBuffer[x] != 0xFF) {
 5d6:	f8 01       	movw	r30, r16
 5d8:	61 91       	ld	r22, Z+
 5da:	8f 01       	movw	r16, r30
 5dc:	6f 3f       	cpi	r22, 0xFF	; 255
 5de:	b1 f3       	breq	.-20     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
 5e0:	ce 01       	movw	r24, r28
 5e2:	8c 0d       	add	r24, r12
 5e4:	9d 1d       	adc	r25, r13
 5e6:	39 de       	rcall	.-910    	; 0x25a <gb_flash_write_byte_bank1_commands>
 5e8:	f1 cf       	rjmp	.-30     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
 5ea:	89 35       	cpi	r24, 0x59	; 89
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5ee:	4a c0       	rjmp	.+148    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
			usart_read_bytes(32);
 5f0:	80 e2       	ldi	r24, 0x20	; 32
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	3a dd       	rcall	.-1420   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
 5f6:	80 de       	rcall	.-768    	; 0x2f8 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
 5f8:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
 5fa:	6a ea       	ldi	r22, 0xAA	; 170
 5fc:	8a ea       	ldi	r24, 0xAA	; 170
 5fe:	9a e0       	ldi	r25, 0x0A	; 10
 600:	91 dd       	rcall	.-1246   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
 602:	65 e5       	ldi	r22, 0x55	; 85
 604:	85 e5       	ldi	r24, 0x55	; 85
 606:	95 e0       	ldi	r25, 0x05	; 5
 608:	8d dd       	rcall	.-1254   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
 60a:	56 01       	movw	r10, r12
 60c:	65 e2       	ldi	r22, 0x25	; 37
 60e:	c6 01       	movw	r24, r12
 610:	89 dd       	rcall	.-1262   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
 612:	6f e1       	ldi	r22, 0x1F	; 31
 614:	c6 01       	movw	r24, r12
 616:	86 dd       	rcall	.-1268   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 618:	25 e0       	ldi	r18, 0x05	; 5
 61a:	2a 95       	dec	r18
 61c:	f1 f7       	brne	.-4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 61e:	00 00       	nop
 620:	01 e7       	ldi	r16, 0x71	; 113
 622:	10 e0       	ldi	r17, 0x00	; 0
 624:	c0 e0       	ldi	r28, 0x00	; 0
 626:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 628:	f8 01       	movw	r30, r16
 62a:	61 91       	ld	r22, Z+
 62c:	8f 01       	movw	r16, r30
 62e:	c5 01       	movw	r24, r10
 630:	8c 0f       	add	r24, r28
 632:	9d 1f       	adc	r25, r29
 634:	77 dd       	rcall	.-1298   	; 0x124 <gb_flash_write_bus_cycle>
 636:	21 96       	adiw	r28, 0x01	; 1
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
 638:	c0 32       	cpi	r28, 0x20	; 32
 63a:	d1 05       	cpc	r29, r1
 63c:	a9 f7       	brne	.-22     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 63e:	f0 e2       	ldi	r31, 0x20	; 32
 640:	cf 0e       	add	r12, r31
 642:	d1 1c       	adc	r13, r1
 644:	e1 1c       	adc	r14, r1
 646:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
 648:	c6 01       	movw	r24, r12
 64a:	80 97       	sbiw	r24, 0x20	; 32
 64c:	69 e2       	ldi	r22, 0x29	; 41
 64e:	6a dd       	rcall	.-1324   	; 0x124 <gb_flash_write_bus_cycle>
 650:	8f e1       	ldi	r24, 0x1F	; 31
 652:	93 e0       	ldi	r25, 0x03	; 3
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 658:	00 c0       	rjmp	.+0      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 65a:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 65c:	e6 01       	movw	r28, r12
 65e:	21 97       	sbiw	r28, 0x01	; 1
 660:	ce 01       	movw	r24, r28
 662:	55 dd       	rcall	.-1366   	; 0x10e <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
 664:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <receivedBuffer+0x1f>
 668:	89 17       	cp	r24, r25
 66a:	09 f4       	brne	.+2      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 66c:	70 c0       	rjmp	.+224    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
				dataVerify = gb_flash_read_byte(address-1);
 66e:	ce 01       	movw	r24, r28
 670:	4e dd       	rcall	.-1380   	; 0x10e <gb_flash_read_byte>
 672:	9a e1       	ldi	r25, 0x1A	; 26
 674:	9a 95       	dec	r25
 676:	f1 f7       	brne	.-4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 678:	00 c0       	rjmp	.+0      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
				_delay_us(5);
				verifyCount++;
				if (writingTimedout == 1) {
 67a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 67e:	91 30       	cpi	r25, 0x01	; 1
 680:	89 f7       	brne	.-30     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 682:	65 c0       	rjmp	.+202    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
 684:	8a 34       	cpi	r24, 0x4A	; 74
 686:	e1 f4       	brne	.+56     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
			usart_read_bytes(64);
 688:	80 e4       	ldi	r24, 0x40	; 64
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	ee dc       	rcall	.-1572   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
 68e:	34 de       	rcall	.-920    	; 0x2f8 <start_timeout_timer>
			
			PORTD |= (1<<ACTIVITY_LED);
 690:	93 9a       	sbi	0x12, 3	; 18
 692:	01 e7       	ldi	r16, 0x71	; 113
 694:	10 e0       	ldi	r17, 0x00	; 0
 696:	c0 e0       	ldi	r28, 0x00	; 0
 698:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
 69a:	f8 01       	movw	r30, r16
 69c:	61 91       	ld	r22, Z+
 69e:	8f 01       	movw	r16, r30
 6a0:	6f 3f       	cpi	r22, 0xFF	; 255
 6a2:	21 f0       	breq	.+8      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
 6a4:	ce 01       	movw	r24, r28
 6a6:	8c 0d       	add	r24, r12
 6a8:	9d 1d       	adc	r25, r13
 6aa:	90 dd       	rcall	.-1248   	; 0x1cc <gb_flash_write_byte_special>
 6ac:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			start_timeout_timer();
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 6ae:	c0 34       	cpi	r28, 0x40	; 64
 6b0:	d1 05       	cpc	r29, r1
 6b2:	99 f7       	brne	.-26     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 6b4:	f0 e4       	ldi	r31, 0x40	; 64
 6b6:	cf 0e       	add	r12, r31
 6b8:	d1 1c       	adc	r13, r1
 6ba:	e1 1c       	adc	r14, r1
 6bc:	f1 1c       	adc	r15, r1
 6be:	47 c0       	rjmp	.+142    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
 6c0:	88 35       	cpi	r24, 0x58	; 88
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6c4:	46 c0       	rjmp	.+140    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
			usart_read_bytes(256);
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	cf dc       	rcall	.-1634   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
 6cc:	15 de       	rcall	.-982    	; 0x2f8 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
 6ce:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
 6d0:	69 ea       	ldi	r22, 0xA9	; 169
 6d2:	8a ea       	ldi	r24, 0xAA	; 170
 6d4:	9a e0       	ldi	r25, 0x0A	; 10
 6d6:	26 dd       	rcall	.-1460   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
 6d8:	66 e5       	ldi	r22, 0x56	; 86
 6da:	85 e5       	ldi	r24, 0x55	; 85
 6dc:	95 e0       	ldi	r25, 0x05	; 5
 6de:	22 dd       	rcall	.-1468   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
 6e0:	56 01       	movw	r10, r12
 6e2:	66 e2       	ldi	r22, 0x26	; 38
 6e4:	c6 01       	movw	r24, r12
 6e6:	1e dd       	rcall	.-1476   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
 6e8:	6f ef       	ldi	r22, 0xFF	; 255
 6ea:	c6 01       	movw	r24, r12
 6ec:	1b dd       	rcall	.-1482   	; 0x124 <gb_flash_write_bus_cycle>
 6ee:	87 ec       	ldi	r24, 0xC7	; 199
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6f8:	00 00       	nop
 6fa:	01 e7       	ldi	r16, 0x71	; 113
 6fc:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 6fe:	c0 e0       	ldi	r28, 0x00	; 0
 700:	d0 e0       	ldi	r29, 0x00	; 0
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 702:	f8 01       	movw	r30, r16
 704:	61 91       	ld	r22, Z+
 706:	8f 01       	movw	r16, r30
 708:	ce 01       	movw	r24, r28
 70a:	8a 0d       	add	r24, r10
 70c:	9b 1d       	adc	r25, r11
 70e:	0a dd       	rcall	.-1516   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 710:	21 96       	adiw	r28, 0x01	; 1
 712:	c1 15       	cp	r28, r1
 714:	f1 e0       	ldi	r31, 0x01	; 1
 716:	df 07       	cpc	r29, r31
 718:	a1 f7       	brne	.-24     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 71a:	2f ef       	ldi	r18, 0xFF	; 255
 71c:	d2 1a       	sub	r13, r18
 71e:	e2 0a       	sbc	r14, r18
 720:	f2 0a       	sbc	r15, r18
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
 722:	c6 01       	movw	r24, r12
 724:	9a 95       	dec	r25
 726:	6a e2       	ldi	r22, 0x2A	; 42
 728:	fd dc       	rcall	.-1542   	; 0x124 <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 72a:	e6 01       	movw	r28, r12
 72c:	21 97       	sbiw	r28, 0x01	; 1
 72e:	ce 01       	movw	r24, r28
 730:	ee dc       	rcall	.-1572   	; 0x10e <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
 732:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <receivedBuffer+0xff>
 736:	89 17       	cp	r24, r25
 738:	51 f0       	breq	.+20     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
				dataVerify = gb_flash_read_byte(address-1);
 73a:	ce 01       	movw	r24, r28
 73c:	e8 dc       	rcall	.-1584   	; 0x10e <gb_flash_read_byte>
 73e:	9a e1       	ldi	r25, 0x1A	; 26
 740:	9a 95       	dec	r25
 742:	f1 f7       	brne	.-4      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 744:	00 c0       	rjmp	.+0      	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
				_delay_us(5);
				if (writingTimedout == 1) {
 746:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 74a:	91 30       	cpi	r25, 0x01	; 1
 74c:	91 f7       	brne	.-28     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
					break;
				}
			}
			
			check_if_timed_out(); // Send ACK if successful write
 74e:	e3 dd       	rcall	.-1082   	; 0x316 <check_if_timed_out>
 750:	44 ce       	rjmp	.-888    	; 0x3da <main+0x1e>
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
 752:	8a 35       	cpi	r24, 0x5A	; 90
 754:	09 f0       	breq	.+2      	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 756:	b9 c0       	rjmp	.+370    	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
			usart_read_bytes(128);
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	86 dc       	rcall	.-1780   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 75e:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
 760:	69 e0       	ldi	r22, 0x09	; 9
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	de dc       	rcall	.-1604   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
 768:	6a ea       	ldi	r22, 0xAA	; 170
 76a:	81 e2       	ldi	r24, 0x21	; 33
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	da dc       	rcall	.-1612   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
 770:	65 e5       	ldi	r22, 0x55	; 85
 772:	82 e2       	ldi	r24, 0x22	; 34
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	d6 dc       	rcall	.-1620   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 778:	65 ea       	ldi	r22, 0xA5	; 165
 77a:	8f e3       	ldi	r24, 0x3F	; 63
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	d2 dc       	rcall	.-1628   	; 0x124 <gb_flash_write_bus_cycle>
 780:	ea e1       	ldi	r30, 0x1A	; 26
 782:	ea 95       	dec	r30
 784:	f1 f7       	brne	.-4      	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 786:	00 c0       	rjmp	.+0      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
 788:	61 e1       	ldi	r22, 0x11	; 17
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	ca dc       	rcall	.-1644   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 790:	65 ea       	ldi	r22, 0xA5	; 165
 792:	8f e3       	ldi	r24, 0x3F	; 63
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	c6 dc       	rcall	.-1652   	; 0x124 <gb_flash_write_bus_cycle>
 798:	fa e1       	ldi	r31, 0x1A	; 26
 79a:	fa 95       	dec	r31
 79c:	f1 f7       	brne	.-4      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
 7a0:	61 e0       	ldi	r22, 0x01	; 1
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	91 e2       	ldi	r25, 0x21	; 33
 7a6:	be dc       	rcall	.-1668   	; 0x124 <gb_flash_write_bus_cycle>
 7a8:	2a e1       	ldi	r18, 0x1A	; 26
 7aa:	2a 95       	dec	r18
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
 7b0:	6f e0       	ldi	r22, 0x0F	; 15
 7b2:	80 e2       	ldi	r24, 0x20	; 32
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	b6 dc       	rcall	.-1684   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 7b8:	65 e5       	ldi	r22, 0x55	; 85
 7ba:	85 e2       	ldi	r24, 0x25	; 37
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	b2 dc       	rcall	.-1692   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 7c0:	65 e5       	ldi	r22, 0x55	; 85
 7c2:	86 e2       	ldi	r24, 0x26	; 38
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	ae dc       	rcall	.-1700   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
 7c8:	6a ea       	ldi	r22, 0xAA	; 170
 7ca:	87 e2       	ldi	r24, 0x27	; 39
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	aa dc       	rcall	.-1708   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 7d0:	65 ea       	ldi	r22, 0xA5	; 165
 7d2:	8f e3       	ldi	r24, 0x3F	; 63
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	a6 dc       	rcall	.-1716   	; 0x124 <gb_flash_write_bus_cycle>
 7d8:	8a e1       	ldi	r24, 0x1A	; 26
 7da:	8a 95       	dec	r24
 7dc:	f1 f7       	brne	.-4      	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 7e0:	6f e0       	ldi	r22, 0x0F	; 15
 7e2:	80 e2       	ldi	r24, 0x20	; 32
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	9e dc       	rcall	.-1732   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
 7e8:	6a e2       	ldi	r22, 0x2A	; 42
 7ea:	85 e2       	ldi	r24, 0x25	; 37
 7ec:	91 e0       	ldi	r25, 0x01	; 1
 7ee:	9a dc       	rcall	.-1740   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
 7f0:	6a ea       	ldi	r22, 0xAA	; 170
 7f2:	86 e2       	ldi	r24, 0x26	; 38
 7f4:	91 e0       	ldi	r25, 0x01	; 1
 7f6:	96 dc       	rcall	.-1748   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
 7f8:	65 e5       	ldi	r22, 0x55	; 85
 7fa:	87 e2       	ldi	r24, 0x27	; 39
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	92 dc       	rcall	.-1756   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 800:	65 ea       	ldi	r22, 0xA5	; 165
 802:	8f e3       	ldi	r24, 0x3F	; 63
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	8e dc       	rcall	.-1764   	; 0x124 <gb_flash_write_bus_cycle>
 808:	9a e1       	ldi	r25, 0x1A	; 26
 80a:	9a 95       	dec	r25
 80c:	f1 f7       	brne	.-4      	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 810:	6f e0       	ldi	r22, 0x0F	; 15
 812:	80 e2       	ldi	r24, 0x20	; 32
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	86 dc       	rcall	.-1780   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 818:	65 e5       	ldi	r22, 0x55	; 85
 81a:	85 e2       	ldi	r24, 0x25	; 37
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	82 dc       	rcall	.-1788   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 820:	65 e5       	ldi	r22, 0x55	; 85
 822:	86 e2       	ldi	r24, 0x26	; 38
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	7e dc       	rcall	.-1796   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
 828:	60 ea       	ldi	r22, 0xA0	; 160
 82a:	87 e2       	ldi	r24, 0x27	; 39
 82c:	91 e0       	ldi	r25, 0x01	; 1
 82e:	7a dc       	rcall	.-1804   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 830:	65 ea       	ldi	r22, 0xA5	; 165
 832:	8f e3       	ldi	r24, 0x3F	; 63
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	76 dc       	rcall	.-1812   	; 0x124 <gb_flash_write_bus_cycle>
 838:	ea e1       	ldi	r30, 0x1A	; 26
 83a:	ea 95       	dec	r30
 83c:	f1 f7       	brne	.-4      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
 83e:	00 c0       	rjmp	.+0      	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 840:	40 e0       	ldi	r20, 0x00	; 0
 842:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <lastBankAccessed>
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	91 e2       	ldi	r25, 0x21	; 33
 84a:	4a dc       	rcall	.-1900   	; 0xe0 <write_8bit_data>
 84c:	fa e1       	ldi	r31, 0x1A	; 26
 84e:	fa 95       	dec	r31
 850:	f1 f7       	brne	.-4      	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
 852:	00 c0       	rjmp	.+0      	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
 854:	60 e1       	ldi	r22, 0x10	; 16
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	64 dc       	rcall	.-1848   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 85c:	65 ea       	ldi	r22, 0xA5	; 165
 85e:	8f e3       	ldi	r24, 0x3F	; 63
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	60 dc       	rcall	.-1856   	; 0x124 <gb_flash_write_bus_cycle>
 864:	2a e1       	ldi	r18, 0x1A	; 26
 866:	2a 95       	dec	r18
 868:	f1 f7       	brne	.-4      	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
 86c:	68 e0       	ldi	r22, 0x08	; 8
 86e:	80 e2       	ldi	r24, 0x20	; 32
 870:	91 e0       	ldi	r25, 0x01	; 1
 872:	58 dc       	rcall	.-1872   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 874:	65 ea       	ldi	r22, 0xA5	; 165
 876:	8f e3       	ldi	r24, 0x3F	; 63
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	54 dc       	rcall	.-1880   	; 0x124 <gb_flash_write_bus_cycle>
 87c:	8a e1       	ldi	r24, 0x1A	; 26
 87e:	8a 95       	dec	r24
 880:	f1 f7       	brne	.-4      	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
 882:	00 c0       	rjmp	.+0      	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
 884:	c1 e7       	ldi	r28, 0x71	; 113
 886:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
 888:	6c 16       	cp	r6, r28
 88a:	7d 06       	cpc	r7, r29
 88c:	69 f0       	breq	.+26     	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 88e:	69 91       	ld	r22, Y+
 890:	c6 01       	movw	r24, r12
 892:	48 dc       	rcall	.-1904   	; 0x124 <gb_flash_write_bus_cycle>
 894:	9a e1       	ldi	r25, 0x1A	; 26
 896:	9a 95       	dec	r25
 898:	f1 f7       	brne	.-4      	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
				_delay_us(5);
				address++;
 89c:	ef ef       	ldi	r30, 0xFF	; 255
 89e:	ce 1a       	sub	r12, r30
 8a0:	de 0a       	sbc	r13, r30
 8a2:	ee 0a       	sbc	r14, r30
 8a4:	fe 0a       	sbc	r15, r30
 8a6:	f0 cf       	rjmp	.-32     	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
 8a8:	6f ef       	ldi	r22, 0xFF	; 255
 8aa:	d7 01       	movw	r26, r14
 8ac:	c6 01       	movw	r24, r12
 8ae:	01 97       	sbiw	r24, 0x01	; 1
 8b0:	a1 09       	sbc	r26, r1
 8b2:	b1 09       	sbc	r27, r1
 8b4:	37 dc       	rcall	.-1938   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8b6:	8f e3       	ldi	r24, 0x3F	; 63
 8b8:	9c e9       	ldi	r25, 0x9C	; 156
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
 8c0:	00 00       	nop
			address++;
			_delay_ms(10);
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 8c2:	81 e3       	ldi	r24, 0x31	; 49
 8c4:	ce db       	rcall	.-2148   	; 0x62 <USART_Transmit>
			PORTD &= ~(1<<ACTIVITY_LED);
 8c6:	93 98       	cbi	0x12, 3	; 18
 8c8:	88 cd       	rjmp	.-1264   	; 0x3da <main+0x1e>
		}
		
		// Buffered programming, write 32 bytes to Flash address
		// Intel chips such as 28F640J5 (Thanks to lesserkuma for adding support)
		else if (receivedChar == GB_FLASH_WRITE_INTEL_BUFFERED_32BYTE) {
 8ca:	89 37       	cpi	r24, 0x79	; 121
 8cc:	a9 f5       	brne	.+106    	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
			usart_read_bytes(32);
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	cb db       	rcall	.-2154   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 8d4:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(address, 0xE8);
 8d6:	86 01       	movw	r16, r12
 8d8:	68 ee       	ldi	r22, 0xE8	; 232
 8da:	c6 01       	movw	r24, r12
 8dc:	23 dc       	rcall	.-1978   	; 0x124 <gb_flash_write_bus_cycle>
			
			// Wait until ready
			//do { status = gb_flash_read_byte(address); } while(status != 0x80);
			while (gb_flash_read_byte(address) != 0x80);
 8de:	c8 01       	movw	r24, r16
 8e0:	16 dc       	rcall	.-2004   	; 0x10e <gb_flash_read_byte>
 8e2:	80 38       	cpi	r24, 0x80	; 128
 8e4:	e1 f7       	brne	.-8      	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
			
			// Set buffer size
			gb_flash_write_bus_cycle(address, 0x1F);
 8e6:	6f e1       	ldi	r22, 0x1F	; 31
 8e8:	c8 01       	movw	r24, r16
 8ea:	1c dc       	rcall	.-1992   	; 0x124 <gb_flash_write_bus_cycle>
 8ec:	81 e7       	ldi	r24, 0x71	; 113
 8ee:	a8 2e       	mov	r10, r24
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	b8 2e       	mov	r11, r24
 8f4:	c0 e0       	ldi	r28, 0x00	; 0
 8f6:	d0 e0       	ldi	r29, 0x00	; 0
			
			// Write data to buffer
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 8f8:	f5 01       	movw	r30, r10
 8fa:	61 91       	ld	r22, Z+
 8fc:	5f 01       	movw	r10, r30
 8fe:	ce 01       	movw	r24, r28
 900:	80 0f       	add	r24, r16
 902:	91 1f       	adc	r25, r17
 904:	0f dc       	rcall	.-2018   	; 0x124 <gb_flash_write_bus_cycle>
 906:	21 96       	adiw	r28, 0x01	; 1
			
			// Set buffer size
			gb_flash_write_bus_cycle(address, 0x1F);
			
			// Write data to buffer
			for (uint8_t x = 0; x < 32; x++) {
 908:	c0 32       	cpi	r28, 0x20	; 32
 90a:	d1 05       	cpc	r29, r1
 90c:	a9 f7       	brne	.-22     	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
 90e:	f0 e2       	ldi	r31, 0x20	; 32
 910:	cf 0e       	add	r12, r31
 912:	d1 1c       	adc	r13, r1
 914:	e1 1c       	adc	r14, r1
 916:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0xD0);
 918:	e6 01       	movw	r28, r12
 91a:	a0 97       	sbiw	r28, 0x20	; 32
 91c:	60 ed       	ldi	r22, 0xD0	; 208
 91e:	ce 01       	movw	r24, r28
 920:	01 dc       	rcall	.-2046   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 922:	8f e0       	ldi	r24, 0x0F	; 15
 924:	93 e0       	ldi	r25, 0x03	; 3
 926:	01 97       	sbiw	r24, 0x01	; 1
 928:	f1 f7       	brne	.-4      	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <__LOCK_REGION_LENGTH__+0x52c>
 92c:	00 00       	nop
			_delay_us(196);
			
			// Wait until ready
			//do { status = gb_flash_read_byte(address-32); } while(status != 0x80);
			while (gb_flash_read_byte(address-32) != 0x80);
 92e:	ce 01       	movw	r24, r28
 930:	ee db       	rcall	.-2084   	; 0x10e <gb_flash_read_byte>
 932:	80 38       	cpi	r24, 0x80	; 128
 934:	e1 f7       	brne	.-8      	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
 936:	c5 cf       	rjmp	.-118    	; 0x8c2 <__LOCK_REGION_LENGTH__+0x4c2>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 938:	89 34       	cpi	r24, 0x49	; 73
 93a:	19 f0       	breq	.+6      	; 0x942 <__LOCK_REGION_LENGTH__+0x542>
 93c:	8f 34       	cpi	r24, 0x4F	; 79
 93e:	09 f0       	breq	.+2      	; 0x942 <__LOCK_REGION_LENGTH__+0x542>
 940:	50 c0       	rjmp	.+160    	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
			char portChar = USART_Receive();
 942:	8b db       	rcall	.-2282   	; 0x5a <USART_Receive>
 944:	c8 2f       	mov	r28, r24
			usart_read_chars();
 946:	a6 db       	rcall	.-2228   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 948:	40 e1       	ldi	r20, 0x10	; 16
 94a:	50 e0       	ldi	r21, 0x00	; 0
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	81 e7       	ldi	r24, 0x71	; 113
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	f4 d0       	rcall	.+488    	; 0xb3e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 956:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
 958:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
 95c:	89 34       	cpi	r24, 0x49	; 73
 95e:	f9 f4       	brne	.+62     	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
				if (portChar == 'A') {
 960:	c1 34       	cpi	r28, 0x41	; 65
 962:	21 f4       	brne	.+8      	; 0x96c <__LOCK_REGION_LENGTH__+0x56c>
					DDRA &= ~(setValue);
 964:	8a b3       	in	r24, 0x1a	; 26
 966:	60 95       	com	r22
 968:	68 23       	and	r22, r24
 96a:	20 c0       	rjmp	.+64     	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
				}
				else if (portChar == 'B') {
 96c:	c2 34       	cpi	r28, 0x42	; 66
 96e:	21 f4       	brne	.+8      	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
					DDRB &= ~(setValue);
 970:	87 b3       	in	r24, 0x17	; 23
 972:	60 95       	com	r22
 974:	68 23       	and	r22, r24
 976:	20 c0       	rjmp	.+64     	; 0x9b8 <__LOCK_REGION_LENGTH__+0x5b8>
				}
				else if (portChar == 'C') {
 978:	c3 34       	cpi	r28, 0x43	; 67
 97a:	21 f4       	brne	.+8      	; 0x984 <__LOCK_REGION_LENGTH__+0x584>
					DDRC &= ~(setValue);
 97c:	84 b3       	in	r24, 0x14	; 20
 97e:	60 95       	com	r22
 980:	68 23       	and	r22, r24
 982:	20 c0       	rjmp	.+64     	; 0x9c4 <__LOCK_REGION_LENGTH__+0x5c4>
				}
				else if (portChar == 'D') {
 984:	c4 34       	cpi	r28, 0x44	; 68
 986:	21 f4       	brne	.+8      	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
					DDRD &= ~(setValue);
 988:	81 b3       	in	r24, 0x11	; 17
 98a:	60 95       	com	r22
 98c:	68 23       	and	r22, r24
 98e:	20 c0       	rjmp	.+64     	; 0x9d0 <__LOCK_REGION_LENGTH__+0x5d0>
				}
				else if (portChar == 'E') {
 990:	c5 34       	cpi	r28, 0x45	; 69
 992:	09 f0       	breq	.+2      	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
 994:	98 cf       	rjmp	.-208    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
					DDRE &= ~(setValue);
 996:	86 b1       	in	r24, 0x06	; 6
 998:	60 95       	com	r22
 99a:	68 23       	and	r22, r24
 99c:	20 c0       	rjmp	.+64     	; 0x9de <__LOCK_REGION_LENGTH__+0x5de>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
 99e:	8f 34       	cpi	r24, 0x4F	; 79
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
 9a2:	91 cf       	rjmp	.-222    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				if (portChar == 'A') {
 9a4:	c1 34       	cpi	r28, 0x41	; 65
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <__LOCK_REGION_LENGTH__+0x5b0>
					DDRA |= (setValue);
 9a8:	8a b3       	in	r24, 0x1a	; 26
 9aa:	68 2b       	or	r22, r24
 9ac:	6a bb       	out	0x1a, r22	; 26
 9ae:	8b cf       	rjmp	.-234    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				}
				else if (portChar == 'B') {
 9b0:	c2 34       	cpi	r28, 0x42	; 66
 9b2:	21 f4       	brne	.+8      	; 0x9bc <__LOCK_REGION_LENGTH__+0x5bc>
					DDRB |= (setValue);
 9b4:	87 b3       	in	r24, 0x17	; 23
 9b6:	68 2b       	or	r22, r24
 9b8:	67 bb       	out	0x17, r22	; 23
 9ba:	85 cf       	rjmp	.-246    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				}
				else if (portChar == 'C') {
 9bc:	c3 34       	cpi	r28, 0x43	; 67
 9be:	21 f4       	brne	.+8      	; 0x9c8 <__LOCK_REGION_LENGTH__+0x5c8>
					DDRC |= (setValue);
 9c0:	84 b3       	in	r24, 0x14	; 20
 9c2:	68 2b       	or	r22, r24
 9c4:	64 bb       	out	0x14, r22	; 20
 9c6:	7f cf       	rjmp	.-258    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				}
				else if (portChar == 'D') {
 9c8:	c4 34       	cpi	r28, 0x44	; 68
 9ca:	21 f4       	brne	.+8      	; 0x9d4 <__LOCK_REGION_LENGTH__+0x5d4>
					DDRD |= (setValue);
 9cc:	81 b3       	in	r24, 0x11	; 17
 9ce:	68 2b       	or	r22, r24
 9d0:	61 bb       	out	0x11, r22	; 17
 9d2:	79 cf       	rjmp	.-270    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				}
				else if (portChar == 'E') {
 9d4:	c5 34       	cpi	r28, 0x45	; 69
 9d6:	09 f0       	breq	.+2      	; 0x9da <__LOCK_REGION_LENGTH__+0x5da>
 9d8:	76 cf       	rjmp	.-276    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
					DDRE |= (setValue);
 9da:	86 b1       	in	r24, 0x06	; 6
 9dc:	68 2b       	or	r22, r24
 9de:	66 b9       	out	0x06, r22	; 6
 9e0:	72 cf       	rjmp	.-284    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
 9e2:	8c 34       	cpi	r24, 0x4C	; 76
 9e4:	51 f5       	brne	.+84     	; 0xa3a <__LOCK_REGION_LENGTH__+0x63a>
			char portChar = USART_Receive();			
 9e6:	39 db       	rcall	.-2446   	; 0x5a <USART_Receive>
 9e8:	c8 2f       	mov	r28, r24
			usart_read_chars();
 9ea:	54 db       	rcall	.-2392   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 9ec:	40 e1       	ldi	r20, 0x10	; 16
 9ee:	50 e0       	ldi	r21, 0x00	; 0
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	81 e7       	ldi	r24, 0x71	; 113
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	a2 d0       	rcall	.+324    	; 0xb3e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 9fa:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 9fc:	c1 34       	cpi	r28, 0x41	; 65
 9fe:	21 f4       	brne	.+8      	; 0xa08 <__LOCK_REGION_LENGTH__+0x608>
				PORTA &= ~(setValue);
 a00:	8b b3       	in	r24, 0x1b	; 27
 a02:	60 95       	com	r22
 a04:	68 23       	and	r22, r24
 a06:	2a c0       	rjmp	.+84     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
			}
			else if (portChar == 'B') {
 a08:	c2 34       	cpi	r28, 0x42	; 66
 a0a:	21 f4       	brne	.+8      	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
				PORTB &= ~(setValue);
 a0c:	88 b3       	in	r24, 0x18	; 24
 a0e:	60 95       	com	r22
 a10:	68 23       	and	r22, r24
 a12:	2a c0       	rjmp	.+84     	; 0xa68 <__LOCK_REGION_LENGTH__+0x668>
			}
			else if (portChar == 'C') {
 a14:	c3 34       	cpi	r28, 0x43	; 67
 a16:	21 f4       	brne	.+8      	; 0xa20 <__LOCK_REGION_LENGTH__+0x620>
				PORTC &= ~(setValue);
 a18:	85 b3       	in	r24, 0x15	; 21
 a1a:	60 95       	com	r22
 a1c:	68 23       	and	r22, r24
 a1e:	2a c0       	rjmp	.+84     	; 0xa74 <__LOCK_REGION_LENGTH__+0x674>
			}
			else if (portChar == 'D') {
 a20:	c4 34       	cpi	r28, 0x44	; 68
 a22:	21 f4       	brne	.+8      	; 0xa2c <__LOCK_REGION_LENGTH__+0x62c>
				PORTD &= ~(setValue);
 a24:	82 b3       	in	r24, 0x12	; 18
 a26:	60 95       	com	r22
 a28:	68 23       	and	r22, r24
 a2a:	2a c0       	rjmp	.+84     	; 0xa80 <__LOCK_REGION_LENGTH__+0x680>
			}
			else if (portChar == 'E') {
 a2c:	c5 34       	cpi	r28, 0x45	; 69
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
 a30:	4a cf       	rjmp	.-364    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				PORTE &= ~(setValue);
 a32:	87 b1       	in	r24, 0x07	; 7
 a34:	60 95       	com	r22
 a36:	68 23       	and	r22, r24
 a38:	2a c0       	rjmp	.+84     	; 0xa8e <__LOCK_REGION_LENGTH__+0x68e>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
 a3a:	88 34       	cpi	r24, 0x48	; 72
 a3c:	51 f5       	brne	.+84     	; 0xa92 <__LOCK_REGION_LENGTH__+0x692>
			char portChar = USART_Receive();			
 a3e:	0d db       	rcall	.-2534   	; 0x5a <USART_Receive>
 a40:	c8 2f       	mov	r28, r24
			usart_read_chars();
 a42:	28 db       	rcall	.-2480   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 a44:	40 e1       	ldi	r20, 0x10	; 16
 a46:	50 e0       	ldi	r21, 0x00	; 0
 a48:	60 e0       	ldi	r22, 0x00	; 0
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	81 e7       	ldi	r24, 0x71	; 113
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	76 d0       	rcall	.+236    	; 0xb3e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 a52:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 a54:	c1 34       	cpi	r28, 0x41	; 65
 a56:	21 f4       	brne	.+8      	; 0xa60 <__LOCK_REGION_LENGTH__+0x660>
				PORTA |= (setValue);
 a58:	8b b3       	in	r24, 0x1b	; 27
 a5a:	68 2b       	or	r22, r24
 a5c:	6b bb       	out	0x1b, r22	; 27
 a5e:	33 cf       	rjmp	.-410    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			}
			else if (portChar == 'B') {
 a60:	c2 34       	cpi	r28, 0x42	; 66
 a62:	21 f4       	brne	.+8      	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
				PORTB |= (setValue);
 a64:	88 b3       	in	r24, 0x18	; 24
 a66:	68 2b       	or	r22, r24
 a68:	68 bb       	out	0x18, r22	; 24
 a6a:	2d cf       	rjmp	.-422    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			}
			else if (portChar == 'C') {
 a6c:	c3 34       	cpi	r28, 0x43	; 67
 a6e:	21 f4       	brne	.+8      	; 0xa78 <__LOCK_REGION_LENGTH__+0x678>
				PORTC |= (setValue);
 a70:	85 b3       	in	r24, 0x15	; 21
 a72:	68 2b       	or	r22, r24
 a74:	65 bb       	out	0x15, r22	; 21
 a76:	27 cf       	rjmp	.-434    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			}
			else if (portChar == 'D') {
 a78:	c4 34       	cpi	r28, 0x44	; 68
 a7a:	21 f4       	brne	.+8      	; 0xa84 <__LOCK_REGION_LENGTH__+0x684>
				PORTD |= (setValue);
 a7c:	82 b3       	in	r24, 0x12	; 18
 a7e:	68 2b       	or	r22, r24
 a80:	62 bb       	out	0x12, r22	; 18
 a82:	21 cf       	rjmp	.-446    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			}
			else if (portChar == 'E') {
 a84:	c5 34       	cpi	r28, 0x45	; 69
 a86:	09 f0       	breq	.+2      	; 0xa8a <__LOCK_REGION_LENGTH__+0x68a>
 a88:	1e cf       	rjmp	.-452    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				PORTE |= (setValue);
 a8a:	87 b1       	in	r24, 0x07	; 7
 a8c:	68 2b       	or	r22, r24
 a8e:	67 b9       	out	0x07, r22	; 7
 a90:	1a cf       	rjmp	.-460    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
 a92:	84 34       	cpi	r24, 0x44	; 68
 a94:	b9 f4       	brne	.+46     	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
			char portChar = USART_Receive();			
 a96:	e1 da       	rcall	.-2622   	; 0x5a <USART_Receive>
			
			PORTD |= (1<<ACTIVITY_LED);
 a98:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 a9a:	81 34       	cpi	r24, 0x41	; 65
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__LOCK_REGION_LENGTH__+0x6a2>
				USART_Transmit(PINA);
 a9e:	89 b3       	in	r24, 0x19	; 25
 aa0:	11 cf       	rjmp	.-478    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
			}
			else if (portChar == 'B') {
 aa2:	82 34       	cpi	r24, 0x42	; 66
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__LOCK_REGION_LENGTH__+0x6aa>
				USART_Transmit(PINB);
 aa6:	86 b3       	in	r24, 0x16	; 22
 aa8:	0d cf       	rjmp	.-486    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
			}
			else if (portChar == 'C') {
 aaa:	83 34       	cpi	r24, 0x43	; 67
 aac:	11 f4       	brne	.+4      	; 0xab2 <__LOCK_REGION_LENGTH__+0x6b2>
				USART_Transmit(PINC);
 aae:	83 b3       	in	r24, 0x13	; 19
 ab0:	09 cf       	rjmp	.-494    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
			}
			else if (portChar == 'D') {
 ab2:	84 34       	cpi	r24, 0x44	; 68
 ab4:	11 f4       	brne	.+4      	; 0xaba <__LOCK_REGION_LENGTH__+0x6ba>
				USART_Transmit(PIND);
 ab6:	80 b3       	in	r24, 0x10	; 16
 ab8:	05 cf       	rjmp	.-502    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
			}
			else if (portChar == 'E') {
 aba:	85 34       	cpi	r24, 0x45	; 69
 abc:	09 f0       	breq	.+2      	; 0xac0 <__LOCK_REGION_LENGTH__+0x6c0>
 abe:	03 cf       	rjmp	.-506    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				USART_Transmit(PINE);
 ac0:	85 b1       	in	r24, 0x05	; 5
 ac2:	00 cf       	rjmp	.-512    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
 ac4:	8d 34       	cpi	r24, 0x4D	; 77
 ac6:	59 f4       	brne	.+22     	; 0xade <__LOCK_REGION_LENGTH__+0x6de>
			char commonChar = USART_Receive();
 ac8:	c8 da       	rcall	.-2672   	; 0x5a <USART_Receive>
			if (commonChar == '1') {
 aca:	81 33       	cpi	r24, 0x31	; 49
 acc:	19 f4       	brne	.+6      	; 0xad4 <__LOCK_REGION_LENGTH__+0x6d4>
				resetCommonLines = 1;
 ace:	55 24       	eor	r5, r5
 ad0:	53 94       	inc	r5
 ad2:	86 cc       	rjmp	.-1780   	; 0x3e0 <main+0x24>
			}
			else if (commonChar == '0') {
 ad4:	80 33       	cpi	r24, 0x30	; 48
 ad6:	09 f0       	breq	.+2      	; 0xada <__LOCK_REGION_LENGTH__+0x6da>
 ad8:	80 cc       	rjmp	.-1792   	; 0x3da <main+0x1e>
				resetCommonLines = 0;
 ada:	51 2c       	mov	r5, r1
 adc:	82 cc       	rjmp	.-1788   	; 0x3e2 <main+0x26>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
 ade:	88 36       	cpi	r24, 0x68	; 104
 ae0:	11 f4       	brne	.+4      	; 0xae6 <__LOCK_REGION_LENGTH__+0x6e6>
			USART_Transmit(PCB_VERSION);
 ae2:	84 e6       	ldi	r24, 0x64	; 100
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <__LOCK_REGION_LENGTH__+0x6ec>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
 ae6:	86 35       	cpi	r24, 0x56	; 86
 ae8:	19 f4       	brne	.+6      	; 0xaf0 <__LOCK_REGION_LENGTH__+0x6f0>
			USART_Transmit(FIRMWARE_VERSION);
 aea:	83 e1       	ldi	r24, 0x13	; 19
 aec:	ba da       	rcall	.-2700   	; 0x62 <USART_Transmit>
 aee:	75 cc       	rjmp	.-1814   	; 0x3da <main+0x1e>
		}
		
		// Send back 32KB for a speed test
		else if (receivedChar == FAST_READ_CHECK) {
 af0:	8b 32       	cpi	r24, 0x2B	; 43
 af2:	49 f4       	brne	.+18     	; 0xb06 <__LOCK_REGION_LENGTH__+0x706>
 af4:	c0 e0       	ldi	r28, 0x00	; 0
 af6:	d0 e4       	ldi	r29, 0x40	; 64
			for (uint16_t x = 0; x < 0x4000; x++) {
				USART_Transmit('1');
 af8:	81 e3       	ldi	r24, 0x31	; 49
 afa:	b3 da       	rcall	.-2714   	; 0x62 <USART_Transmit>
				USART_Transmit('0');
 afc:	80 e3       	ldi	r24, 0x30	; 48
 afe:	b1 da       	rcall	.-2718   	; 0x62 <USART_Transmit>
 b00:	21 97       	sbiw	r28, 0x01	; 1
			USART_Transmit(FIRMWARE_VERSION);
		}
		
		// Send back 32KB for a speed test
		else if (receivedChar == FAST_READ_CHECK) {
			for (uint16_t x = 0; x < 0x4000; x++) {
 b02:	d1 f7       	brne	.-12     	; 0xaf8 <__LOCK_REGION_LENGTH__+0x6f8>
 b04:	6a cc       	rjmp	.-1836   	; 0x3da <main+0x1e>
				USART_Transmit('0');
			}
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
 b06:	8a 32       	cpi	r24, 0x2A	; 42
 b08:	09 f0       	breq	.+2      	; 0xb0c <__LOCK_REGION_LENGTH__+0x70c>
 b0a:	67 cc       	rjmp	.-1842   	; 0x3da <main+0x1e>
			usart_read_chars();
 b0c:	c3 da       	rcall	.-2682   	; 0x94 <usart_read_chars>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 b0e:	40 e1       	ldi	r20, 0x10	; 16
 b10:	50 e0       	ldi	r21, 0x00	; 0
 b12:	60 e0       	ldi	r22, 0x00	; 0
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	81 e7       	ldi	r24, 0x71	; 113
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	11 d0       	rcall	.+34     	; 0xb3e <strtol>
			if (resetValue == RESET_VALUE) {
 b1c:	61 3e       	cpi	r22, 0xE1	; 225
 b1e:	75 4e       	sbci	r23, 0xE5	; 229
 b20:	87 40       	sbci	r24, 0x07	; 7
 b22:	91 05       	cpc	r25, r1
 b24:	09 f0       	breq	.+2      	; 0xb28 <__LOCK_REGION_LENGTH__+0x728>
 b26:	59 cc       	rjmp	.-1870   	; 0x3da <main+0x1e>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
 b28:	84 b7       	in	r24, 0x34	; 52
 b2a:	87 7f       	andi	r24, 0xF7	; 247
 b2c:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
 b2e:	f8 e1       	ldi	r31, 0x18	; 24
 b30:	f1 bd       	out	0x21, r31	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
 b32:	2c e0       	ldi	r18, 0x0C	; 12
 b34:	21 bd       	out	0x21, r18	; 33
 b36:	c1 01       	movw	r24, r2
 b38:	01 97       	sbiw	r24, 0x01	; 1
 b3a:	f1 f7       	brne	.-4      	; 0xb38 <__LOCK_REGION_LENGTH__+0x738>
 b3c:	4e cc       	rjmp	.-1892   	; 0x3da <main+0x1e>

00000b3e <strtol>:
 b3e:	a0 e0       	ldi	r26, 0x00	; 0
 b40:	b0 e0       	ldi	r27, 0x00	; 0
 b42:	e4 ea       	ldi	r30, 0xA4	; 164
 b44:	f5 e0       	ldi	r31, 0x05	; 5
 b46:	78 c1       	rjmp	.+752    	; 0xe38 <__prologue_saves__+0x2>
 b48:	5c 01       	movw	r10, r24
 b4a:	6b 01       	movw	r12, r22
 b4c:	7a 01       	movw	r14, r20
 b4e:	61 15       	cp	r22, r1
 b50:	71 05       	cpc	r23, r1
 b52:	19 f0       	breq	.+6      	; 0xb5a <strtol+0x1c>
 b54:	fb 01       	movw	r30, r22
 b56:	91 83       	std	Z+1, r25	; 0x01
 b58:	80 83       	st	Z, r24
 b5a:	e1 14       	cp	r14, r1
 b5c:	f1 04       	cpc	r15, r1
 b5e:	29 f0       	breq	.+10     	; 0xb6a <strtol+0x2c>
 b60:	c7 01       	movw	r24, r14
 b62:	02 97       	sbiw	r24, 0x02	; 2
 b64:	83 97       	sbiw	r24, 0x23	; 35
 b66:	08 f0       	brcs	.+2      	; 0xb6a <strtol+0x2c>
 b68:	e2 c0       	rjmp	.+452    	; 0xd2e <strtol+0x1f0>
 b6a:	e5 01       	movw	r28, r10
 b6c:	21 96       	adiw	r28, 0x01	; 1
 b6e:	f5 01       	movw	r30, r10
 b70:	10 81       	ld	r17, Z
 b72:	81 2f       	mov	r24, r17
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	11 d1       	rcall	.+546    	; 0xd9a <isspace>
 b78:	89 2b       	or	r24, r25
 b7a:	11 f0       	breq	.+4      	; 0xb80 <strtol+0x42>
 b7c:	5e 01       	movw	r10, r28
 b7e:	f5 cf       	rjmp	.-22     	; 0xb6a <strtol+0x2c>
 b80:	1d 32       	cpi	r17, 0x2D	; 45
 b82:	29 f4       	brne	.+10     	; 0xb8e <strtol+0x50>
 b84:	21 96       	adiw	r28, 0x01	; 1
 b86:	f5 01       	movw	r30, r10
 b88:	11 81       	ldd	r17, Z+1	; 0x01
 b8a:	01 e0       	ldi	r16, 0x01	; 1
 b8c:	07 c0       	rjmp	.+14     	; 0xb9c <strtol+0x5e>
 b8e:	1b 32       	cpi	r17, 0x2B	; 43
 b90:	21 f4       	brne	.+8      	; 0xb9a <strtol+0x5c>
 b92:	e5 01       	movw	r28, r10
 b94:	22 96       	adiw	r28, 0x02	; 2
 b96:	f5 01       	movw	r30, r10
 b98:	11 81       	ldd	r17, Z+1	; 0x01
 b9a:	00 e0       	ldi	r16, 0x00	; 0
 b9c:	e1 14       	cp	r14, r1
 b9e:	f1 04       	cpc	r15, r1
 ba0:	09 f1       	breq	.+66     	; 0xbe4 <strtol+0xa6>
 ba2:	f0 e1       	ldi	r31, 0x10	; 16
 ba4:	ef 16       	cp	r14, r31
 ba6:	f1 04       	cpc	r15, r1
 ba8:	29 f4       	brne	.+10     	; 0xbb4 <strtol+0x76>
 baa:	3e c0       	rjmp	.+124    	; 0xc28 <strtol+0xea>
 bac:	10 e3       	ldi	r17, 0x30	; 48
 bae:	e1 14       	cp	r14, r1
 bb0:	f1 04       	cpc	r15, r1
 bb2:	21 f1       	breq	.+72     	; 0xbfc <strtol+0xbe>
 bb4:	28 e0       	ldi	r18, 0x08	; 8
 bb6:	e2 16       	cp	r14, r18
 bb8:	f1 04       	cpc	r15, r1
 bba:	01 f1       	breq	.+64     	; 0xbfc <strtol+0xbe>
 bbc:	54 f4       	brge	.+20     	; 0xbd2 <strtol+0x94>
 bbe:	e2 e0       	ldi	r30, 0x02	; 2
 bc0:	ee 16       	cp	r14, r30
 bc2:	f1 04       	cpc	r15, r1
 bc4:	21 f5       	brne	.+72     	; 0xc0e <strtol+0xd0>
 bc6:	81 2c       	mov	r8, r1
 bc8:	91 2c       	mov	r9, r1
 bca:	a1 2c       	mov	r10, r1
 bcc:	b0 e4       	ldi	r27, 0x40	; 64
 bce:	bb 2e       	mov	r11, r27
 bd0:	3d c0       	rjmp	.+122    	; 0xc4c <strtol+0x10e>
 bd2:	fa e0       	ldi	r31, 0x0A	; 10
 bd4:	ef 16       	cp	r14, r31
 bd6:	f1 04       	cpc	r15, r1
 bd8:	39 f0       	breq	.+14     	; 0xbe8 <strtol+0xaa>
 bda:	20 e1       	ldi	r18, 0x10	; 16
 bdc:	e2 16       	cp	r14, r18
 bde:	f1 04       	cpc	r15, r1
 be0:	b1 f4       	brne	.+44     	; 0xc0e <strtol+0xd0>
 be2:	2f c0       	rjmp	.+94     	; 0xc42 <strtol+0x104>
 be4:	10 33       	cpi	r17, 0x30	; 48
 be6:	11 f1       	breq	.+68     	; 0xc2c <strtol+0xee>
 be8:	fa e0       	ldi	r31, 0x0A	; 10
 bea:	ef 2e       	mov	r14, r31
 bec:	f1 2c       	mov	r15, r1
 bee:	ac ec       	ldi	r26, 0xCC	; 204
 bf0:	8a 2e       	mov	r8, r26
 bf2:	98 2c       	mov	r9, r8
 bf4:	a8 2c       	mov	r10, r8
 bf6:	ac e0       	ldi	r26, 0x0C	; 12
 bf8:	ba 2e       	mov	r11, r26
 bfa:	28 c0       	rjmp	.+80     	; 0xc4c <strtol+0x10e>
 bfc:	78 e0       	ldi	r23, 0x08	; 8
 bfe:	e7 2e       	mov	r14, r23
 c00:	f1 2c       	mov	r15, r1
 c02:	81 2c       	mov	r8, r1
 c04:	91 2c       	mov	r9, r1
 c06:	a1 2c       	mov	r10, r1
 c08:	e0 e1       	ldi	r30, 0x10	; 16
 c0a:	be 2e       	mov	r11, r30
 c0c:	1f c0       	rjmp	.+62     	; 0xc4c <strtol+0x10e>
 c0e:	60 e0       	ldi	r22, 0x00	; 0
 c10:	70 e0       	ldi	r23, 0x00	; 0
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	90 e8       	ldi	r25, 0x80	; 128
 c16:	97 01       	movw	r18, r14
 c18:	0f 2c       	mov	r0, r15
 c1a:	00 0c       	add	r0, r0
 c1c:	44 0b       	sbc	r20, r20
 c1e:	55 0b       	sbc	r21, r21
 c20:	de d0       	rcall	.+444    	; 0xdde <__udivmodsi4>
 c22:	49 01       	movw	r8, r18
 c24:	5a 01       	movw	r10, r20
 c26:	12 c0       	rjmp	.+36     	; 0xc4c <strtol+0x10e>
 c28:	10 33       	cpi	r17, 0x30	; 48
 c2a:	59 f4       	brne	.+22     	; 0xc42 <strtol+0x104>
 c2c:	88 81       	ld	r24, Y
 c2e:	8f 7d       	andi	r24, 0xDF	; 223
 c30:	88 35       	cpi	r24, 0x58	; 88
 c32:	09 f0       	breq	.+2      	; 0xc36 <strtol+0xf8>
 c34:	bb cf       	rjmp	.-138    	; 0xbac <strtol+0x6e>
 c36:	19 81       	ldd	r17, Y+1	; 0x01
 c38:	22 96       	adiw	r28, 0x02	; 2
 c3a:	02 60       	ori	r16, 0x02	; 2
 c3c:	80 e1       	ldi	r24, 0x10	; 16
 c3e:	e8 2e       	mov	r14, r24
 c40:	f1 2c       	mov	r15, r1
 c42:	81 2c       	mov	r8, r1
 c44:	91 2c       	mov	r9, r1
 c46:	a1 2c       	mov	r10, r1
 c48:	68 e0       	ldi	r22, 0x08	; 8
 c4a:	b6 2e       	mov	r11, r22
 c4c:	40 e0       	ldi	r20, 0x00	; 0
 c4e:	60 e0       	ldi	r22, 0x00	; 0
 c50:	70 e0       	ldi	r23, 0x00	; 0
 c52:	cb 01       	movw	r24, r22
 c54:	27 01       	movw	r4, r14
 c56:	0f 2c       	mov	r0, r15
 c58:	00 0c       	add	r0, r0
 c5a:	66 08       	sbc	r6, r6
 c5c:	77 08       	sbc	r7, r7
 c5e:	fe 01       	movw	r30, r28
 c60:	50 ed       	ldi	r21, 0xD0	; 208
 c62:	35 2e       	mov	r3, r21
 c64:	31 0e       	add	r3, r17
 c66:	29 e0       	ldi	r18, 0x09	; 9
 c68:	23 15       	cp	r18, r3
 c6a:	70 f4       	brcc	.+28     	; 0xc88 <strtol+0x14a>
 c6c:	2f eb       	ldi	r18, 0xBF	; 191
 c6e:	21 0f       	add	r18, r17
 c70:	2a 31       	cpi	r18, 0x1A	; 26
 c72:	18 f4       	brcc	.+6      	; 0xc7a <strtol+0x13c>
 c74:	39 ec       	ldi	r19, 0xC9	; 201
 c76:	33 2e       	mov	r3, r19
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <strtol+0x148>
 c7a:	2f e9       	ldi	r18, 0x9F	; 159
 c7c:	21 0f       	add	r18, r17
 c7e:	2a 31       	cpi	r18, 0x1A	; 26
 c80:	10 f5       	brcc	.+68     	; 0xcc6 <strtol+0x188>
 c82:	29 ea       	ldi	r18, 0xA9	; 169
 c84:	32 2e       	mov	r3, r18
 c86:	31 0e       	add	r3, r17
 c88:	23 2d       	mov	r18, r3
 c8a:	30 e0       	ldi	r19, 0x00	; 0
 c8c:	2e 15       	cp	r18, r14
 c8e:	3f 05       	cpc	r19, r15
 c90:	d4 f4       	brge	.+52     	; 0xcc6 <strtol+0x188>
 c92:	47 fd       	sbrc	r20, 7
 c94:	15 c0       	rjmp	.+42     	; 0xcc0 <strtol+0x182>
 c96:	86 16       	cp	r8, r22
 c98:	97 06       	cpc	r9, r23
 c9a:	a8 06       	cpc	r10, r24
 c9c:	b9 06       	cpc	r11, r25
 c9e:	68 f0       	brcs	.+26     	; 0xcba <strtol+0x17c>
 ca0:	a3 01       	movw	r20, r6
 ca2:	92 01       	movw	r18, r4
 ca4:	8d d0       	rcall	.+282    	; 0xdc0 <__mulsi3>
 ca6:	63 0d       	add	r22, r3
 ca8:	71 1d       	adc	r23, r1
 caa:	81 1d       	adc	r24, r1
 cac:	91 1d       	adc	r25, r1
 cae:	61 30       	cpi	r22, 0x01	; 1
 cb0:	71 05       	cpc	r23, r1
 cb2:	81 05       	cpc	r24, r1
 cb4:	20 e8       	ldi	r18, 0x80	; 128
 cb6:	92 07       	cpc	r25, r18
 cb8:	10 f0       	brcs	.+4      	; 0xcbe <strtol+0x180>
 cba:	4f ef       	ldi	r20, 0xFF	; 255
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <strtol+0x182>
 cbe:	41 e0       	ldi	r20, 0x01	; 1
 cc0:	21 96       	adiw	r28, 0x01	; 1
 cc2:	10 81       	ld	r17, Z
 cc4:	cc cf       	rjmp	.-104    	; 0xc5e <strtol+0x120>
 cc6:	20 2f       	mov	r18, r16
 cc8:	21 70       	andi	r18, 0x01	; 1
 cca:	c1 14       	cp	r12, r1
 ccc:	d1 04       	cpc	r13, r1
 cce:	71 f0       	breq	.+28     	; 0xcec <strtol+0x1ae>
 cd0:	44 23       	and	r20, r20
 cd2:	29 f0       	breq	.+10     	; 0xcde <strtol+0x1a0>
 cd4:	21 97       	sbiw	r28, 0x01	; 1
 cd6:	f6 01       	movw	r30, r12
 cd8:	d1 83       	std	Z+1, r29	; 0x01
 cda:	c0 83       	st	Z, r28
 cdc:	07 c0       	rjmp	.+14     	; 0xcec <strtol+0x1ae>
 cde:	01 ff       	sbrs	r16, 1
 ce0:	19 c0       	rjmp	.+50     	; 0xd14 <strtol+0x1d6>
 ce2:	22 97       	sbiw	r28, 0x02	; 2
 ce4:	f6 01       	movw	r30, r12
 ce6:	d1 83       	std	Z+1, r29	; 0x01
 ce8:	c0 83       	st	Z, r28
 cea:	14 c0       	rjmp	.+40     	; 0xd14 <strtol+0x1d6>
 cec:	47 ff       	sbrs	r20, 7
 cee:	12 c0       	rjmp	.+36     	; 0xd14 <strtol+0x1d6>
 cf0:	22 23       	and	r18, r18
 cf2:	29 f0       	breq	.+10     	; 0xcfe <strtol+0x1c0>
 cf4:	60 e0       	ldi	r22, 0x00	; 0
 cf6:	70 e0       	ldi	r23, 0x00	; 0
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	90 e8       	ldi	r25, 0x80	; 128
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <strtol+0x1c8>
 cfe:	6f ef       	ldi	r22, 0xFF	; 255
 d00:	7f ef       	ldi	r23, 0xFF	; 255
 d02:	8f ef       	ldi	r24, 0xFF	; 255
 d04:	9f e7       	ldi	r25, 0x7F	; 127
 d06:	22 e2       	ldi	r18, 0x22	; 34
 d08:	30 e0       	ldi	r19, 0x00	; 0
 d0a:	30 93 74 01 	sts	0x0174, r19	; 0x800174 <errno+0x1>
 d0e:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <errno>
 d12:	09 c0       	rjmp	.+18     	; 0xd26 <strtol+0x1e8>
 d14:	22 23       	and	r18, r18
 d16:	81 f0       	breq	.+32     	; 0xd38 <strtol+0x1fa>
 d18:	90 95       	com	r25
 d1a:	80 95       	com	r24
 d1c:	70 95       	com	r23
 d1e:	61 95       	neg	r22
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	46 2f       	mov	r20, r22
 d28:	37 2f       	mov	r19, r23
 d2a:	28 2f       	mov	r18, r24
 d2c:	12 c0       	rjmp	.+36     	; 0xd52 <strtol+0x214>
 d2e:	40 e0       	ldi	r20, 0x00	; 0
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	20 e0       	ldi	r18, 0x00	; 0
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	0d c0       	rjmp	.+26     	; 0xd52 <strtol+0x214>
 d38:	97 ff       	sbrs	r25, 7
 d3a:	f5 cf       	rjmp	.-22     	; 0xd26 <strtol+0x1e8>
 d3c:	82 e2       	ldi	r24, 0x22	; 34
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <errno+0x1>
 d44:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <errno>
 d48:	6f ef       	ldi	r22, 0xFF	; 255
 d4a:	7f ef       	ldi	r23, 0xFF	; 255
 d4c:	8f ef       	ldi	r24, 0xFF	; 255
 d4e:	9f e7       	ldi	r25, 0x7F	; 127
 d50:	ea cf       	rjmp	.-44     	; 0xd26 <strtol+0x1e8>
 d52:	64 2f       	mov	r22, r20
 d54:	73 2f       	mov	r23, r19
 d56:	82 2f       	mov	r24, r18
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62
 d5c:	e1 e1       	ldi	r30, 0x11	; 17
 d5e:	88 c0       	rjmp	.+272    	; 0xe70 <__epilogue_restores__+0x2>

00000d60 <atoi>:
 d60:	fc 01       	movw	r30, r24
 d62:	88 27       	eor	r24, r24
 d64:	99 27       	eor	r25, r25
 d66:	e8 94       	clt
 d68:	21 91       	ld	r18, Z+
 d6a:	20 32       	cpi	r18, 0x20	; 32
 d6c:	e9 f3       	breq	.-6      	; 0xd68 <atoi+0x8>
 d6e:	29 30       	cpi	r18, 0x09	; 9
 d70:	10 f0       	brcs	.+4      	; 0xd76 <atoi+0x16>
 d72:	2e 30       	cpi	r18, 0x0E	; 14
 d74:	c8 f3       	brcs	.-14     	; 0xd68 <atoi+0x8>
 d76:	2b 32       	cpi	r18, 0x2B	; 43
 d78:	39 f0       	breq	.+14     	; 0xd88 <atoi+0x28>
 d7a:	2d 32       	cpi	r18, 0x2D	; 45
 d7c:	31 f4       	brne	.+12     	; 0xd8a <atoi+0x2a>
 d7e:	68 94       	set
 d80:	03 c0       	rjmp	.+6      	; 0xd88 <atoi+0x28>
 d82:	13 d0       	rcall	.+38     	; 0xdaa <__mulhi_const_10>
 d84:	82 0f       	add	r24, r18
 d86:	91 1d       	adc	r25, r1
 d88:	21 91       	ld	r18, Z+
 d8a:	20 53       	subi	r18, 0x30	; 48
 d8c:	2a 30       	cpi	r18, 0x0A	; 10
 d8e:	c8 f3       	brcs	.-14     	; 0xd82 <atoi+0x22>
 d90:	1e f4       	brtc	.+6      	; 0xd98 <atoi+0x38>
 d92:	90 95       	com	r25
 d94:	81 95       	neg	r24
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	08 95       	ret

00000d9a <isspace>:
 d9a:	91 11       	cpse	r25, r1
 d9c:	0e c0       	rjmp	.+28     	; 0xdba <__ctype_isfalse>
 d9e:	80 32       	cpi	r24, 0x20	; 32
 da0:	19 f0       	breq	.+6      	; 0xda8 <isspace+0xe>
 da2:	89 50       	subi	r24, 0x09	; 9
 da4:	85 50       	subi	r24, 0x05	; 5
 da6:	d0 f7       	brcc	.-12     	; 0xd9c <isspace+0x2>
 da8:	08 95       	ret

00000daa <__mulhi_const_10>:
 daa:	7a e0       	ldi	r23, 0x0A	; 10
 dac:	97 9f       	mul	r25, r23
 dae:	90 2d       	mov	r25, r0
 db0:	87 9f       	mul	r24, r23
 db2:	80 2d       	mov	r24, r0
 db4:	91 0d       	add	r25, r1
 db6:	11 24       	eor	r1, r1
 db8:	08 95       	ret

00000dba <__ctype_isfalse>:
 dba:	99 27       	eor	r25, r25
 dbc:	88 27       	eor	r24, r24

00000dbe <__ctype_istrue>:
 dbe:	08 95       	ret

00000dc0 <__mulsi3>:
 dc0:	db 01       	movw	r26, r22
 dc2:	8f 93       	push	r24
 dc4:	9f 93       	push	r25
 dc6:	2d d0       	rcall	.+90     	; 0xe22 <__muluhisi3>
 dc8:	bf 91       	pop	r27
 dca:	af 91       	pop	r26
 dcc:	a2 9f       	mul	r26, r18
 dce:	80 0d       	add	r24, r0
 dd0:	91 1d       	adc	r25, r1
 dd2:	a3 9f       	mul	r26, r19
 dd4:	90 0d       	add	r25, r0
 dd6:	b2 9f       	mul	r27, r18
 dd8:	90 0d       	add	r25, r0
 dda:	11 24       	eor	r1, r1
 ddc:	08 95       	ret

00000dde <__udivmodsi4>:
 dde:	a1 e2       	ldi	r26, 0x21	; 33
 de0:	1a 2e       	mov	r1, r26
 de2:	aa 1b       	sub	r26, r26
 de4:	bb 1b       	sub	r27, r27
 de6:	fd 01       	movw	r30, r26
 de8:	0d c0       	rjmp	.+26     	; 0xe04 <__udivmodsi4_ep>

00000dea <__udivmodsi4_loop>:
 dea:	aa 1f       	adc	r26, r26
 dec:	bb 1f       	adc	r27, r27
 dee:	ee 1f       	adc	r30, r30
 df0:	ff 1f       	adc	r31, r31
 df2:	a2 17       	cp	r26, r18
 df4:	b3 07       	cpc	r27, r19
 df6:	e4 07       	cpc	r30, r20
 df8:	f5 07       	cpc	r31, r21
 dfa:	20 f0       	brcs	.+8      	; 0xe04 <__udivmodsi4_ep>
 dfc:	a2 1b       	sub	r26, r18
 dfe:	b3 0b       	sbc	r27, r19
 e00:	e4 0b       	sbc	r30, r20
 e02:	f5 0b       	sbc	r31, r21

00000e04 <__udivmodsi4_ep>:
 e04:	66 1f       	adc	r22, r22
 e06:	77 1f       	adc	r23, r23
 e08:	88 1f       	adc	r24, r24
 e0a:	99 1f       	adc	r25, r25
 e0c:	1a 94       	dec	r1
 e0e:	69 f7       	brne	.-38     	; 0xdea <__udivmodsi4_loop>
 e10:	60 95       	com	r22
 e12:	70 95       	com	r23
 e14:	80 95       	com	r24
 e16:	90 95       	com	r25
 e18:	9b 01       	movw	r18, r22
 e1a:	ac 01       	movw	r20, r24
 e1c:	bd 01       	movw	r22, r26
 e1e:	cf 01       	movw	r24, r30
 e20:	08 95       	ret

00000e22 <__muluhisi3>:
 e22:	40 d0       	rcall	.+128    	; 0xea4 <__umulhisi3>
 e24:	a5 9f       	mul	r26, r21
 e26:	90 0d       	add	r25, r0
 e28:	b4 9f       	mul	r27, r20
 e2a:	90 0d       	add	r25, r0
 e2c:	a4 9f       	mul	r26, r20
 e2e:	80 0d       	add	r24, r0
 e30:	91 1d       	adc	r25, r1
 e32:	11 24       	eor	r1, r1
 e34:	08 95       	ret

00000e36 <__prologue_saves__>:
 e36:	2f 92       	push	r2
 e38:	3f 92       	push	r3
 e3a:	4f 92       	push	r4
 e3c:	5f 92       	push	r5
 e3e:	6f 92       	push	r6
 e40:	7f 92       	push	r7
 e42:	8f 92       	push	r8
 e44:	9f 92       	push	r9
 e46:	af 92       	push	r10
 e48:	bf 92       	push	r11
 e4a:	cf 92       	push	r12
 e4c:	df 92       	push	r13
 e4e:	ef 92       	push	r14
 e50:	ff 92       	push	r15
 e52:	0f 93       	push	r16
 e54:	1f 93       	push	r17
 e56:	cf 93       	push	r28
 e58:	df 93       	push	r29
 e5a:	cd b7       	in	r28, 0x3d	; 61
 e5c:	de b7       	in	r29, 0x3e	; 62
 e5e:	ca 1b       	sub	r28, r26
 e60:	db 0b       	sbc	r29, r27
 e62:	0f b6       	in	r0, 0x3f	; 63
 e64:	f8 94       	cli
 e66:	de bf       	out	0x3e, r29	; 62
 e68:	0f be       	out	0x3f, r0	; 63
 e6a:	cd bf       	out	0x3d, r28	; 61
 e6c:	09 94       	ijmp

00000e6e <__epilogue_restores__>:
 e6e:	2a 88       	ldd	r2, Y+18	; 0x12
 e70:	39 88       	ldd	r3, Y+17	; 0x11
 e72:	48 88       	ldd	r4, Y+16	; 0x10
 e74:	5f 84       	ldd	r5, Y+15	; 0x0f
 e76:	6e 84       	ldd	r6, Y+14	; 0x0e
 e78:	7d 84       	ldd	r7, Y+13	; 0x0d
 e7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 e7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 e7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 e80:	b9 84       	ldd	r11, Y+9	; 0x09
 e82:	c8 84       	ldd	r12, Y+8	; 0x08
 e84:	df 80       	ldd	r13, Y+7	; 0x07
 e86:	ee 80       	ldd	r14, Y+6	; 0x06
 e88:	fd 80       	ldd	r15, Y+5	; 0x05
 e8a:	0c 81       	ldd	r16, Y+4	; 0x04
 e8c:	1b 81       	ldd	r17, Y+3	; 0x03
 e8e:	aa 81       	ldd	r26, Y+2	; 0x02
 e90:	b9 81       	ldd	r27, Y+1	; 0x01
 e92:	ce 0f       	add	r28, r30
 e94:	d1 1d       	adc	r29, r1
 e96:	0f b6       	in	r0, 0x3f	; 63
 e98:	f8 94       	cli
 e9a:	de bf       	out	0x3e, r29	; 62
 e9c:	0f be       	out	0x3f, r0	; 63
 e9e:	cd bf       	out	0x3d, r28	; 61
 ea0:	ed 01       	movw	r28, r26
 ea2:	08 95       	ret

00000ea4 <__umulhisi3>:
 ea4:	a2 9f       	mul	r26, r18
 ea6:	b0 01       	movw	r22, r0
 ea8:	b3 9f       	mul	r27, r19
 eaa:	c0 01       	movw	r24, r0
 eac:	a3 9f       	mul	r26, r19
 eae:	01 d0       	rcall	.+2      	; 0xeb2 <__umulhisi3+0xe>
 eb0:	b2 9f       	mul	r27, r18
 eb2:	70 0d       	add	r23, r0
 eb4:	81 1d       	adc	r24, r1
 eb6:	11 24       	eor	r1, r1
 eb8:	91 1d       	adc	r25, r1
 eba:	08 95       	ret

00000ebc <_exit>:
 ebc:	f8 94       	cli

00000ebe <__stop_program>:
 ebe:	ff cf       	rjmp	.-2      	; 0xebe <__stop_program>
