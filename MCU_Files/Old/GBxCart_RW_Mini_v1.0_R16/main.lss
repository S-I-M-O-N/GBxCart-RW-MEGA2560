
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d9a  00000e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000112  00800062  00800062  00000e30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d3f  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  00002c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf2  00000000  00000000  000032ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00003edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a9  00000000  00000000  0000452c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000057d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e9       	ldi	r30, 0x9A	; 154
  36:	fd e0       	ldi	r31, 0x0D	; 13
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a4 37       	cpi	r26, 0x74	; 116
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	7b d1       	rcall	.+758    	; 0x34c <main>
  56:	9f c6       	rjmp	.+3390   	; 0xd96 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Receive>:

uint8_t cartMode = GB_MODE;

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  5a:	5f 9b       	sbis	0x0b, 7	; 11
  5c:	fe cf       	rjmp	.-4      	; 0x5a <USART_Receive>
	return UDR; // Get and return received data from buffer
  5e:	8c b1       	in	r24, 0x0c	; 12
}
  60:	08 95       	ret

00000062 <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  62:	5d 9b       	sbis	0x0b, 5	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	UDR = data;
  66:	8c b9       	out	0x0c, r24	; 12
  68:	08 95       	ret

0000006a <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
  6a:	0f 93       	push	r16
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
  74:	c0 e7       	ldi	r28, 0x70	; 112
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	ce 01       	movw	r24, r28
  7a:	80 57       	subi	r24, 0x70	; 112
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	80 17       	cp	r24, r16
  80:	91 07       	cpc	r25, r17
  82:	1c f4       	brge	.+6      	; 0x8a <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
  84:	ea df       	rcall	.-44     	; 0x5a <USART_Receive>
  86:	89 93       	st	Y+, r24
  88:	f7 cf       	rjmp	.-18     	; 0x78 <usart_read_bytes+0xe>
	}
}
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	1f 91       	pop	r17
  90:	0f 91       	pop	r16
  92:	08 95       	ret

00000094 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	c0 e7       	ldi	r28, 0x70	; 112
  9a:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
  9c:	de df       	rcall	.-68     	; 0x5a <USART_Receive>
  9e:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
  a0:	81 11       	cpse	r24, r1
  a2:	fc cf       	rjmp	.-8      	; 0x9c <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
  aa:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
  ac:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
  ae:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
  b0:	96 9a       	sbi	0x12, 6	; 18
  b2:	08 95       	ret

000000b4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
  b4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
  b6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
  b8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
  ba:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret

000000c4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
  c4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	08 95       	ret

000000ca <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
  ca:	fc df       	rcall	.-8      	; 0xc4 <set_16bit_address>
	
	cs_mreqPin_low;
  cc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
  ce:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (At 8MHz - minimum needed is 1 nops, 2 nops for GB camera)
  d0:	00 00       	nop
	asm volatile("nop");
  d2:	00 00       	nop
	asm volatile("nop");
  d4:	00 00       	nop
	asm volatile("nop");
  d6:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
  d8:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
  da:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
  dc:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
  de:	08 95       	ret

000000e0 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	d6 2f       	mov	r29, r22
  e6:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
  e8:	ed df       	rcall	.-38     	; 0xc4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
  ee:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
  f0:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
  f2:	c1 30       	cpi	r28, 0x01	; 1
  f4:	09 f4       	brne	.+2      	; 0xf8 <write_8bit_data+0x18>
		cs_mreqPin_low;
  f6:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
  f8:	00 00       	nop
	asm volatile("nop");
  fa:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
  fc:	c1 30       	cpi	r28, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <write_8bit_data+0x22>
		cs_mreqPin_high;
 100:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
 102:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 104:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 106:	14 ba       	out	0x14, r1	; 20
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
 10e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 110:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
 112:	d8 df       	rcall	.-80     	; 0xc4 <set_16bit_address>
	
	rdPin_low;
 114:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
 116:	00 00       	nop
	asm volatile("nop");
 118:	00 00       	nop
	asm volatile("nop");
 11a:	00 00       	nop
	asm volatile("nop");
 11c:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
 11e:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
 120:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
 122:	08 95       	ret

00000124 <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 124:	cf 93       	push	r28
 126:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 12c:	cb df       	rcall	.-106    	; 0xc4 <set_16bit_address>
	PORT_DATA7_0 = data;
 12e:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
 130:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <flashWriteWePin>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	49 f4       	brne	.+18     	; 0x14a <gb_flash_write_bus_cycle+0x26>
		audioPin_low; // WE low
 138:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
 13a:	00 00       	nop
		asm volatile("nop");
 13c:	00 00       	nop
		asm volatile("nop");
 13e:	00 00       	nop
		asm volatile("nop");
 140:	00 00       	nop
		asm volatile("nop");
 142:	00 00       	nop
		asm volatile("nop");
 144:	00 00       	nop
		audioPin_high; // WE high
 146:	39 9a       	sbi	0x07, 1	; 7
 148:	08 c0       	rjmp	.+16     	; 0x15a <gb_flash_write_bus_cycle+0x36>
	}
	else { // WR pin
		wrPin_low; // WE low
 14a:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
 14c:	00 00       	nop
		asm volatile("nop");
 14e:	00 00       	nop
		asm volatile("nop");
 150:	00 00       	nop
		asm volatile("nop");
 152:	00 00       	nop
		asm volatile("nop");
 154:	00 00       	nop
		asm volatile("nop");
 156:	00 00       	nop
		wrPin_high; // WE high
 158:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 15a:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 15c:	14 ba       	out	0x14, r1	; 20
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 16c:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 170:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 174:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 178:	d5 df       	rcall	.-86     	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 17a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 17e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 182:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 186:	ce df       	rcall	.-100    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 188:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 18c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 190:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 194:	c7 df       	rcall	.-114    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
 196:	61 2f       	mov	r22, r17
 198:	ce 01       	movw	r24, r28
 19a:	c4 df       	rcall	.-120    	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <gb_flash_write_byte+0x3c>
 1a2:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 1a4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 1a6:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 1a8:	ce 01       	movw	r24, r28
 1aa:	b1 df       	rcall	.-158    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 1ac:	81 17       	cp	r24, r17
 1ae:	39 f0       	breq	.+14     	; 0x1be <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
 1b0:	ce 01       	movw	r24, r28
 1b2:	ad df       	rcall	.-166    	; 0x10e <gb_flash_read_byte>
 1b4:	9a e1       	ldi	r25, 0x1A	; 26
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <gb_flash_write_byte+0x54>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <gb_flash_write_byte+0x5a>
 1bc:	f7 cf       	rjmp	.-18     	; 0x1ac <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	08 95       	ret

000001c6 <gb_flash_write_byte_special>:

// Set the bank, write a single byte to the Flash address and pulse the reset pin
void gb_flash_write_byte_special(uint16_t address, uint8_t data) {
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
 1ce:	16 2f       	mov	r17, r22
	// Set bank back
	if (flashBank1CommandWrites == 1) {
 1d0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	61 f4       	brne	.+24     	; 0x1f0 <gb_flash_write_byte_special+0x2a>
		write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	91 e2       	ldi	r25, 0x21	; 33
 1e2:	7e df       	rcall	.-260    	; 0xe0 <write_8bit_data>
 1e4:	87 ec       	ldi	r24, 0xC7	; 199
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <gb_flash_write_byte_special+0x22>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <gb_flash_write_byte_special+0x28>
 1ee:	00 00       	nop
		_delay_us(50);
	}
	
	// Write
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1f0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 1f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 1f8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 1fc:	93 df       	rcall	.-218    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 1fe:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 202:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 206:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 20a:	8c df       	rcall	.-232    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 20c:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 210:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 214:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 218:	85 df       	rcall	.-246    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
 21a:	61 2f       	mov	r22, r17
 21c:	ce 01       	movw	r24, r28
 21e:	82 df       	rcall	.-252    	; 0x124 <gb_flash_write_bus_cycle>
 220:	87 ee       	ldi	r24, 0xE7	; 231
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <gb_flash_write_byte_special+0x5e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <gb_flash_write_byte_special+0x64>
 22a:	00 00       	nop
	_delay_us(250); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 22c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 22e:	14 ba       	out	0x14, r1	; 20
	
	// Pulse reset
	PORTE &= ~(1<<CS2_PIN);
 230:	3a 98       	cbi	0x07, 2	; 7
 232:	87 ec       	ldi	r24, 0xC7	; 199
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <gb_flash_write_byte_special+0x70>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <gb_flash_write_byte_special+0x76>
 23c:	00 00       	nop
	_delay_us(50);
	PORTE |= (1<<CS2_PIN);
 23e:	3a 9a       	sbi	0x07, 2	; 7
 240:	87 ec       	ldi	r24, 0xC7	; 199
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <gb_flash_write_byte_special+0x7e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <gb_flash_write_byte_special+0x84>
 24a:	00 00       	nop
	_delay_us(50);
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	08 95       	ret

00000254 <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
 262:	ff 24       	eor	r15, r15
 264:	fa 94       	dec	r15
 266:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 268:	01 e2       	ldi	r16, 0x21	; 33
 26a:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 26c:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 272:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 274:	00 00       	nop
	asm volatile("nop");
 276:	00 00       	nop
	wrPin_high;
 278:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 27a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 27e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 282:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 286:	4e df       	rcall	.-356    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 288:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 28c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 290:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 294:	47 df       	rcall	.-370    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 296:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 29a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 29e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 2a2:	40 df       	rcall	.-384    	; 0x124 <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
 2a4:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 2a6:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 2a8:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
 2aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2ae:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 2b0:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 2b2:	00 00       	nop
	asm volatile("nop");
 2b4:	00 00       	nop
	wrPin_high;
 2b6:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
 2b8:	61 2f       	mov	r22, r17
 2ba:	ce 01       	movw	r24, r28
 2bc:	33 df       	rcall	.-410    	; 0x124 <gb_flash_write_bus_cycle>
 2be:	85 e3       	ldi	r24, 0x35	; 53
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <__stack+0x61>
 2c4:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 2c6:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 2c8:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 2ca:	ce 01       	movw	r24, r28
 2cc:	20 df       	rcall	.-448    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 2ce:	81 17       	cp	r24, r17
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <__stack+0x81>
		dataVerify = gb_flash_read_byte(address);
 2d2:	ce 01       	movw	r24, r28
 2d4:	1c df       	rcall	.-456    	; 0x10e <gb_flash_read_byte>
 2d6:	9a e1       	ldi	r25, 0x1A	; 26
 2d8:	9a 95       	dec	r25
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <__stack+0x79>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <__stack+0x7f>
 2de:	f7 cf       	rjmp	.-18     	; 0x2ce <__stack+0x6f>
		_delay_us(5);
	}
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	08 95       	ret

000002ec <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
 2ec:	84 b7       	in	r24, 0x34	; 52
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
 2f2:	88 e1       	ldi	r24, 0x18	; 24
 2f4:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
 2f6:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
 2f8:	d8 de       	rcall	.-592    	; 0xaa <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN);
 2fa:	81 b3       	in	r24, 0x11	; 17
 2fc:	88 67       	ori	r24, 0x78	; 120
 2fe:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN);
 300:	32 9a       	sbi	0x06, 2	; 6
	
	// Pull ups
	PORTE |= (1<<PE0);
 302:	38 9a       	sbi	0x07, 0	; 7
	PORTD |= (1<<PD7) | (1<<PD2);
 304:	82 b3       	in	r24, 0x12	; 18
 306:	84 68       	ori	r24, 0x84	; 132
 308:	82 bb       	out	0x12, r24	; 18
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
 30a:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 30c:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
 30e:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
 310:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
 312:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
 314:	1a ba       	out	0x1a, r1	; 26
	
	// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
	cs2Pin_low;
 316:	3a 98       	cbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	80 e7       	ldi	r24, 0x70	; 112
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <setup+0x32>
 326:	00 c0       	rjmp	.+0      	; 0x328 <setup+0x3c>
 328:	00 00       	nop
	_delay_ms(50);
	cs2Pin_high;
 32a:	3a 9a       	sbi	0x07, 2	; 7
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
 32c:	93 9a       	sbi	0x12, 3	; 18
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	89 e6       	ldi	r24, 0x69	; 105
 332:	98 e1       	ldi	r25, 0x18	; 24
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <setup+0x48>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <setup+0x52>
 33e:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
 340:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
 342:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRB, TXEN); // Transmitter enable
 344:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
 346:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
 348:	78 94       	sei
 34a:	08 95       	ret

0000034c <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
 34c:	cf df       	rcall	.-98     	; 0x2ec <setup>
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
 34e:	77 24       	eor	r7, r7
 350:	73 94       	inc	r7


int main(void) {
	setup();
	
	uint32_t address = 0;
 352:	c1 2c       	mov	r12, r1
 354:	d1 2c       	mov	r13, r1
 356:	76 01       	movw	r14, r12
			if (resetValue == RESET_VALUE) {
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
 358:	88 e1       	ldi	r24, 0x18	; 24
 35a:	38 2e       	mov	r3, r24
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
 35c:	9c e0       	ldi	r25, 0x0C	; 12
 35e:	29 2e       	mov	r2, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 360:	44 24       	eor	r4, r4
 362:	4a 94       	dec	r4
 364:	54 2c       	mov	r5, r4
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
			char commonChar = USART_Receive();
			if (commonChar == '1') {
				resetCommonLines = 1;
 366:	66 24       	eor	r6, r6
 368:	63 94       	inc	r6
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	72 12       	cpse	r7, r18
 36e:	01 c0       	rjmp	.+2      	; 0x372 <main+0x26>
			rd_wr_csmreq_cs2_reset();
 370:	9c de       	rcall	.-712    	; 0xaa <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
 372:	73 de       	rcall	.-794    	; 0x5a <USART_Receive>
 374:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
 378:	83 34       	cpi	r24, 0x43	; 67
 37a:	19 f4       	brne	.+6      	; 0x382 <main+0x36>
			USART_Transmit(cartMode);
 37c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 380:	2f c3       	rjmp	.+1630   	; 0x9e0 <__LOCK_REGION_LENGTH__+0x5e0>
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
 382:	87 34       	cpi	r24, 0x47	; 71
 384:	11 f4       	brne	.+4      	; 0x38a <main+0x3e>
			gb_mode();
 386:	96 de       	rcall	.-724    	; 0xb4 <gb_mode>
 388:	f0 cf       	rjmp	.-32     	; 0x36a <main+0x1e>
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
 38a:	81 34       	cpi	r24, 0x41	; 65
 38c:	59 f4       	brne	.+22     	; 0x3a4 <main+0x58>
			usart_read_chars(); // Read start address
 38e:	82 de       	rcall	.-764    	; 0x94 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 390:	40 e1       	ldi	r20, 0x10	; 16
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	80 e7       	ldi	r24, 0x70	; 112
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	3d d3       	rcall	.+1658   	; 0xa18 <strtol>
 39e:	6b 01       	movw	r12, r22
 3a0:	7c 01       	movw	r14, r24
 3a2:	e3 cf       	rjmp	.-58     	; 0x36a <main+0x1e>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
 3a4:	82 35       	cpi	r24, 0x52	; 82
 3a6:	e1 f4       	brne	.+56     	; 0x3e0 <main+0x94>
			gb_mode();
 3a8:	85 de       	rcall	.-758    	; 0xb4 <gb_mode>
			receivedChar = '1';
 3aa:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 3ac:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
 3b0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
 3b4:	81 33       	cpi	r24, 0x31	; 49
 3b6:	c9 f6       	brne	.-78     	; 0x36a <main+0x1e>
				PORTD |= (1<<ACTIVITY_LED);
 3b8:	93 9a       	sbi	0x12, 3	; 18
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	d0 e0       	ldi	r29, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
 3be:	ce 01       	movw	r24, r28
 3c0:	8c 0d       	add	r24, r12
 3c2:	9d 1d       	adc	r25, r13
 3c4:	82 de       	rcall	.-764    	; 0xca <read_8bit_data>
 3c6:	4d de       	rcall	.-870    	; 0x62 <USART_Transmit>
 3c8:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 3ca:	c0 34       	cpi	r28, 0x40	; 64
 3cc:	d1 05       	cpc	r29, r1
 3ce:	b9 f7       	brne	.-18     	; 0x3be <main+0x72>
 3d0:	80 e4       	ldi	r24, 0x40	; 64
 3d2:	c8 0e       	add	r12, r24
 3d4:	d1 1c       	adc	r13, r1
 3d6:	e1 1c       	adc	r14, r1
 3d8:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 3da:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 3dc:	3e de       	rcall	.-900    	; 0x5a <USART_Receive>
 3de:	e6 cf       	rjmp	.-52     	; 0x3ac <main+0x60>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
 3e0:	87 35       	cpi	r24, 0x57	; 87
 3e2:	d1 f4       	brne	.+52     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			gb_mode();
 3e4:	67 de       	rcall	.-818    	; 0xb4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
 3e6:	80 e4       	ldi	r24, 0x40	; 64
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	3f de       	rcall	.-898    	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 3ec:	93 9a       	sbi	0x12, 3	; 18
 3ee:	c0 e7       	ldi	r28, 0x70	; 112
 3f0:	d0 e0       	ldi	r29, 0x00	; 0
 3f2:	00 e0       	ldi	r16, 0x00	; 0
 3f4:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 3f6:	69 91       	ld	r22, Y+
 3f8:	c8 01       	movw	r24, r16
 3fa:	8c 0d       	add	r24, r12
 3fc:	9d 1d       	adc	r25, r13
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	6f de       	rcall	.-802    	; 0xe0 <write_8bit_data>
 402:	0f 5f       	subi	r16, 0xFF	; 255
 404:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 406:	00 34       	cpi	r16, 0x40	; 64
 408:	11 05       	cpc	r17, r1
 40a:	a9 f7       	brne	.-22     	; 0x3f6 <main+0xaa>
 40c:	90 e4       	ldi	r25, 0x40	; 64
 40e:	c9 0e       	add	r12, r25
 410:	d1 1c       	adc	r13, r1
 412:	e1 1c       	adc	r14, r1
 414:	f1 1c       	adc	r15, r1
 416:	68 c0       	rjmp	.+208    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
 418:	82 34       	cpi	r24, 0x42	; 66
 41a:	e1 f4       	brne	.+56     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			gb_mode();
 41c:	4b de       	rcall	.-874    	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read start address
 41e:	3a de       	rcall	.-908    	; 0x94 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 420:	40 e1       	ldi	r20, 0x10	; 16
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	80 e7       	ldi	r24, 0x70	; 112
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	f5 d2       	rcall	.+1514   	; 0xa18 <strtol>
 42e:	4b 01       	movw	r8, r22
 430:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
 432:	13 de       	rcall	.-986    	; 0x5a <USART_Receive>
 434:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
			if (receivedChar == 'B') {
 438:	82 34       	cpi	r24, 0x42	; 66
 43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	96 cf       	rjmp	.-212    	; 0x36a <main+0x1e>
				usart_read_chars(); // Read data
 43e:	2a de       	rcall	.-940    	; 0x94 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 440:	80 e7       	ldi	r24, 0x70	; 112
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fa d3       	rcall	.+2036   	; 0xc3a <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
 446:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	68 2f       	mov	r22, r24
 44e:	c4 01       	movw	r24, r8
 450:	47 de       	rcall	.-882    	; 0xe0 <write_8bit_data>
 452:	8b cf       	rjmp	.-234    	; 0x36a <main+0x1e>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
 454:	80 35       	cpi	r24, 0x50	; 80
 456:	49 f4       	brne	.+18     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			flashWriteWePin = USART_Receive();
 458:	00 de       	rcall	.-1024   	; 0x5a <USART_Receive>
 45a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
 45e:	81 34       	cpi	r24, 0x41	; 65
 460:	09 f0       	breq	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	83 cf       	rjmp	.-250    	; 0x36a <main+0x1e>
				DDRE |= (1<<AUDIO_PIN);
 464:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
 466:	39 9a       	sbi	0x07, 1	; 7
 468:	80 cf       	rjmp	.-256    	; 0x36a <main+0x1e>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
 46a:	8e 34       	cpi	r24, 0x4E	; 78
 46c:	19 f4       	brne	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			flashBank1CommandWrites = 1;
 46e:	60 92 63 00 	sts	0x0063, r6	; 0x800063 <flashBank1CommandWrites>
 472:	7b cf       	rjmp	.-266    	; 0x36a <main+0x1e>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
 474:	85 34       	cpi	r24, 0x45	; 69
 476:	09 f5       	brne	.+66     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 478:	c4 e6       	ldi	r28, 0x64	; 100
 47a:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
 47c:	0b de       	rcall	.-1002   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
 47e:	40 e1       	ldi	r20, 0x10	; 16
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	80 e7       	ldi	r24, 0x70	; 112
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	c6 d2       	rcall	.+1420   	; 0xa18 <strtol>
 48c:	79 83       	std	Y+1, r23	; 0x01
 48e:	68 83       	st	Y, r22
				USART_Transmit(SEND_ACK);
 490:	81 e3       	ldi	r24, 0x31	; 49
 492:	e7 dd       	rcall	.-1074   	; 0x62 <USART_Transmit>
				
				usart_read_chars(); // Data
 494:	ff dd       	rcall	.-1026   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
 496:	40 e1       	ldi	r20, 0x10	; 16
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e7       	ldi	r24, 0x70	; 112
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	ba d2       	rcall	.+1396   	; 0xa18 <strtol>
 4a4:	7b 83       	std	Y+3, r23	; 0x03
 4a6:	6a 83       	std	Y+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
 4a8:	81 e3       	ldi	r24, 0x31	; 49
 4aa:	db dd       	rcall	.-1098   	; 0x62 <USART_Transmit>
 4ac:	24 96       	adiw	r28, 0x04	; 4
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
 4ae:	e0 e7       	ldi	r30, 0x70	; 112
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	ec 17       	cp	r30, r28
 4b4:	fd 07       	cpc	r31, r29
 4b6:	11 f7       	brne	.-60     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 4b8:	58 cf       	rjmp	.-336    	; 0x36a <main+0x1e>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 4ba:	86 34       	cpi	r24, 0x46	; 70
 4bc:	c1 f4       	brne	.+48     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
			usart_read_chars(); // Read address
 4be:	ea dd       	rcall	.-1068   	; 0x94 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
 4c0:	40 e1       	ldi	r20, 0x10	; 16
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	80 e7       	ldi	r24, 0x70	; 112
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	a5 d2       	rcall	.+1354   	; 0xa18 <strtol>
 4ce:	4b 01       	movw	r8, r22
 4d0:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
 4d2:	e0 dd       	rcall	.-1088   	; 0x94 <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
 4d4:	40 e1       	ldi	r20, 0x10	; 16
 4d6:	50 e0       	ldi	r21, 0x00	; 0
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	80 e7       	ldi	r24, 0x70	; 112
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9b d2       	rcall	.+1334   	; 0xa18 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 4e2:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
 4e4:	c4 01       	movw	r24, r8
 4e6:	1e de       	rcall	.-964    	; 0x124 <gb_flash_write_bus_cycle>
			PORTD &= ~(1<<ACTIVITY_LED);
 4e8:	93 98       	cbi	0x12, 3	; 18
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 4ea:	81 e3       	ldi	r24, 0x31	; 49
 4ec:	79 c2       	rjmp	.+1266   	; 0x9e0 <__LOCK_REGION_LENGTH__+0x5e0>
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 4ee:	84 35       	cpi	r24, 0x54	; 84
 4f0:	81 f5       	brne	.+96     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
			usart_read_bytes(64);
 4f2:	80 e4       	ldi	r24, 0x40	; 64
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	b9 dd       	rcall	.-1166   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 4f8:	93 9a       	sbi	0x12, 3	; 18
			if (flashBank1CommandWrites == 0) {
 4fa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
 4fe:	c0 e7       	ldi	r28, 0x70	; 112
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	00 e0       	ldi	r16, 0x00	; 0
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	81 11       	cpse	r24, r1
 508:	12 c0       	rjmp	.+36     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
 50a:	69 91       	ld	r22, Y+
 50c:	6f 3f       	cpi	r22, 0xFF	; 255
 50e:	21 f0       	breq	.+8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
						gb_flash_write_byte(address, receivedBuffer[x]);
 510:	c8 01       	movw	r24, r16
 512:	8c 0d       	add	r24, r12
 514:	9d 1d       	adc	r25, r13
 516:	25 de       	rcall	.-950    	; 0x162 <gb_flash_write_byte>
 518:	0f 5f       	subi	r16, 0xFF	; 255
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
 51c:	00 34       	cpi	r16, 0x40	; 64
 51e:	11 05       	cpc	r17, r1
 520:	a1 f7       	brne	.-24     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 522:	f0 e4       	ldi	r31, 0x40	; 64
 524:	cf 0e       	add	r12, r31
 526:	d1 1c       	adc	r13, r1
 528:	e1 1c       	adc	r14, r1
 52a:	f1 1c       	adc	r15, r1
 52c:	7d c1       	rjmp	.+762    	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
 52e:	69 91       	ld	r22, Y+
 530:	6f 3f       	cpi	r22, 0xFF	; 255
 532:	21 f0       	breq	.+8      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
 534:	c8 01       	movw	r24, r16
 536:	8c 0d       	add	r24, r12
 538:	9d 1d       	adc	r25, r13
 53a:	8c de       	rcall	.-744    	; 0x254 <gb_flash_write_byte_bank1_commands>
 53c:	0f 5f       	subi	r16, 0xFF	; 255
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
					}
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
 540:	00 34       	cpi	r16, 0x40	; 64
 542:	11 05       	cpc	r17, r1
 544:	a1 f7       	brne	.-24     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 546:	20 e4       	ldi	r18, 0x40	; 64
 548:	c2 0e       	add	r12, r18
 54a:	d1 1c       	adc	r13, r1
 54c:	e1 1c       	adc	r14, r1
 54e:	f1 1c       	adc	r15, r1
 550:	6b c1       	rjmp	.+726    	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
 552:	89 35       	cpi	r24, 0x59	; 89
 554:	09 f0       	breq	.+2      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 556:	4f c0       	rjmp	.+158    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			usart_read_bytes(32);
 558:	80 e2       	ldi	r24, 0x20	; 32
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	86 dd       	rcall	.-1268   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 55e:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
 560:	6a ea       	ldi	r22, 0xAA	; 170
 562:	8a ea       	ldi	r24, 0xAA	; 170
 564:	9a e0       	ldi	r25, 0x0A	; 10
 566:	de dd       	rcall	.-1092   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
 568:	65 e5       	ldi	r22, 0x55	; 85
 56a:	85 e5       	ldi	r24, 0x55	; 85
 56c:	95 e0       	ldi	r25, 0x05	; 5
 56e:	da dd       	rcall	.-1100   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
 570:	56 01       	movw	r10, r12
 572:	65 e2       	ldi	r22, 0x25	; 37
 574:	c6 01       	movw	r24, r12
 576:	d6 dd       	rcall	.-1108   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
 578:	6f e1       	ldi	r22, 0x1F	; 31
 57a:	c6 01       	movw	r24, r12
 57c:	d3 dd       	rcall	.-1114   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57e:	85 e0       	ldi	r24, 0x05	; 5
 580:	8a 95       	dec	r24
 582:	f1 f7       	brne	.-4      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 584:	00 00       	nop
 586:	00 e7       	ldi	r16, 0x70	; 112
 588:	10 e0       	ldi	r17, 0x00	; 0
 58a:	c0 e0       	ldi	r28, 0x00	; 0
 58c:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 58e:	f8 01       	movw	r30, r16
 590:	61 91       	ld	r22, Z+
 592:	8f 01       	movw	r16, r30
 594:	ce 01       	movw	r24, r28
 596:	8a 0d       	add	r24, r10
 598:	9b 1d       	adc	r25, r11
 59a:	c4 dd       	rcall	.-1144   	; 0x124 <gb_flash_write_bus_cycle>
 59c:	21 96       	adiw	r28, 0x01	; 1
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
 59e:	c0 32       	cpi	r28, 0x20	; 32
 5a0:	d1 05       	cpc	r29, r1
 5a2:	a9 f7       	brne	.-22     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 5a4:	f0 e2       	ldi	r31, 0x20	; 32
 5a6:	cf 0e       	add	r12, r31
 5a8:	d1 1c       	adc	r13, r1
 5aa:	e1 1c       	adc	r14, r1
 5ac:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
 5ae:	c6 01       	movw	r24, r12
 5b0:	80 97       	sbiw	r24, 0x20	; 32
 5b2:	69 e2       	ldi	r22, 0x29	; 41
 5b4:	b7 dd       	rcall	.-1170   	; 0x124 <gb_flash_write_bus_cycle>
 5b6:	8f e1       	ldi	r24, 0x1F	; 31
 5b8:	93 e0       	ldi	r25, 0x03	; 3
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5c0:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 5c2:	e6 01       	movw	r28, r12
 5c4:	21 97       	sbiw	r28, 0x01	; 1
 5c6:	ce 01       	movw	r24, r28
 5c8:	a2 dd       	rcall	.-1212   	; 0x10e <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
 5ca:	18 ec       	ldi	r17, 0xC8	; 200
 5cc:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <receivedBuffer+0x1f>
 5d0:	89 17       	cp	r24, r25
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d4:	29 c1       	rjmp	.+594    	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
				dataVerify = gb_flash_read_byte(address-1);
 5d6:	ce 01       	movw	r24, r28
 5d8:	9a dd       	rcall	.-1228   	; 0x10e <gb_flash_read_byte>
 5da:	9a e1       	ldi	r25, 0x1A	; 26
 5dc:	9a 95       	dec	r25
 5de:	f1 f7       	brne	.-4      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5e2:	11 50       	subi	r17, 0x01	; 1
				_delay_us(5);
				verifyCount++;
				if (verifyCount >= 200) {
 5e4:	99 f7       	brne	.-26     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e6:	ef ef       	ldi	r30, 0xFF	; 255
 5e8:	f9 e6       	ldi	r31, 0x69	; 105
 5ea:	28 e1       	ldi	r18, 0x18	; 24
 5ec:	e1 50       	subi	r30, 0x01	; 1
 5ee:	f0 40       	sbci	r31, 0x00	; 0
 5f0:	20 40       	sbci	r18, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5f4:	17 c1       	rjmp	.+558    	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
 5f6:	8a 34       	cpi	r24, 0x4A	; 74
 5f8:	d1 f4       	brne	.+52     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
			usart_read_bytes(64);
 5fa:	80 e4       	ldi	r24, 0x40	; 64
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	35 dd       	rcall	.-1430   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 600:	93 9a       	sbi	0x12, 3	; 18
 602:	c0 e7       	ldi	r28, 0x70	; 112
 604:	d0 e0       	ldi	r29, 0x00	; 0
 606:	00 e0       	ldi	r16, 0x00	; 0
 608:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
 60a:	69 91       	ld	r22, Y+
 60c:	6f 3f       	cpi	r22, 0xFF	; 255
 60e:	21 f0       	breq	.+8      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
 610:	c8 01       	movw	r24, r16
 612:	8c 0d       	add	r24, r12
 614:	9d 1d       	adc	r25, r13
 616:	d7 dd       	rcall	.-1106   	; 0x1c6 <gb_flash_write_byte_special>
 618:	0f 5f       	subi	r16, 0xFF	; 255
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 61c:	00 34       	cpi	r16, 0x40	; 64
 61e:	11 05       	cpc	r17, r1
 620:	a1 f7       	brne	.-24     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 622:	80 e4       	ldi	r24, 0x40	; 64
 624:	c8 0e       	add	r12, r24
 626:	d1 1c       	adc	r13, r1
 628:	e1 1c       	adc	r14, r1
 62a:	f1 1c       	adc	r15, r1
 62c:	fd c0       	rjmp	.+506    	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
 62e:	88 35       	cpi	r24, 0x58	; 88
 630:	09 f0       	breq	.+2      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 632:	41 c0       	rjmp	.+130    	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
			usart_read_bytes(256);
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	18 dd       	rcall	.-1488   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 63a:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
 63c:	69 ea       	ldi	r22, 0xA9	; 169
 63e:	8a ea       	ldi	r24, 0xAA	; 170
 640:	9a e0       	ldi	r25, 0x0A	; 10
 642:	70 dd       	rcall	.-1312   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
 644:	66 e5       	ldi	r22, 0x56	; 86
 646:	85 e5       	ldi	r24, 0x55	; 85
 648:	95 e0       	ldi	r25, 0x05	; 5
 64a:	6c dd       	rcall	.-1320   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
 64c:	56 01       	movw	r10, r12
 64e:	66 e2       	ldi	r22, 0x26	; 38
 650:	c6 01       	movw	r24, r12
 652:	68 dd       	rcall	.-1328   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
 654:	6f ef       	ldi	r22, 0xFF	; 255
 656:	c6 01       	movw	r24, r12
 658:	65 dd       	rcall	.-1334   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 65a:	e7 ec       	ldi	r30, 0xC7	; 199
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 662:	00 c0       	rjmp	.+0      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 664:	00 00       	nop
 666:	00 e7       	ldi	r16, 0x70	; 112
 668:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 66a:	c0 e0       	ldi	r28, 0x00	; 0
 66c:	d0 e0       	ldi	r29, 0x00	; 0
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 66e:	f8 01       	movw	r30, r16
 670:	61 91       	ld	r22, Z+
 672:	8f 01       	movw	r16, r30
 674:	ce 01       	movw	r24, r28
 676:	8a 0d       	add	r24, r10
 678:	9b 1d       	adc	r25, r11
 67a:	54 dd       	rcall	.-1368   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 67c:	21 96       	adiw	r28, 0x01	; 1
 67e:	c1 15       	cp	r28, r1
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	df 07       	cpc	r29, r31
 684:	a1 f7       	brne	.-24     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 686:	2f ef       	ldi	r18, 0xFF	; 255
 688:	d2 1a       	sub	r13, r18
 68a:	e2 0a       	sbc	r14, r18
 68c:	f2 0a       	sbc	r15, r18
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
 68e:	c6 01       	movw	r24, r12
 690:	9a 95       	dec	r25
 692:	6a e2       	ldi	r22, 0x2A	; 42
 694:	47 dd       	rcall	.-1394   	; 0x124 <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 696:	e6 01       	movw	r28, r12
 698:	21 97       	sbiw	r28, 0x01	; 1
 69a:	ce 01       	movw	r24, r28
 69c:	38 dd       	rcall	.-1424   	; 0x10e <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
 69e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <receivedBuffer+0xff>
 6a2:	89 17       	cp	r24, r25
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6a6:	c0 c0       	rjmp	.+384    	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
				dataVerify = gb_flash_read_byte(address-1);
 6a8:	ce 01       	movw	r24, r28
 6aa:	31 dd       	rcall	.-1438   	; 0x10e <gb_flash_read_byte>
 6ac:	9a e1       	ldi	r25, 0x1A	; 26
 6ae:	9a 95       	dec	r25
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6b4:	f4 cf       	rjmp	.-24     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
 6b6:	8a 35       	cpi	r24, 0x5A	; 90
 6b8:	09 f0       	breq	.+2      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6ba:	b8 c0       	rjmp	.+368    	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
			usart_read_bytes(128);
 6bc:	80 e8       	ldi	r24, 0x80	; 128
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	d4 dc       	rcall	.-1624   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 6c2:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
 6c4:	69 e0       	ldi	r22, 0x09	; 9
 6c6:	80 e2       	ldi	r24, 0x20	; 32
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	2c dd       	rcall	.-1448   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
 6cc:	6a ea       	ldi	r22, 0xAA	; 170
 6ce:	81 e2       	ldi	r24, 0x21	; 33
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	28 dd       	rcall	.-1456   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
 6d4:	65 e5       	ldi	r22, 0x55	; 85
 6d6:	82 e2       	ldi	r24, 0x22	; 34
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	24 dd       	rcall	.-1464   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 6dc:	65 ea       	ldi	r22, 0xA5	; 165
 6de:	8f e3       	ldi	r24, 0x3F	; 63
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	20 dd       	rcall	.-1472   	; 0x124 <gb_flash_write_bus_cycle>
 6e4:	ea e1       	ldi	r30, 0x1A	; 26
 6e6:	ea 95       	dec	r30
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
 6ec:	61 e1       	ldi	r22, 0x11	; 17
 6ee:	80 e2       	ldi	r24, 0x20	; 32
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	18 dd       	rcall	.-1488   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 6f4:	65 ea       	ldi	r22, 0xA5	; 165
 6f6:	8f e3       	ldi	r24, 0x3F	; 63
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	14 dd       	rcall	.-1496   	; 0x124 <gb_flash_write_bus_cycle>
 6fc:	fa e1       	ldi	r31, 0x1A	; 26
 6fe:	fa 95       	dec	r31
 700:	f1 f7       	brne	.-4      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 702:	00 c0       	rjmp	.+0      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	91 e2       	ldi	r25, 0x21	; 33
 70a:	0c dd       	rcall	.-1512   	; 0x124 <gb_flash_write_bus_cycle>
 70c:	2a e1       	ldi	r18, 0x1A	; 26
 70e:	2a 95       	dec	r18
 710:	f1 f7       	brne	.-4      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 712:	00 c0       	rjmp	.+0      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
 714:	6f e0       	ldi	r22, 0x0F	; 15
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	04 dd       	rcall	.-1528   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 71c:	65 e5       	ldi	r22, 0x55	; 85
 71e:	85 e2       	ldi	r24, 0x25	; 37
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	00 dd       	rcall	.-1536   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 724:	65 e5       	ldi	r22, 0x55	; 85
 726:	86 e2       	ldi	r24, 0x26	; 38
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	fc dc       	rcall	.-1544   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
 72c:	6a ea       	ldi	r22, 0xAA	; 170
 72e:	87 e2       	ldi	r24, 0x27	; 39
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	f8 dc       	rcall	.-1552   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 734:	65 ea       	ldi	r22, 0xA5	; 165
 736:	8f e3       	ldi	r24, 0x3F	; 63
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	f4 dc       	rcall	.-1560   	; 0x124 <gb_flash_write_bus_cycle>
 73c:	8a e1       	ldi	r24, 0x1A	; 26
 73e:	8a 95       	dec	r24
 740:	f1 f7       	brne	.-4      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 742:	00 c0       	rjmp	.+0      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 744:	6f e0       	ldi	r22, 0x0F	; 15
 746:	80 e2       	ldi	r24, 0x20	; 32
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	ec dc       	rcall	.-1576   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
 74c:	6a e2       	ldi	r22, 0x2A	; 42
 74e:	85 e2       	ldi	r24, 0x25	; 37
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	e8 dc       	rcall	.-1584   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
 754:	6a ea       	ldi	r22, 0xAA	; 170
 756:	86 e2       	ldi	r24, 0x26	; 38
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	e4 dc       	rcall	.-1592   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
 75c:	65 e5       	ldi	r22, 0x55	; 85
 75e:	87 e2       	ldi	r24, 0x27	; 39
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	e0 dc       	rcall	.-1600   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 764:	65 ea       	ldi	r22, 0xA5	; 165
 766:	8f e3       	ldi	r24, 0x3F	; 63
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	dc dc       	rcall	.-1608   	; 0x124 <gb_flash_write_bus_cycle>
 76c:	9a e1       	ldi	r25, 0x1A	; 26
 76e:	9a 95       	dec	r25
 770:	f1 f7       	brne	.-4      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 772:	00 c0       	rjmp	.+0      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 774:	6f e0       	ldi	r22, 0x0F	; 15
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	91 e0       	ldi	r25, 0x01	; 1
 77a:	d4 dc       	rcall	.-1624   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 77c:	65 e5       	ldi	r22, 0x55	; 85
 77e:	85 e2       	ldi	r24, 0x25	; 37
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	d0 dc       	rcall	.-1632   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 784:	65 e5       	ldi	r22, 0x55	; 85
 786:	86 e2       	ldi	r24, 0x26	; 38
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	cc dc       	rcall	.-1640   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
 78c:	60 ea       	ldi	r22, 0xA0	; 160
 78e:	87 e2       	ldi	r24, 0x27	; 39
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	c8 dc       	rcall	.-1648   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 794:	65 ea       	ldi	r22, 0xA5	; 165
 796:	8f e3       	ldi	r24, 0x3F	; 63
 798:	91 e0       	ldi	r25, 0x01	; 1
 79a:	c4 dc       	rcall	.-1656   	; 0x124 <gb_flash_write_bus_cycle>
 79c:	ea e1       	ldi	r30, 0x1A	; 26
 79e:	ea 95       	dec	r30
 7a0:	f1 f7       	brne	.-4      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	91 e2       	ldi	r25, 0x21	; 33
 7ae:	98 dc       	rcall	.-1744   	; 0xe0 <write_8bit_data>
 7b0:	fa e1       	ldi	r31, 0x1A	; 26
 7b2:	fa 95       	dec	r31
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
 7b8:	60 e1       	ldi	r22, 0x10	; 16
 7ba:	80 e2       	ldi	r24, 0x20	; 32
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	b2 dc       	rcall	.-1692   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 7c0:	65 ea       	ldi	r22, 0xA5	; 165
 7c2:	8f e3       	ldi	r24, 0x3F	; 63
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	ae dc       	rcall	.-1700   	; 0x124 <gb_flash_write_bus_cycle>
 7c8:	2a e1       	ldi	r18, 0x1A	; 26
 7ca:	2a 95       	dec	r18
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
 7d0:	68 e0       	ldi	r22, 0x08	; 8
 7d2:	80 e2       	ldi	r24, 0x20	; 32
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	a6 dc       	rcall	.-1716   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 7d8:	65 ea       	ldi	r22, 0xA5	; 165
 7da:	8f e3       	ldi	r24, 0x3F	; 63
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	a2 dc       	rcall	.-1724   	; 0x124 <gb_flash_write_bus_cycle>
 7e0:	8a e1       	ldi	r24, 0x1A	; 26
 7e2:	8a 95       	dec	r24
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
 7e8:	c0 e7       	ldi	r28, 0x70	; 112
 7ea:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	c0 3f       	cpi	r28, 0xF0	; 240
 7f0:	df 07       	cpc	r29, r31
 7f2:	69 f0       	breq	.+26     	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 7f4:	69 91       	ld	r22, Y+
 7f6:	c6 01       	movw	r24, r12
 7f8:	95 dc       	rcall	.-1750   	; 0x124 <gb_flash_write_bus_cycle>
 7fa:	9a e1       	ldi	r25, 0x1A	; 26
 7fc:	9a 95       	dec	r25
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
				_delay_us(5);
				address++;
 802:	ef ef       	ldi	r30, 0xFF	; 255
 804:	ce 1a       	sub	r12, r30
 806:	de 0a       	sbc	r13, r30
 808:	ee 0a       	sbc	r14, r30
 80a:	fe 0a       	sbc	r15, r30
 80c:	ef cf       	rjmp	.-34     	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
 80e:	6f ef       	ldi	r22, 0xFF	; 255
 810:	d7 01       	movw	r26, r14
 812:	c6 01       	movw	r24, r12
 814:	01 97       	sbiw	r24, 0x01	; 1
 816:	a1 09       	sbc	r26, r1
 818:	b1 09       	sbc	r27, r1
 81a:	84 dc       	rcall	.-1784   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 81c:	8f e3       	ldi	r24, 0x3F	; 63
 81e:	9c e9       	ldi	r25, 0x9C	; 156
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
 824:	00 c0       	rjmp	.+0      	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
 826:	00 00       	nop
			address++;
			_delay_ms(10);
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 828:	81 e3       	ldi	r24, 0x31	; 49
 82a:	c3 c0       	rjmp	.+390    	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 82c:	89 34       	cpi	r24, 0x49	; 73
 82e:	19 f0       	breq	.+6      	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
 830:	8f 34       	cpi	r24, 0x4F	; 79
 832:	09 f0       	breq	.+2      	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
 834:	50 c0       	rjmp	.+160    	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
			char portChar = USART_Receive();
 836:	11 dc       	rcall	.-2014   	; 0x5a <USART_Receive>
 838:	c8 2f       	mov	r28, r24
			usart_read_chars();
 83a:	2c dc       	rcall	.-1960   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 83c:	40 e1       	ldi	r20, 0x10	; 16
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	80 e7       	ldi	r24, 0x70	; 112
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	e7 d0       	rcall	.+462    	; 0xa18 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 84a:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
 84c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
 850:	89 34       	cpi	r24, 0x49	; 73
 852:	f9 f4       	brne	.+62     	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
				if (portChar == 'A') {
 854:	c1 34       	cpi	r28, 0x41	; 65
 856:	21 f4       	brne	.+8      	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
					DDRA &= ~(setValue);
 858:	8a b3       	in	r24, 0x1a	; 26
 85a:	60 95       	com	r22
 85c:	68 23       	and	r22, r24
 85e:	20 c0       	rjmp	.+64     	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
				}
				else if (portChar == 'B') {
 860:	c2 34       	cpi	r28, 0x42	; 66
 862:	21 f4       	brne	.+8      	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
					DDRB &= ~(setValue);
 864:	87 b3       	in	r24, 0x17	; 23
 866:	60 95       	com	r22
 868:	68 23       	and	r22, r24
 86a:	20 c0       	rjmp	.+64     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
				}
				else if (portChar == 'C') {
 86c:	c3 34       	cpi	r28, 0x43	; 67
 86e:	21 f4       	brne	.+8      	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
					DDRC &= ~(setValue);
 870:	84 b3       	in	r24, 0x14	; 20
 872:	60 95       	com	r22
 874:	68 23       	and	r22, r24
 876:	20 c0       	rjmp	.+64     	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
				}
				else if (portChar == 'D') {
 878:	c4 34       	cpi	r28, 0x44	; 68
 87a:	21 f4       	brne	.+8      	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
					DDRD &= ~(setValue);
 87c:	81 b3       	in	r24, 0x11	; 17
 87e:	60 95       	com	r22
 880:	68 23       	and	r22, r24
 882:	20 c0       	rjmp	.+64     	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
				}
				else if (portChar == 'E') {
 884:	c5 34       	cpi	r28, 0x45	; 69
 886:	09 f0       	breq	.+2      	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
 888:	95 c0       	rjmp	.+298    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
					DDRE &= ~(setValue);
 88a:	86 b1       	in	r24, 0x06	; 6
 88c:	60 95       	com	r22
 88e:	68 23       	and	r22, r24
 890:	20 c0       	rjmp	.+64     	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
 892:	8f 34       	cpi	r24, 0x4F	; 79
 894:	09 f0       	breq	.+2      	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
 896:	8e c0       	rjmp	.+284    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				if (portChar == 'A') {
 898:	c1 34       	cpi	r28, 0x41	; 65
 89a:	21 f4       	brne	.+8      	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
					DDRA |= (setValue);
 89c:	8a b3       	in	r24, 0x1a	; 26
 89e:	68 2b       	or	r22, r24
 8a0:	6a bb       	out	0x1a, r22	; 26
 8a2:	88 c0       	rjmp	.+272    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				}
				else if (portChar == 'B') {
 8a4:	c2 34       	cpi	r28, 0x42	; 66
 8a6:	21 f4       	brne	.+8      	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
					DDRB |= (setValue);
 8a8:	87 b3       	in	r24, 0x17	; 23
 8aa:	68 2b       	or	r22, r24
 8ac:	67 bb       	out	0x17, r22	; 23
 8ae:	82 c0       	rjmp	.+260    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				}
				else if (portChar == 'C') {
 8b0:	c3 34       	cpi	r28, 0x43	; 67
 8b2:	21 f4       	brne	.+8      	; 0x8bc <__LOCK_REGION_LENGTH__+0x4bc>
					DDRC |= (setValue);
 8b4:	84 b3       	in	r24, 0x14	; 20
 8b6:	68 2b       	or	r22, r24
 8b8:	64 bb       	out	0x14, r22	; 20
 8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				}
				else if (portChar == 'D') {
 8bc:	c4 34       	cpi	r28, 0x44	; 68
 8be:	21 f4       	brne	.+8      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
					DDRD |= (setValue);
 8c0:	81 b3       	in	r24, 0x11	; 17
 8c2:	68 2b       	or	r22, r24
 8c4:	61 bb       	out	0x11, r22	; 17
 8c6:	76 c0       	rjmp	.+236    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				}
				else if (portChar == 'E') {
 8c8:	c5 34       	cpi	r28, 0x45	; 69
 8ca:	09 f0       	breq	.+2      	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
 8cc:	73 c0       	rjmp	.+230    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
					DDRE |= (setValue);
 8ce:	86 b1       	in	r24, 0x06	; 6
 8d0:	68 2b       	or	r22, r24
 8d2:	66 b9       	out	0x06, r22	; 6
 8d4:	6f c0       	rjmp	.+222    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
 8d6:	8c 34       	cpi	r24, 0x4C	; 76
 8d8:	51 f5       	brne	.+84     	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
			char portChar = USART_Receive();			
 8da:	bf db       	rcall	.-2178   	; 0x5a <USART_Receive>
 8dc:	c8 2f       	mov	r28, r24
			usart_read_chars();
 8de:	da db       	rcall	.-2124   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 8e0:	40 e1       	ldi	r20, 0x10	; 16
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	80 e7       	ldi	r24, 0x70	; 112
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	95 d0       	rcall	.+298    	; 0xa18 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 8ee:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 8f0:	c1 34       	cpi	r28, 0x41	; 65
 8f2:	21 f4       	brne	.+8      	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
				PORTA &= ~(setValue);
 8f4:	8b b3       	in	r24, 0x1b	; 27
 8f6:	60 95       	com	r22
 8f8:	68 23       	and	r22, r24
 8fa:	2a c0       	rjmp	.+84     	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
			}
			else if (portChar == 'B') {
 8fc:	c2 34       	cpi	r28, 0x42	; 66
 8fe:	21 f4       	brne	.+8      	; 0x908 <__LOCK_REGION_LENGTH__+0x508>
				PORTB &= ~(setValue);
 900:	88 b3       	in	r24, 0x18	; 24
 902:	60 95       	com	r22
 904:	68 23       	and	r22, r24
 906:	2a c0       	rjmp	.+84     	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
			}
			else if (portChar == 'C') {
 908:	c3 34       	cpi	r28, 0x43	; 67
 90a:	21 f4       	brne	.+8      	; 0x914 <__LOCK_REGION_LENGTH__+0x514>
				PORTC &= ~(setValue);
 90c:	85 b3       	in	r24, 0x15	; 21
 90e:	60 95       	com	r22
 910:	68 23       	and	r22, r24
 912:	2a c0       	rjmp	.+84     	; 0x968 <__LOCK_REGION_LENGTH__+0x568>
			}
			else if (portChar == 'D') {
 914:	c4 34       	cpi	r28, 0x44	; 68
 916:	21 f4       	brne	.+8      	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
				PORTD &= ~(setValue);
 918:	82 b3       	in	r24, 0x12	; 18
 91a:	60 95       	com	r22
 91c:	68 23       	and	r22, r24
 91e:	2a c0       	rjmp	.+84     	; 0x974 <__LOCK_REGION_LENGTH__+0x574>
			}
			else if (portChar == 'E') {
 920:	c5 34       	cpi	r28, 0x45	; 69
 922:	09 f0       	breq	.+2      	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
 924:	47 c0       	rjmp	.+142    	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				PORTE &= ~(setValue);
 926:	87 b1       	in	r24, 0x07	; 7
 928:	60 95       	com	r22
 92a:	68 23       	and	r22, r24
 92c:	29 c0       	rjmp	.+82     	; 0x980 <__LOCK_REGION_LENGTH__+0x580>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
 92e:	88 34       	cpi	r24, 0x48	; 72
 930:	49 f5       	brne	.+82     	; 0x984 <__LOCK_REGION_LENGTH__+0x584>
			char portChar = USART_Receive();			
 932:	93 db       	rcall	.-2266   	; 0x5a <USART_Receive>
 934:	c8 2f       	mov	r28, r24
			usart_read_chars();
 936:	ae db       	rcall	.-2212   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 938:	40 e1       	ldi	r20, 0x10	; 16
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	80 e7       	ldi	r24, 0x70	; 112
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	69 d0       	rcall	.+210    	; 0xa18 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 946:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 948:	c1 34       	cpi	r28, 0x41	; 65
 94a:	21 f4       	brne	.+8      	; 0x954 <__LOCK_REGION_LENGTH__+0x554>
				PORTA |= (setValue);
 94c:	8b b3       	in	r24, 0x1b	; 27
 94e:	68 2b       	or	r22, r24
 950:	6b bb       	out	0x1b, r22	; 27
 952:	30 c0       	rjmp	.+96     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
			}
			else if (portChar == 'B') {
 954:	c2 34       	cpi	r28, 0x42	; 66
 956:	21 f4       	brne	.+8      	; 0x960 <__LOCK_REGION_LENGTH__+0x560>
				PORTB |= (setValue);
 958:	88 b3       	in	r24, 0x18	; 24
 95a:	68 2b       	or	r22, r24
 95c:	68 bb       	out	0x18, r22	; 24
 95e:	2a c0       	rjmp	.+84     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
			}
			else if (portChar == 'C') {
 960:	c3 34       	cpi	r28, 0x43	; 67
 962:	21 f4       	brne	.+8      	; 0x96c <__LOCK_REGION_LENGTH__+0x56c>
				PORTC |= (setValue);
 964:	85 b3       	in	r24, 0x15	; 21
 966:	68 2b       	or	r22, r24
 968:	65 bb       	out	0x15, r22	; 21
 96a:	24 c0       	rjmp	.+72     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
			}
			else if (portChar == 'D') {
 96c:	c4 34       	cpi	r28, 0x44	; 68
 96e:	21 f4       	brne	.+8      	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
				PORTD |= (setValue);
 970:	82 b3       	in	r24, 0x12	; 18
 972:	68 2b       	or	r22, r24
 974:	62 bb       	out	0x12, r22	; 18
 976:	1e c0       	rjmp	.+60     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
			}
			else if (portChar == 'E') {
 978:	c5 34       	cpi	r28, 0x45	; 69
 97a:	e1 f4       	brne	.+56     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				PORTE |= (setValue);
 97c:	87 b1       	in	r24, 0x07	; 7
 97e:	68 2b       	or	r22, r24
 980:	67 b9       	out	0x07, r22	; 7
 982:	18 c0       	rjmp	.+48     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
 984:	84 34       	cpi	r24, 0x44	; 68
 986:	c1 f4       	brne	.+48     	; 0x9b8 <__LOCK_REGION_LENGTH__+0x5b8>
			char portChar = USART_Receive();			
 988:	68 db       	rcall	.-2352   	; 0x5a <USART_Receive>
			
			PORTD |= (1<<ACTIVITY_LED);
 98a:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 98c:	81 34       	cpi	r24, 0x41	; 65
 98e:	11 f4       	brne	.+4      	; 0x994 <__LOCK_REGION_LENGTH__+0x594>
				USART_Transmit(PINA);
 990:	89 b3       	in	r24, 0x19	; 25
 992:	0f c0       	rjmp	.+30     	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
			}
			else if (portChar == 'B') {
 994:	82 34       	cpi	r24, 0x42	; 66
 996:	11 f4       	brne	.+4      	; 0x99c <__LOCK_REGION_LENGTH__+0x59c>
				USART_Transmit(PINB);
 998:	86 b3       	in	r24, 0x16	; 22
 99a:	0b c0       	rjmp	.+22     	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
			}
			else if (portChar == 'C') {
 99c:	83 34       	cpi	r24, 0x43	; 67
 99e:	11 f4       	brne	.+4      	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
				USART_Transmit(PINC);
 9a0:	83 b3       	in	r24, 0x13	; 19
 9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
			}
			else if (portChar == 'D') {
 9a4:	84 34       	cpi	r24, 0x44	; 68
 9a6:	11 f4       	brne	.+4      	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
				USART_Transmit(PIND);
 9a8:	80 b3       	in	r24, 0x10	; 16
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
			}
			else if (portChar == 'E') {
 9ac:	85 34       	cpi	r24, 0x45	; 69
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
				USART_Transmit(PINE);
 9b0:	85 b1       	in	r24, 0x05	; 5
 9b2:	57 db       	rcall	.-2386   	; 0x62 <USART_Transmit>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
 9b4:	93 98       	cbi	0x12, 3	; 18
 9b6:	d9 cc       	rjmp	.-1614   	; 0x36a <main+0x1e>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
 9b8:	8d 34       	cpi	r24, 0x4D	; 77
 9ba:	59 f4       	brne	.+22     	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
			char commonChar = USART_Receive();
 9bc:	4e db       	rcall	.-2404   	; 0x5a <USART_Receive>
			if (commonChar == '1') {
 9be:	81 33       	cpi	r24, 0x31	; 49
 9c0:	19 f4       	brne	.+6      	; 0x9c8 <__LOCK_REGION_LENGTH__+0x5c8>
				resetCommonLines = 1;
 9c2:	77 24       	eor	r7, r7
 9c4:	73 94       	inc	r7
 9c6:	d4 cc       	rjmp	.-1624   	; 0x370 <main+0x24>
			}
			else if (commonChar == '0') {
 9c8:	80 33       	cpi	r24, 0x30	; 48
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__LOCK_REGION_LENGTH__+0x5ce>
 9cc:	ce cc       	rjmp	.-1636   	; 0x36a <main+0x1e>
				resetCommonLines = 0;
 9ce:	71 2c       	mov	r7, r1
 9d0:	d0 cc       	rjmp	.-1632   	; 0x372 <main+0x26>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
 9d2:	88 36       	cpi	r24, 0x68	; 104
 9d4:	11 f4       	brne	.+4      	; 0x9da <__LOCK_REGION_LENGTH__+0x5da>
			USART_Transmit(PCB_VERSION);
 9d6:	84 e6       	ldi	r24, 0x64	; 100
 9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <__LOCK_REGION_LENGTH__+0x5e0>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
 9da:	86 35       	cpi	r24, 0x56	; 86
 9dc:	19 f4       	brne	.+6      	; 0x9e4 <__LOCK_REGION_LENGTH__+0x5e4>
			USART_Transmit(FIRMWARE_VERSION);
 9de:	8f e0       	ldi	r24, 0x0F	; 15
 9e0:	40 db       	rcall	.-2432   	; 0x62 <USART_Transmit>
 9e2:	c3 cc       	rjmp	.-1658   	; 0x36a <main+0x1e>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
 9e4:	8a 32       	cpi	r24, 0x2A	; 42
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__LOCK_REGION_LENGTH__+0x5ea>
 9e8:	c0 cc       	rjmp	.-1664   	; 0x36a <main+0x1e>
			usart_read_chars();
 9ea:	54 db       	rcall	.-2392   	; 0x94 <usart_read_chars>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 9ec:	40 e1       	ldi	r20, 0x10	; 16
 9ee:	50 e0       	ldi	r21, 0x00	; 0
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	80 e7       	ldi	r24, 0x70	; 112
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0f d0       	rcall	.+30     	; 0xa18 <strtol>
			if (resetValue == RESET_VALUE) {
 9fa:	61 3e       	cpi	r22, 0xE1	; 225
 9fc:	75 4e       	sbci	r23, 0xE5	; 229
 9fe:	87 40       	sbci	r24, 0x07	; 7
 a00:	91 05       	cpc	r25, r1
 a02:	09 f0       	breq	.+2      	; 0xa06 <__LOCK_REGION_LENGTH__+0x606>
 a04:	b2 cc       	rjmp	.-1692   	; 0x36a <main+0x1e>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
 a06:	84 b7       	in	r24, 0x34	; 52
 a08:	87 7f       	andi	r24, 0xF7	; 247
 a0a:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
 a0c:	31 bc       	out	0x21, r3	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
 a0e:	21 bc       	out	0x21, r2	; 33
 a10:	c2 01       	movw	r24, r4
 a12:	01 97       	sbiw	r24, 0x01	; 1
 a14:	f1 f7       	brne	.-4      	; 0xa12 <__LOCK_REGION_LENGTH__+0x612>
 a16:	a9 cc       	rjmp	.-1710   	; 0x36a <main+0x1e>

00000a18 <strtol>:
 a18:	a0 e0       	ldi	r26, 0x00	; 0
 a1a:	b0 e0       	ldi	r27, 0x00	; 0
 a1c:	e1 e1       	ldi	r30, 0x11	; 17
 a1e:	f5 e0       	ldi	r31, 0x05	; 5
 a20:	78 c1       	rjmp	.+752    	; 0xd12 <__prologue_saves__+0x2>
 a22:	5c 01       	movw	r10, r24
 a24:	6b 01       	movw	r12, r22
 a26:	7a 01       	movw	r14, r20
 a28:	61 15       	cp	r22, r1
 a2a:	71 05       	cpc	r23, r1
 a2c:	19 f0       	breq	.+6      	; 0xa34 <strtol+0x1c>
 a2e:	fb 01       	movw	r30, r22
 a30:	91 83       	std	Z+1, r25	; 0x01
 a32:	80 83       	st	Z, r24
 a34:	e1 14       	cp	r14, r1
 a36:	f1 04       	cpc	r15, r1
 a38:	29 f0       	breq	.+10     	; 0xa44 <strtol+0x2c>
 a3a:	c7 01       	movw	r24, r14
 a3c:	02 97       	sbiw	r24, 0x02	; 2
 a3e:	83 97       	sbiw	r24, 0x23	; 35
 a40:	08 f0       	brcs	.+2      	; 0xa44 <strtol+0x2c>
 a42:	e2 c0       	rjmp	.+452    	; 0xc08 <strtol+0x1f0>
 a44:	e5 01       	movw	r28, r10
 a46:	21 96       	adiw	r28, 0x01	; 1
 a48:	f5 01       	movw	r30, r10
 a4a:	10 81       	ld	r17, Z
 a4c:	81 2f       	mov	r24, r17
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	11 d1       	rcall	.+546    	; 0xc74 <isspace>
 a52:	89 2b       	or	r24, r25
 a54:	11 f0       	breq	.+4      	; 0xa5a <strtol+0x42>
 a56:	5e 01       	movw	r10, r28
 a58:	f5 cf       	rjmp	.-22     	; 0xa44 <strtol+0x2c>
 a5a:	1d 32       	cpi	r17, 0x2D	; 45
 a5c:	29 f4       	brne	.+10     	; 0xa68 <strtol+0x50>
 a5e:	21 96       	adiw	r28, 0x01	; 1
 a60:	f5 01       	movw	r30, r10
 a62:	11 81       	ldd	r17, Z+1	; 0x01
 a64:	01 e0       	ldi	r16, 0x01	; 1
 a66:	07 c0       	rjmp	.+14     	; 0xa76 <strtol+0x5e>
 a68:	1b 32       	cpi	r17, 0x2B	; 43
 a6a:	21 f4       	brne	.+8      	; 0xa74 <strtol+0x5c>
 a6c:	e5 01       	movw	r28, r10
 a6e:	22 96       	adiw	r28, 0x02	; 2
 a70:	f5 01       	movw	r30, r10
 a72:	11 81       	ldd	r17, Z+1	; 0x01
 a74:	00 e0       	ldi	r16, 0x00	; 0
 a76:	e1 14       	cp	r14, r1
 a78:	f1 04       	cpc	r15, r1
 a7a:	09 f1       	breq	.+66     	; 0xabe <strtol+0xa6>
 a7c:	f0 e1       	ldi	r31, 0x10	; 16
 a7e:	ef 16       	cp	r14, r31
 a80:	f1 04       	cpc	r15, r1
 a82:	29 f4       	brne	.+10     	; 0xa8e <strtol+0x76>
 a84:	3e c0       	rjmp	.+124    	; 0xb02 <strtol+0xea>
 a86:	10 e3       	ldi	r17, 0x30	; 48
 a88:	e1 14       	cp	r14, r1
 a8a:	f1 04       	cpc	r15, r1
 a8c:	21 f1       	breq	.+72     	; 0xad6 <strtol+0xbe>
 a8e:	28 e0       	ldi	r18, 0x08	; 8
 a90:	e2 16       	cp	r14, r18
 a92:	f1 04       	cpc	r15, r1
 a94:	01 f1       	breq	.+64     	; 0xad6 <strtol+0xbe>
 a96:	54 f4       	brge	.+20     	; 0xaac <strtol+0x94>
 a98:	e2 e0       	ldi	r30, 0x02	; 2
 a9a:	ee 16       	cp	r14, r30
 a9c:	f1 04       	cpc	r15, r1
 a9e:	21 f5       	brne	.+72     	; 0xae8 <strtol+0xd0>
 aa0:	81 2c       	mov	r8, r1
 aa2:	91 2c       	mov	r9, r1
 aa4:	a1 2c       	mov	r10, r1
 aa6:	b0 e4       	ldi	r27, 0x40	; 64
 aa8:	bb 2e       	mov	r11, r27
 aaa:	3d c0       	rjmp	.+122    	; 0xb26 <strtol+0x10e>
 aac:	fa e0       	ldi	r31, 0x0A	; 10
 aae:	ef 16       	cp	r14, r31
 ab0:	f1 04       	cpc	r15, r1
 ab2:	39 f0       	breq	.+14     	; 0xac2 <strtol+0xaa>
 ab4:	20 e1       	ldi	r18, 0x10	; 16
 ab6:	e2 16       	cp	r14, r18
 ab8:	f1 04       	cpc	r15, r1
 aba:	b1 f4       	brne	.+44     	; 0xae8 <strtol+0xd0>
 abc:	2f c0       	rjmp	.+94     	; 0xb1c <strtol+0x104>
 abe:	10 33       	cpi	r17, 0x30	; 48
 ac0:	11 f1       	breq	.+68     	; 0xb06 <strtol+0xee>
 ac2:	fa e0       	ldi	r31, 0x0A	; 10
 ac4:	ef 2e       	mov	r14, r31
 ac6:	f1 2c       	mov	r15, r1
 ac8:	ac ec       	ldi	r26, 0xCC	; 204
 aca:	8a 2e       	mov	r8, r26
 acc:	98 2c       	mov	r9, r8
 ace:	a8 2c       	mov	r10, r8
 ad0:	ac e0       	ldi	r26, 0x0C	; 12
 ad2:	ba 2e       	mov	r11, r26
 ad4:	28 c0       	rjmp	.+80     	; 0xb26 <strtol+0x10e>
 ad6:	78 e0       	ldi	r23, 0x08	; 8
 ad8:	e7 2e       	mov	r14, r23
 ada:	f1 2c       	mov	r15, r1
 adc:	81 2c       	mov	r8, r1
 ade:	91 2c       	mov	r9, r1
 ae0:	a1 2c       	mov	r10, r1
 ae2:	e0 e1       	ldi	r30, 0x10	; 16
 ae4:	be 2e       	mov	r11, r30
 ae6:	1f c0       	rjmp	.+62     	; 0xb26 <strtol+0x10e>
 ae8:	60 e0       	ldi	r22, 0x00	; 0
 aea:	70 e0       	ldi	r23, 0x00	; 0
 aec:	80 e0       	ldi	r24, 0x00	; 0
 aee:	90 e8       	ldi	r25, 0x80	; 128
 af0:	97 01       	movw	r18, r14
 af2:	0f 2c       	mov	r0, r15
 af4:	00 0c       	add	r0, r0
 af6:	44 0b       	sbc	r20, r20
 af8:	55 0b       	sbc	r21, r21
 afa:	de d0       	rcall	.+444    	; 0xcb8 <__udivmodsi4>
 afc:	49 01       	movw	r8, r18
 afe:	5a 01       	movw	r10, r20
 b00:	12 c0       	rjmp	.+36     	; 0xb26 <strtol+0x10e>
 b02:	10 33       	cpi	r17, 0x30	; 48
 b04:	59 f4       	brne	.+22     	; 0xb1c <strtol+0x104>
 b06:	88 81       	ld	r24, Y
 b08:	8f 7d       	andi	r24, 0xDF	; 223
 b0a:	88 35       	cpi	r24, 0x58	; 88
 b0c:	09 f0       	breq	.+2      	; 0xb10 <strtol+0xf8>
 b0e:	bb cf       	rjmp	.-138    	; 0xa86 <strtol+0x6e>
 b10:	19 81       	ldd	r17, Y+1	; 0x01
 b12:	22 96       	adiw	r28, 0x02	; 2
 b14:	02 60       	ori	r16, 0x02	; 2
 b16:	80 e1       	ldi	r24, 0x10	; 16
 b18:	e8 2e       	mov	r14, r24
 b1a:	f1 2c       	mov	r15, r1
 b1c:	81 2c       	mov	r8, r1
 b1e:	91 2c       	mov	r9, r1
 b20:	a1 2c       	mov	r10, r1
 b22:	68 e0       	ldi	r22, 0x08	; 8
 b24:	b6 2e       	mov	r11, r22
 b26:	40 e0       	ldi	r20, 0x00	; 0
 b28:	60 e0       	ldi	r22, 0x00	; 0
 b2a:	70 e0       	ldi	r23, 0x00	; 0
 b2c:	cb 01       	movw	r24, r22
 b2e:	27 01       	movw	r4, r14
 b30:	0f 2c       	mov	r0, r15
 b32:	00 0c       	add	r0, r0
 b34:	66 08       	sbc	r6, r6
 b36:	77 08       	sbc	r7, r7
 b38:	fe 01       	movw	r30, r28
 b3a:	50 ed       	ldi	r21, 0xD0	; 208
 b3c:	35 2e       	mov	r3, r21
 b3e:	31 0e       	add	r3, r17
 b40:	29 e0       	ldi	r18, 0x09	; 9
 b42:	23 15       	cp	r18, r3
 b44:	70 f4       	brcc	.+28     	; 0xb62 <strtol+0x14a>
 b46:	2f eb       	ldi	r18, 0xBF	; 191
 b48:	21 0f       	add	r18, r17
 b4a:	2a 31       	cpi	r18, 0x1A	; 26
 b4c:	18 f4       	brcc	.+6      	; 0xb54 <strtol+0x13c>
 b4e:	39 ec       	ldi	r19, 0xC9	; 201
 b50:	33 2e       	mov	r3, r19
 b52:	06 c0       	rjmp	.+12     	; 0xb60 <strtol+0x148>
 b54:	2f e9       	ldi	r18, 0x9F	; 159
 b56:	21 0f       	add	r18, r17
 b58:	2a 31       	cpi	r18, 0x1A	; 26
 b5a:	10 f5       	brcc	.+68     	; 0xba0 <strtol+0x188>
 b5c:	29 ea       	ldi	r18, 0xA9	; 169
 b5e:	32 2e       	mov	r3, r18
 b60:	31 0e       	add	r3, r17
 b62:	23 2d       	mov	r18, r3
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	2e 15       	cp	r18, r14
 b68:	3f 05       	cpc	r19, r15
 b6a:	d4 f4       	brge	.+52     	; 0xba0 <strtol+0x188>
 b6c:	47 fd       	sbrc	r20, 7
 b6e:	15 c0       	rjmp	.+42     	; 0xb9a <strtol+0x182>
 b70:	86 16       	cp	r8, r22
 b72:	97 06       	cpc	r9, r23
 b74:	a8 06       	cpc	r10, r24
 b76:	b9 06       	cpc	r11, r25
 b78:	68 f0       	brcs	.+26     	; 0xb94 <strtol+0x17c>
 b7a:	a3 01       	movw	r20, r6
 b7c:	92 01       	movw	r18, r4
 b7e:	8d d0       	rcall	.+282    	; 0xc9a <__mulsi3>
 b80:	63 0d       	add	r22, r3
 b82:	71 1d       	adc	r23, r1
 b84:	81 1d       	adc	r24, r1
 b86:	91 1d       	adc	r25, r1
 b88:	61 30       	cpi	r22, 0x01	; 1
 b8a:	71 05       	cpc	r23, r1
 b8c:	81 05       	cpc	r24, r1
 b8e:	20 e8       	ldi	r18, 0x80	; 128
 b90:	92 07       	cpc	r25, r18
 b92:	10 f0       	brcs	.+4      	; 0xb98 <strtol+0x180>
 b94:	4f ef       	ldi	r20, 0xFF	; 255
 b96:	01 c0       	rjmp	.+2      	; 0xb9a <strtol+0x182>
 b98:	41 e0       	ldi	r20, 0x01	; 1
 b9a:	21 96       	adiw	r28, 0x01	; 1
 b9c:	10 81       	ld	r17, Z
 b9e:	cc cf       	rjmp	.-104    	; 0xb38 <strtol+0x120>
 ba0:	20 2f       	mov	r18, r16
 ba2:	21 70       	andi	r18, 0x01	; 1
 ba4:	c1 14       	cp	r12, r1
 ba6:	d1 04       	cpc	r13, r1
 ba8:	71 f0       	breq	.+28     	; 0xbc6 <strtol+0x1ae>
 baa:	44 23       	and	r20, r20
 bac:	29 f0       	breq	.+10     	; 0xbb8 <strtol+0x1a0>
 bae:	21 97       	sbiw	r28, 0x01	; 1
 bb0:	f6 01       	movw	r30, r12
 bb2:	d1 83       	std	Z+1, r29	; 0x01
 bb4:	c0 83       	st	Z, r28
 bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <strtol+0x1ae>
 bb8:	01 ff       	sbrs	r16, 1
 bba:	19 c0       	rjmp	.+50     	; 0xbee <strtol+0x1d6>
 bbc:	22 97       	sbiw	r28, 0x02	; 2
 bbe:	f6 01       	movw	r30, r12
 bc0:	d1 83       	std	Z+1, r29	; 0x01
 bc2:	c0 83       	st	Z, r28
 bc4:	14 c0       	rjmp	.+40     	; 0xbee <strtol+0x1d6>
 bc6:	47 ff       	sbrs	r20, 7
 bc8:	12 c0       	rjmp	.+36     	; 0xbee <strtol+0x1d6>
 bca:	22 23       	and	r18, r18
 bcc:	29 f0       	breq	.+10     	; 0xbd8 <strtol+0x1c0>
 bce:	60 e0       	ldi	r22, 0x00	; 0
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	90 e8       	ldi	r25, 0x80	; 128
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <strtol+0x1c8>
 bd8:	6f ef       	ldi	r22, 0xFF	; 255
 bda:	7f ef       	ldi	r23, 0xFF	; 255
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	9f e7       	ldi	r25, 0x7F	; 127
 be0:	22 e2       	ldi	r18, 0x22	; 34
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <errno+0x1>
 be8:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <errno>
 bec:	09 c0       	rjmp	.+18     	; 0xc00 <strtol+0x1e8>
 bee:	22 23       	and	r18, r18
 bf0:	81 f0       	breq	.+32     	; 0xc12 <strtol+0x1fa>
 bf2:	90 95       	com	r25
 bf4:	80 95       	com	r24
 bf6:	70 95       	com	r23
 bf8:	61 95       	neg	r22
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255
 bfc:	8f 4f       	sbci	r24, 0xFF	; 255
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	46 2f       	mov	r20, r22
 c02:	37 2f       	mov	r19, r23
 c04:	28 2f       	mov	r18, r24
 c06:	12 c0       	rjmp	.+36     	; 0xc2c <strtol+0x214>
 c08:	40 e0       	ldi	r20, 0x00	; 0
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	20 e0       	ldi	r18, 0x00	; 0
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <strtol+0x214>
 c12:	97 ff       	sbrs	r25, 7
 c14:	f5 cf       	rjmp	.-22     	; 0xc00 <strtol+0x1e8>
 c16:	82 e2       	ldi	r24, 0x22	; 34
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <errno+0x1>
 c1e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <errno>
 c22:	6f ef       	ldi	r22, 0xFF	; 255
 c24:	7f ef       	ldi	r23, 0xFF	; 255
 c26:	8f ef       	ldi	r24, 0xFF	; 255
 c28:	9f e7       	ldi	r25, 0x7F	; 127
 c2a:	ea cf       	rjmp	.-44     	; 0xc00 <strtol+0x1e8>
 c2c:	64 2f       	mov	r22, r20
 c2e:	73 2f       	mov	r23, r19
 c30:	82 2f       	mov	r24, r18
 c32:	cd b7       	in	r28, 0x3d	; 61
 c34:	de b7       	in	r29, 0x3e	; 62
 c36:	e1 e1       	ldi	r30, 0x11	; 17
 c38:	88 c0       	rjmp	.+272    	; 0xd4a <__epilogue_restores__+0x2>

00000c3a <atoi>:
 c3a:	fc 01       	movw	r30, r24
 c3c:	88 27       	eor	r24, r24
 c3e:	99 27       	eor	r25, r25
 c40:	e8 94       	clt
 c42:	21 91       	ld	r18, Z+
 c44:	20 32       	cpi	r18, 0x20	; 32
 c46:	e9 f3       	breq	.-6      	; 0xc42 <atoi+0x8>
 c48:	29 30       	cpi	r18, 0x09	; 9
 c4a:	10 f0       	brcs	.+4      	; 0xc50 <atoi+0x16>
 c4c:	2e 30       	cpi	r18, 0x0E	; 14
 c4e:	c8 f3       	brcs	.-14     	; 0xc42 <atoi+0x8>
 c50:	2b 32       	cpi	r18, 0x2B	; 43
 c52:	39 f0       	breq	.+14     	; 0xc62 <atoi+0x28>
 c54:	2d 32       	cpi	r18, 0x2D	; 45
 c56:	31 f4       	brne	.+12     	; 0xc64 <atoi+0x2a>
 c58:	68 94       	set
 c5a:	03 c0       	rjmp	.+6      	; 0xc62 <atoi+0x28>
 c5c:	13 d0       	rcall	.+38     	; 0xc84 <__mulhi_const_10>
 c5e:	82 0f       	add	r24, r18
 c60:	91 1d       	adc	r25, r1
 c62:	21 91       	ld	r18, Z+
 c64:	20 53       	subi	r18, 0x30	; 48
 c66:	2a 30       	cpi	r18, 0x0A	; 10
 c68:	c8 f3       	brcs	.-14     	; 0xc5c <atoi+0x22>
 c6a:	1e f4       	brtc	.+6      	; 0xc72 <atoi+0x38>
 c6c:	90 95       	com	r25
 c6e:	81 95       	neg	r24
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	08 95       	ret

00000c74 <isspace>:
 c74:	91 11       	cpse	r25, r1
 c76:	0e c0       	rjmp	.+28     	; 0xc94 <__ctype_isfalse>
 c78:	80 32       	cpi	r24, 0x20	; 32
 c7a:	19 f0       	breq	.+6      	; 0xc82 <isspace+0xe>
 c7c:	89 50       	subi	r24, 0x09	; 9
 c7e:	85 50       	subi	r24, 0x05	; 5
 c80:	d0 f7       	brcc	.-12     	; 0xc76 <isspace+0x2>
 c82:	08 95       	ret

00000c84 <__mulhi_const_10>:
 c84:	7a e0       	ldi	r23, 0x0A	; 10
 c86:	97 9f       	mul	r25, r23
 c88:	90 2d       	mov	r25, r0
 c8a:	87 9f       	mul	r24, r23
 c8c:	80 2d       	mov	r24, r0
 c8e:	91 0d       	add	r25, r1
 c90:	11 24       	eor	r1, r1
 c92:	08 95       	ret

00000c94 <__ctype_isfalse>:
 c94:	99 27       	eor	r25, r25
 c96:	88 27       	eor	r24, r24

00000c98 <__ctype_istrue>:
 c98:	08 95       	ret

00000c9a <__mulsi3>:
 c9a:	db 01       	movw	r26, r22
 c9c:	8f 93       	push	r24
 c9e:	9f 93       	push	r25
 ca0:	2d d0       	rcall	.+90     	; 0xcfc <__muluhisi3>
 ca2:	bf 91       	pop	r27
 ca4:	af 91       	pop	r26
 ca6:	a2 9f       	mul	r26, r18
 ca8:	80 0d       	add	r24, r0
 caa:	91 1d       	adc	r25, r1
 cac:	a3 9f       	mul	r26, r19
 cae:	90 0d       	add	r25, r0
 cb0:	b2 9f       	mul	r27, r18
 cb2:	90 0d       	add	r25, r0
 cb4:	11 24       	eor	r1, r1
 cb6:	08 95       	ret

00000cb8 <__udivmodsi4>:
 cb8:	a1 e2       	ldi	r26, 0x21	; 33
 cba:	1a 2e       	mov	r1, r26
 cbc:	aa 1b       	sub	r26, r26
 cbe:	bb 1b       	sub	r27, r27
 cc0:	fd 01       	movw	r30, r26
 cc2:	0d c0       	rjmp	.+26     	; 0xcde <__udivmodsi4_ep>

00000cc4 <__udivmodsi4_loop>:
 cc4:	aa 1f       	adc	r26, r26
 cc6:	bb 1f       	adc	r27, r27
 cc8:	ee 1f       	adc	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	a2 17       	cp	r26, r18
 cce:	b3 07       	cpc	r27, r19
 cd0:	e4 07       	cpc	r30, r20
 cd2:	f5 07       	cpc	r31, r21
 cd4:	20 f0       	brcs	.+8      	; 0xcde <__udivmodsi4_ep>
 cd6:	a2 1b       	sub	r26, r18
 cd8:	b3 0b       	sbc	r27, r19
 cda:	e4 0b       	sbc	r30, r20
 cdc:	f5 0b       	sbc	r31, r21

00000cde <__udivmodsi4_ep>:
 cde:	66 1f       	adc	r22, r22
 ce0:	77 1f       	adc	r23, r23
 ce2:	88 1f       	adc	r24, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	1a 94       	dec	r1
 ce8:	69 f7       	brne	.-38     	; 0xcc4 <__udivmodsi4_loop>
 cea:	60 95       	com	r22
 cec:	70 95       	com	r23
 cee:	80 95       	com	r24
 cf0:	90 95       	com	r25
 cf2:	9b 01       	movw	r18, r22
 cf4:	ac 01       	movw	r20, r24
 cf6:	bd 01       	movw	r22, r26
 cf8:	cf 01       	movw	r24, r30
 cfa:	08 95       	ret

00000cfc <__muluhisi3>:
 cfc:	40 d0       	rcall	.+128    	; 0xd7e <__umulhisi3>
 cfe:	a5 9f       	mul	r26, r21
 d00:	90 0d       	add	r25, r0
 d02:	b4 9f       	mul	r27, r20
 d04:	90 0d       	add	r25, r0
 d06:	a4 9f       	mul	r26, r20
 d08:	80 0d       	add	r24, r0
 d0a:	91 1d       	adc	r25, r1
 d0c:	11 24       	eor	r1, r1
 d0e:	08 95       	ret

00000d10 <__prologue_saves__>:
 d10:	2f 92       	push	r2
 d12:	3f 92       	push	r3
 d14:	4f 92       	push	r4
 d16:	5f 92       	push	r5
 d18:	6f 92       	push	r6
 d1a:	7f 92       	push	r7
 d1c:	8f 92       	push	r8
 d1e:	9f 92       	push	r9
 d20:	af 92       	push	r10
 d22:	bf 92       	push	r11
 d24:	cf 92       	push	r12
 d26:	df 92       	push	r13
 d28:	ef 92       	push	r14
 d2a:	ff 92       	push	r15
 d2c:	0f 93       	push	r16
 d2e:	1f 93       	push	r17
 d30:	cf 93       	push	r28
 d32:	df 93       	push	r29
 d34:	cd b7       	in	r28, 0x3d	; 61
 d36:	de b7       	in	r29, 0x3e	; 62
 d38:	ca 1b       	sub	r28, r26
 d3a:	db 0b       	sbc	r29, r27
 d3c:	0f b6       	in	r0, 0x3f	; 63
 d3e:	f8 94       	cli
 d40:	de bf       	out	0x3e, r29	; 62
 d42:	0f be       	out	0x3f, r0	; 63
 d44:	cd bf       	out	0x3d, r28	; 61
 d46:	09 94       	ijmp

00000d48 <__epilogue_restores__>:
 d48:	2a 88       	ldd	r2, Y+18	; 0x12
 d4a:	39 88       	ldd	r3, Y+17	; 0x11
 d4c:	48 88       	ldd	r4, Y+16	; 0x10
 d4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 d50:	6e 84       	ldd	r6, Y+14	; 0x0e
 d52:	7d 84       	ldd	r7, Y+13	; 0x0d
 d54:	8c 84       	ldd	r8, Y+12	; 0x0c
 d56:	9b 84       	ldd	r9, Y+11	; 0x0b
 d58:	aa 84       	ldd	r10, Y+10	; 0x0a
 d5a:	b9 84       	ldd	r11, Y+9	; 0x09
 d5c:	c8 84       	ldd	r12, Y+8	; 0x08
 d5e:	df 80       	ldd	r13, Y+7	; 0x07
 d60:	ee 80       	ldd	r14, Y+6	; 0x06
 d62:	fd 80       	ldd	r15, Y+5	; 0x05
 d64:	0c 81       	ldd	r16, Y+4	; 0x04
 d66:	1b 81       	ldd	r17, Y+3	; 0x03
 d68:	aa 81       	ldd	r26, Y+2	; 0x02
 d6a:	b9 81       	ldd	r27, Y+1	; 0x01
 d6c:	ce 0f       	add	r28, r30
 d6e:	d1 1d       	adc	r29, r1
 d70:	0f b6       	in	r0, 0x3f	; 63
 d72:	f8 94       	cli
 d74:	de bf       	out	0x3e, r29	; 62
 d76:	0f be       	out	0x3f, r0	; 63
 d78:	cd bf       	out	0x3d, r28	; 61
 d7a:	ed 01       	movw	r28, r26
 d7c:	08 95       	ret

00000d7e <__umulhisi3>:
 d7e:	a2 9f       	mul	r26, r18
 d80:	b0 01       	movw	r22, r0
 d82:	b3 9f       	mul	r27, r19
 d84:	c0 01       	movw	r24, r0
 d86:	a3 9f       	mul	r26, r19
 d88:	01 d0       	rcall	.+2      	; 0xd8c <__umulhisi3+0xe>
 d8a:	b2 9f       	mul	r27, r18
 d8c:	70 0d       	add	r23, r0
 d8e:	81 1d       	adc	r24, r1
 d90:	11 24       	eor	r1, r1
 d92:	91 1d       	adc	r25, r1
 d94:	08 95       	ret

00000d96 <_exit>:
 d96:	f8 94       	cli

00000d98 <__stop_program>:
 d98:	ff cf       	rjmp	.-2      	; 0xd98 <__stop_program>
