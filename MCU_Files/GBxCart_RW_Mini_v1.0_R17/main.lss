
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000e00  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000112  00800062  00800062  00000e96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e54  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  00002db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3c  00000000  00000000  00003467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000040a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001331  00000000  00000000  000046f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00005a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 e0       	ldi	r30, 0x00	; 0
  36:	fe e0       	ldi	r31, 0x0E	; 14
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a4 37       	cpi	r26, 0x74	; 116
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	7b d1       	rcall	.+758    	; 0x34c <main>
  56:	d2 c6       	rjmp	.+3492   	; 0xdfc <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Receive>:

uint8_t cartMode = GB_MODE;

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  5a:	5f 9b       	sbis	0x0b, 7	; 11
  5c:	fe cf       	rjmp	.-4      	; 0x5a <USART_Receive>
	return UDR; // Get and return received data from buffer
  5e:	8c b1       	in	r24, 0x0c	; 12
}
  60:	08 95       	ret

00000062 <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  62:	5d 9b       	sbis	0x0b, 5	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	UDR = data;
  66:	8c b9       	out	0x0c, r24	; 12
  68:	08 95       	ret

0000006a <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
  6a:	0f 93       	push	r16
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
  74:	c0 e7       	ldi	r28, 0x70	; 112
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	ce 01       	movw	r24, r28
  7a:	80 57       	subi	r24, 0x70	; 112
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	80 17       	cp	r24, r16
  80:	91 07       	cpc	r25, r17
  82:	1c f4       	brge	.+6      	; 0x8a <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
  84:	ea df       	rcall	.-44     	; 0x5a <USART_Receive>
  86:	89 93       	st	Y+, r24
  88:	f7 cf       	rjmp	.-18     	; 0x78 <usart_read_bytes+0xe>
	}
}
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	1f 91       	pop	r17
  90:	0f 91       	pop	r16
  92:	08 95       	ret

00000094 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	c0 e7       	ldi	r28, 0x70	; 112
  9a:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
  9c:	de df       	rcall	.-68     	; 0x5a <USART_Receive>
  9e:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
  a0:	81 11       	cpse	r24, r1
  a2:	fc cf       	rjmp	.-8      	; 0x9c <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
  aa:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
  ac:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
  ae:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
  b0:	96 9a       	sbi	0x12, 6	; 18
  b2:	08 95       	ret

000000b4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
  b4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
  b6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
  b8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
  ba:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret

000000c4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
  c4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	08 95       	ret

000000ca <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
  ca:	fc df       	rcall	.-8      	; 0xc4 <set_16bit_address>
	
	cs_mreqPin_low;
  cc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
  ce:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (At 8MHz - minimum needed is 1 nops, 2 nops for GB camera)
  d0:	00 00       	nop
	asm volatile("nop");
  d2:	00 00       	nop
	asm volatile("nop");
  d4:	00 00       	nop
	asm volatile("nop");
  d6:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
  d8:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
  da:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
  dc:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
  de:	08 95       	ret

000000e0 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	d6 2f       	mov	r29, r22
  e6:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
  e8:	ed df       	rcall	.-38     	; 0xc4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
  ee:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
  f0:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
  f2:	c1 30       	cpi	r28, 0x01	; 1
  f4:	09 f4       	brne	.+2      	; 0xf8 <write_8bit_data+0x18>
		cs_mreqPin_low;
  f6:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
  f8:	00 00       	nop
	asm volatile("nop");
  fa:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
  fc:	c1 30       	cpi	r28, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <write_8bit_data+0x22>
		cs_mreqPin_high;
 100:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
 102:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 104:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 106:	14 ba       	out	0x14, r1	; 20
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
 10e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 110:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
 112:	d8 df       	rcall	.-80     	; 0xc4 <set_16bit_address>
	
	rdPin_low;
 114:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
 116:	00 00       	nop
	asm volatile("nop");
 118:	00 00       	nop
	asm volatile("nop");
 11a:	00 00       	nop
	asm volatile("nop");
 11c:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
 11e:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
 120:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
 122:	08 95       	ret

00000124 <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 124:	cf 93       	push	r28
 126:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 12c:	cb df       	rcall	.-106    	; 0xc4 <set_16bit_address>
	PORT_DATA7_0 = data;
 12e:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
 130:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <flashWriteWePin>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	49 f4       	brne	.+18     	; 0x14a <gb_flash_write_bus_cycle+0x26>
		audioPin_low; // WE low
 138:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
 13a:	00 00       	nop
		asm volatile("nop");
 13c:	00 00       	nop
		asm volatile("nop");
 13e:	00 00       	nop
		asm volatile("nop");
 140:	00 00       	nop
		asm volatile("nop");
 142:	00 00       	nop
		asm volatile("nop");
 144:	00 00       	nop
		audioPin_high; // WE high
 146:	39 9a       	sbi	0x07, 1	; 7
 148:	08 c0       	rjmp	.+16     	; 0x15a <gb_flash_write_bus_cycle+0x36>
	}
	else { // WR pin
		wrPin_low; // WE low
 14a:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
 14c:	00 00       	nop
		asm volatile("nop");
 14e:	00 00       	nop
		asm volatile("nop");
 150:	00 00       	nop
		asm volatile("nop");
 152:	00 00       	nop
		asm volatile("nop");
 154:	00 00       	nop
		asm volatile("nop");
 156:	00 00       	nop
		wrPin_high; // WE high
 158:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 15a:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 15c:	14 ba       	out	0x14, r1	; 20
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 16c:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 170:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 174:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 178:	d5 df       	rcall	.-86     	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 17a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 17e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 182:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 186:	ce df       	rcall	.-100    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 188:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 18c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 190:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 194:	c7 df       	rcall	.-114    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
 196:	61 2f       	mov	r22, r17
 198:	ce 01       	movw	r24, r28
 19a:	c4 df       	rcall	.-120    	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <gb_flash_write_byte+0x3c>
 1a2:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 1a4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 1a6:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 1a8:	ce 01       	movw	r24, r28
 1aa:	b1 df       	rcall	.-158    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 1ac:	81 17       	cp	r24, r17
 1ae:	39 f0       	breq	.+14     	; 0x1be <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
 1b0:	ce 01       	movw	r24, r28
 1b2:	ad df       	rcall	.-166    	; 0x10e <gb_flash_read_byte>
 1b4:	9a e1       	ldi	r25, 0x1A	; 26
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <gb_flash_write_byte+0x54>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <gb_flash_write_byte+0x5a>
 1bc:	f7 cf       	rjmp	.-18     	; 0x1ac <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	08 95       	ret

000001c6 <gb_flash_write_byte_special>:

// Set the bank, write a single byte to the Flash address and pulse the reset pin
void gb_flash_write_byte_special(uint16_t address, uint8_t data) {
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
 1ce:	16 2f       	mov	r17, r22
	// Set bank back
	if (flashBank1CommandWrites == 1) {
 1d0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	61 f4       	brne	.+24     	; 0x1f0 <gb_flash_write_byte_special+0x2a>
		write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	91 e2       	ldi	r25, 0x21	; 33
 1e2:	7e df       	rcall	.-260    	; 0xe0 <write_8bit_data>
 1e4:	87 ec       	ldi	r24, 0xC7	; 199
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <gb_flash_write_byte_special+0x22>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <gb_flash_write_byte_special+0x28>
 1ee:	00 00       	nop
		_delay_us(50);
	}
	
	// Write
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1f0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 1f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 1f8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 1fc:	93 df       	rcall	.-218    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 1fe:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 202:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 206:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 20a:	8c df       	rcall	.-232    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 20c:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 210:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 214:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 218:	85 df       	rcall	.-246    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
 21a:	61 2f       	mov	r22, r17
 21c:	ce 01       	movw	r24, r28
 21e:	82 df       	rcall	.-252    	; 0x124 <gb_flash_write_bus_cycle>
 220:	87 ee       	ldi	r24, 0xE7	; 231
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <gb_flash_write_byte_special+0x5e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <gb_flash_write_byte_special+0x64>
 22a:	00 00       	nop
	_delay_us(250); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 22c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 22e:	14 ba       	out	0x14, r1	; 20
	
	// Pulse reset
	PORTE &= ~(1<<CS2_PIN);
 230:	3a 98       	cbi	0x07, 2	; 7
 232:	87 ec       	ldi	r24, 0xC7	; 199
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <gb_flash_write_byte_special+0x70>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <gb_flash_write_byte_special+0x76>
 23c:	00 00       	nop
	_delay_us(50);
	PORTE |= (1<<CS2_PIN);
 23e:	3a 9a       	sbi	0x07, 2	; 7
 240:	87 ec       	ldi	r24, 0xC7	; 199
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <gb_flash_write_byte_special+0x7e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <gb_flash_write_byte_special+0x84>
 24a:	00 00       	nop
	_delay_us(50);
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	08 95       	ret

00000254 <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
 262:	ff 24       	eor	r15, r15
 264:	fa 94       	dec	r15
 266:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 268:	01 e2       	ldi	r16, 0x21	; 33
 26a:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 26c:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 272:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 274:	00 00       	nop
	asm volatile("nop");
 276:	00 00       	nop
	wrPin_high;
 278:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 27a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 27e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 282:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 286:	4e df       	rcall	.-356    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 288:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 28c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 290:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 294:	47 df       	rcall	.-370    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 296:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 29a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 29e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 2a2:	40 df       	rcall	.-384    	; 0x124 <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
 2a4:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 2a6:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 2a8:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
 2aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2ae:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 2b0:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 2b2:	00 00       	nop
	asm volatile("nop");
 2b4:	00 00       	nop
	wrPin_high;
 2b6:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
 2b8:	61 2f       	mov	r22, r17
 2ba:	ce 01       	movw	r24, r28
 2bc:	33 df       	rcall	.-410    	; 0x124 <gb_flash_write_bus_cycle>
 2be:	85 e3       	ldi	r24, 0x35	; 53
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <__stack+0x61>
 2c4:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 2c6:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 2c8:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 2ca:	ce 01       	movw	r24, r28
 2cc:	20 df       	rcall	.-448    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 2ce:	81 17       	cp	r24, r17
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <__stack+0x81>
		dataVerify = gb_flash_read_byte(address);
 2d2:	ce 01       	movw	r24, r28
 2d4:	1c df       	rcall	.-456    	; 0x10e <gb_flash_read_byte>
 2d6:	9a e1       	ldi	r25, 0x1A	; 26
 2d8:	9a 95       	dec	r25
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <__stack+0x79>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <__stack+0x7f>
 2de:	f7 cf       	rjmp	.-18     	; 0x2ce <__stack+0x6f>
		_delay_us(5);
	}
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	08 95       	ret

000002ec <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
 2ec:	84 b7       	in	r24, 0x34	; 52
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
 2f2:	88 e1       	ldi	r24, 0x18	; 24
 2f4:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
 2f6:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
 2f8:	d8 de       	rcall	.-592    	; 0xaa <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN);
 2fa:	81 b3       	in	r24, 0x11	; 17
 2fc:	88 67       	ori	r24, 0x78	; 120
 2fe:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN);
 300:	32 9a       	sbi	0x06, 2	; 6
	
	// Pull ups
	PORTE |= (1<<PE0);
 302:	38 9a       	sbi	0x07, 0	; 7
	PORTD |= (1<<PD7) | (1<<PD2);
 304:	82 b3       	in	r24, 0x12	; 18
 306:	84 68       	ori	r24, 0x84	; 132
 308:	82 bb       	out	0x12, r24	; 18
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
 30a:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 30c:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
 30e:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
 310:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
 312:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
 314:	1a ba       	out	0x1a, r1	; 26
	
	// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
	cs2Pin_low;
 316:	3a 98       	cbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	80 e7       	ldi	r24, 0x70	; 112
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <setup+0x32>
 326:	00 c0       	rjmp	.+0      	; 0x328 <setup+0x3c>
 328:	00 00       	nop
	_delay_ms(50);
	cs2Pin_high;
 32a:	3a 9a       	sbi	0x07, 2	; 7
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
 32c:	93 9a       	sbi	0x12, 3	; 18
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	89 e6       	ldi	r24, 0x69	; 105
 332:	98 e1       	ldi	r25, 0x18	; 24
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <setup+0x48>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <setup+0x52>
 33e:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
 340:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
 342:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRB, TXEN); // Transmitter enable
 344:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
 346:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
 348:	78 94       	sei
 34a:	08 95       	ret

0000034c <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
 34c:	cf df       	rcall	.-98     	; 0x2ec <setup>
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
 34e:	55 24       	eor	r5, r5
 350:	53 94       	inc	r5


int main(void) {
	setup();
	
	uint32_t address = 0;
 352:	c1 2c       	mov	r12, r1
 354:	d1 2c       	mov	r13, r1
 356:	76 01       	movw	r14, r12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 358:	22 24       	eor	r2, r2
 35a:	2a 94       	dec	r2
 35c:	32 2c       	mov	r3, r2
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
			char commonChar = USART_Receive();
			if (commonChar == '1') {
				resetCommonLines = 1;
 35e:	44 24       	eor	r4, r4
 360:	43 94       	inc	r4
 362:	20 ef       	ldi	r18, 0xF0	; 240
 364:	62 2e       	mov	r6, r18
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	72 2e       	mov	r7, r18
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	52 12       	cpse	r5, r18
 36e:	01 c0       	rjmp	.+2      	; 0x372 <main+0x26>
			rd_wr_csmreq_cs2_reset();
 370:	9c de       	rcall	.-712    	; 0xaa <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
 372:	73 de       	rcall	.-794    	; 0x5a <USART_Receive>
 374:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
 378:	83 34       	cpi	r24, 0x43	; 67
 37a:	19 f4       	brne	.+6      	; 0x382 <main+0x36>
			USART_Transmit(cartMode);
 37c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 380:	60 c3       	rjmp	.+1728   	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
 382:	87 34       	cpi	r24, 0x47	; 71
 384:	11 f4       	brne	.+4      	; 0x38a <main+0x3e>
			gb_mode();
 386:	96 de       	rcall	.-724    	; 0xb4 <gb_mode>
 388:	f0 cf       	rjmp	.-32     	; 0x36a <main+0x1e>
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
 38a:	81 34       	cpi	r24, 0x41	; 65
 38c:	59 f4       	brne	.+22     	; 0x3a4 <main+0x58>
			usart_read_chars(); // Read start address
 38e:	82 de       	rcall	.-764    	; 0x94 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 390:	40 e1       	ldi	r20, 0x10	; 16
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	80 e7       	ldi	r24, 0x70	; 112
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	70 d3       	rcall	.+1760   	; 0xa7e <strtol>
 39e:	6b 01       	movw	r12, r22
 3a0:	7c 01       	movw	r14, r24
 3a2:	e3 cf       	rjmp	.-58     	; 0x36a <main+0x1e>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
 3a4:	82 35       	cpi	r24, 0x52	; 82
 3a6:	e1 f4       	brne	.+56     	; 0x3e0 <main+0x94>
			gb_mode();
 3a8:	85 de       	rcall	.-758    	; 0xb4 <gb_mode>
			receivedChar = '1';
 3aa:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 3ac:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
 3b0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
 3b4:	81 33       	cpi	r24, 0x31	; 49
 3b6:	c9 f6       	brne	.-78     	; 0x36a <main+0x1e>
				PORTD |= (1<<ACTIVITY_LED);
 3b8:	93 9a       	sbi	0x12, 3	; 18
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	d0 e0       	ldi	r29, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
 3be:	ce 01       	movw	r24, r28
 3c0:	8c 0d       	add	r24, r12
 3c2:	9d 1d       	adc	r25, r13
 3c4:	82 de       	rcall	.-764    	; 0xca <read_8bit_data>
 3c6:	4d de       	rcall	.-870    	; 0x62 <USART_Transmit>
 3c8:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 3ca:	c0 34       	cpi	r28, 0x40	; 64
 3cc:	d1 05       	cpc	r29, r1
 3ce:	b9 f7       	brne	.-18     	; 0x3be <main+0x72>
 3d0:	80 e4       	ldi	r24, 0x40	; 64
 3d2:	c8 0e       	add	r12, r24
 3d4:	d1 1c       	adc	r13, r1
 3d6:	e1 1c       	adc	r14, r1
 3d8:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 3da:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 3dc:	3e de       	rcall	.-900    	; 0x5a <USART_Receive>
 3de:	e6 cf       	rjmp	.-52     	; 0x3ac <main+0x60>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
 3e0:	87 35       	cpi	r24, 0x57	; 87
 3e2:	d9 f4       	brne	.+54     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			gb_mode();
 3e4:	67 de       	rcall	.-818    	; 0xb4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
 3e6:	80 e4       	ldi	r24, 0x40	; 64
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	3f de       	rcall	.-898    	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 3ec:	93 9a       	sbi	0x12, 3	; 18
 3ee:	00 e7       	ldi	r16, 0x70	; 112
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 3f6:	f8 01       	movw	r30, r16
 3f8:	61 91       	ld	r22, Z+
 3fa:	8f 01       	movw	r16, r30
 3fc:	ce 01       	movw	r24, r28
 3fe:	8c 0d       	add	r24, r12
 400:	9d 1d       	adc	r25, r13
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	6d de       	rcall	.-806    	; 0xe0 <write_8bit_data>
 406:	21 96       	adiw	r28, 0x01	; 1
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 408:	c0 34       	cpi	r28, 0x40	; 64
 40a:	d1 05       	cpc	r29, r1
 40c:	a1 f7       	brne	.-24     	; 0x3f6 <main+0xaa>
 40e:	f0 e4       	ldi	r31, 0x40	; 64
 410:	cf 0e       	add	r12, r31
 412:	d1 1c       	adc	r13, r1
 414:	e1 1c       	adc	r14, r1
 416:	f1 1c       	adc	r15, r1
 418:	68 c0       	rjmp	.+208    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
 41a:	82 34       	cpi	r24, 0x42	; 66
 41c:	e1 f4       	brne	.+56     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			gb_mode();
 41e:	4a de       	rcall	.-876    	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read start address
 420:	39 de       	rcall	.-910    	; 0x94 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 422:	40 e1       	ldi	r20, 0x10	; 16
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e7       	ldi	r24, 0x70	; 112
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	27 d3       	rcall	.+1614   	; 0xa7e <strtol>
 430:	4b 01       	movw	r8, r22
 432:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
 434:	12 de       	rcall	.-988    	; 0x5a <USART_Receive>
 436:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
			if (receivedChar == 'B') {
 43a:	82 34       	cpi	r24, 0x42	; 66
 43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	95 cf       	rjmp	.-214    	; 0x36a <main+0x1e>
				usart_read_chars(); // Read data
 440:	29 de       	rcall	.-942    	; 0x94 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 442:	80 e7       	ldi	r24, 0x70	; 112
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	2c d4       	rcall	.+2136   	; 0xca0 <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
 448:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	68 2f       	mov	r22, r24
 450:	c4 01       	movw	r24, r8
 452:	46 de       	rcall	.-884    	; 0xe0 <write_8bit_data>
 454:	8a cf       	rjmp	.-236    	; 0x36a <main+0x1e>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
 456:	80 35       	cpi	r24, 0x50	; 80
 458:	49 f4       	brne	.+18     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			flashWriteWePin = USART_Receive();
 45a:	ff dd       	rcall	.-1026   	; 0x5a <USART_Receive>
 45c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
 460:	81 34       	cpi	r24, 0x41	; 65
 462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 464:	82 cf       	rjmp	.-252    	; 0x36a <main+0x1e>
				DDRE |= (1<<AUDIO_PIN);
 466:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
 468:	39 9a       	sbi	0x07, 1	; 7
 46a:	7f cf       	rjmp	.-258    	; 0x36a <main+0x1e>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
 46c:	8e 34       	cpi	r24, 0x4E	; 78
 46e:	19 f4       	brne	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			flashBank1CommandWrites = 1;
 470:	40 92 63 00 	sts	0x0063, r4	; 0x800063 <flashBank1CommandWrites>
 474:	7a cf       	rjmp	.-268    	; 0x36a <main+0x1e>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
 476:	85 34       	cpi	r24, 0x45	; 69
 478:	09 f5       	brne	.+66     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 47a:	c4 e6       	ldi	r28, 0x64	; 100
 47c:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
 47e:	0a de       	rcall	.-1004   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
 480:	40 e1       	ldi	r20, 0x10	; 16
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	80 e7       	ldi	r24, 0x70	; 112
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	f8 d2       	rcall	.+1520   	; 0xa7e <strtol>
 48e:	79 83       	std	Y+1, r23	; 0x01
 490:	68 83       	st	Y, r22
				USART_Transmit(SEND_ACK);
 492:	81 e3       	ldi	r24, 0x31	; 49
 494:	e6 dd       	rcall	.-1076   	; 0x62 <USART_Transmit>
				
				usart_read_chars(); // Data
 496:	fe dd       	rcall	.-1028   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
 498:	40 e1       	ldi	r20, 0x10	; 16
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 e7       	ldi	r24, 0x70	; 112
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	ec d2       	rcall	.+1496   	; 0xa7e <strtol>
 4a6:	7b 83       	std	Y+3, r23	; 0x03
 4a8:	6a 83       	std	Y+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
 4aa:	81 e3       	ldi	r24, 0x31	; 49
 4ac:	da dd       	rcall	.-1100   	; 0x62 <USART_Transmit>
 4ae:	24 96       	adiw	r28, 0x04	; 4
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
 4b0:	80 e7       	ldi	r24, 0x70	; 112
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	8c 17       	cp	r24, r28
 4b6:	9d 07       	cpc	r25, r29
 4b8:	11 f7       	brne	.-60     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 4ba:	57 cf       	rjmp	.-338    	; 0x36a <main+0x1e>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 4bc:	86 34       	cpi	r24, 0x46	; 70
 4be:	c1 f4       	brne	.+48     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			usart_read_chars(); // Read address
 4c0:	e9 dd       	rcall	.-1070   	; 0x94 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
 4c2:	40 e1       	ldi	r20, 0x10	; 16
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	80 e7       	ldi	r24, 0x70	; 112
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	d7 d2       	rcall	.+1454   	; 0xa7e <strtol>
 4d0:	4b 01       	movw	r8, r22
 4d2:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
 4d4:	df dd       	rcall	.-1090   	; 0x94 <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
 4d6:	40 e1       	ldi	r20, 0x10	; 16
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	80 e7       	ldi	r24, 0x70	; 112
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	cd d2       	rcall	.+1434   	; 0xa7e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 4e4:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
 4e6:	c4 01       	movw	r24, r8
 4e8:	1d de       	rcall	.-966    	; 0x124 <gb_flash_write_bus_cycle>
			PORTD &= ~(1<<ACTIVITY_LED);
 4ea:	93 98       	cbi	0x12, 3	; 18
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 4ec:	81 e3       	ldi	r24, 0x31	; 49
 4ee:	a9 c2       	rjmp	.+1362   	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 4f0:	84 35       	cpi	r24, 0x54	; 84
 4f2:	49 f5       	brne	.+82     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			usart_read_bytes(64);
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	b8 dd       	rcall	.-1168   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 4fa:	93 9a       	sbi	0x12, 3	; 18
			if (flashBank1CommandWrites == 0) {
 4fc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
 500:	00 e7       	ldi	r16, 0x70	; 112
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	c0 e0       	ldi	r28, 0x00	; 0
 506:	d0 e0       	ldi	r29, 0x00	; 0
 508:	81 11       	cpse	r24, r1
 50a:	13 c0       	rjmp	.+38     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
 50c:	f8 01       	movw	r30, r16
 50e:	61 91       	ld	r22, Z+
 510:	8f 01       	movw	r16, r30
 512:	6f 3f       	cpi	r22, 0xFF	; 255
 514:	21 f0       	breq	.+8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
						gb_flash_write_byte(address, receivedBuffer[x]);
 516:	ce 01       	movw	r24, r28
 518:	8c 0d       	add	r24, r12
 51a:	9d 1d       	adc	r25, r13
 51c:	22 de       	rcall	.-956    	; 0x162 <gb_flash_write_byte>
 51e:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
 520:	c0 34       	cpi	r28, 0x40	; 64
 522:	d1 05       	cpc	r29, r1
 524:	99 f7       	brne	.-26     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 526:	78 c0       	rjmp	.+240    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 528:	21 96       	adiw	r28, 0x01	; 1
					}
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
 52a:	c0 34       	cpi	r28, 0x40	; 64
 52c:	d1 05       	cpc	r29, r1
 52e:	09 f4       	brne	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 530:	73 c0       	rjmp	.+230    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
					if (receivedBuffer[x] != 0xFF) {
 532:	f8 01       	movw	r30, r16
 534:	61 91       	ld	r22, Z+
 536:	8f 01       	movw	r16, r30
 538:	6f 3f       	cpi	r22, 0xFF	; 255
 53a:	b1 f3       	breq	.-20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
 53c:	ce 01       	movw	r24, r28
 53e:	8c 0d       	add	r24, r12
 540:	9d 1d       	adc	r25, r13
 542:	88 de       	rcall	.-752    	; 0x254 <gb_flash_write_byte_bank1_commands>
 544:	f1 cf       	rjmp	.-30     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
 546:	89 35       	cpi	r24, 0x59	; 89
 548:	09 f0       	breq	.+2      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54a:	4f c0       	rjmp	.+158    	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
			usart_read_bytes(32);
 54c:	80 e2       	ldi	r24, 0x20	; 32
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	8c dd       	rcall	.-1256   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 552:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
 554:	6a ea       	ldi	r22, 0xAA	; 170
 556:	8a ea       	ldi	r24, 0xAA	; 170
 558:	9a e0       	ldi	r25, 0x0A	; 10
 55a:	e4 dd       	rcall	.-1080   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
 55c:	65 e5       	ldi	r22, 0x55	; 85
 55e:	85 e5       	ldi	r24, 0x55	; 85
 560:	95 e0       	ldi	r25, 0x05	; 5
 562:	e0 dd       	rcall	.-1088   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
 564:	56 01       	movw	r10, r12
 566:	65 e2       	ldi	r22, 0x25	; 37
 568:	c6 01       	movw	r24, r12
 56a:	dc dd       	rcall	.-1096   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
 56c:	6f e1       	ldi	r22, 0x1F	; 31
 56e:	c6 01       	movw	r24, r12
 570:	d9 dd       	rcall	.-1102   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	25 e0       	ldi	r18, 0x05	; 5
 574:	2a 95       	dec	r18
 576:	f1 f7       	brne	.-4      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 578:	00 00       	nop
 57a:	00 e7       	ldi	r16, 0x70	; 112
 57c:	10 e0       	ldi	r17, 0x00	; 0
 57e:	c0 e0       	ldi	r28, 0x00	; 0
 580:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 582:	f8 01       	movw	r30, r16
 584:	61 91       	ld	r22, Z+
 586:	8f 01       	movw	r16, r30
 588:	ce 01       	movw	r24, r28
 58a:	8a 0d       	add	r24, r10
 58c:	9b 1d       	adc	r25, r11
 58e:	ca dd       	rcall	.-1132   	; 0x124 <gb_flash_write_bus_cycle>
 590:	21 96       	adiw	r28, 0x01	; 1
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
 592:	c0 32       	cpi	r28, 0x20	; 32
 594:	d1 05       	cpc	r29, r1
 596:	a9 f7       	brne	.-22     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 598:	f0 e2       	ldi	r31, 0x20	; 32
 59a:	cf 0e       	add	r12, r31
 59c:	d1 1c       	adc	r13, r1
 59e:	e1 1c       	adc	r14, r1
 5a0:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
 5a2:	c6 01       	movw	r24, r12
 5a4:	80 97       	sbiw	r24, 0x20	; 32
 5a6:	69 e2       	ldi	r22, 0x29	; 41
 5a8:	bd dd       	rcall	.-1158   	; 0x124 <gb_flash_write_bus_cycle>
 5aa:	8f e1       	ldi	r24, 0x1F	; 31
 5ac:	93 e0       	ldi	r25, 0x03	; 3
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5b4:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 5b6:	e6 01       	movw	r28, r12
 5b8:	21 97       	sbiw	r28, 0x01	; 1
 5ba:	ce 01       	movw	r24, r28
 5bc:	a8 dd       	rcall	.-1200   	; 0x10e <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
 5be:	18 ec       	ldi	r17, 0xC8	; 200
 5c0:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <receivedBuffer+0x1f>
 5c4:	89 17       	cp	r24, r25
 5c6:	09 f4       	brne	.+2      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c8:	60 c1       	rjmp	.+704    	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
				dataVerify = gb_flash_read_byte(address-1);
 5ca:	ce 01       	movw	r24, r28
 5cc:	a0 dd       	rcall	.-1216   	; 0x10e <gb_flash_read_byte>
 5ce:	9a e1       	ldi	r25, 0x1A	; 26
 5d0:	9a 95       	dec	r25
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d6:	11 50       	subi	r17, 0x01	; 1
				_delay_us(5);
				verifyCount++;
				if (verifyCount >= 200) {
 5d8:	99 f7       	brne	.-26     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5da:	ef ef       	ldi	r30, 0xFF	; 255
 5dc:	f9 e6       	ldi	r31, 0x69	; 105
 5de:	28 e1       	ldi	r18, 0x18	; 24
 5e0:	e1 50       	subi	r30, 0x01	; 1
 5e2:	f0 40       	sbci	r31, 0x00	; 0
 5e4:	20 40       	sbci	r18, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5e8:	17 c1       	rjmp	.+558    	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
 5ea:	8a 34       	cpi	r24, 0x4A	; 74
 5ec:	d9 f4       	brne	.+54     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
			usart_read_bytes(64);
 5ee:	80 e4       	ldi	r24, 0x40	; 64
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	3b dd       	rcall	.-1418   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 5f4:	93 9a       	sbi	0x12, 3	; 18
 5f6:	00 e7       	ldi	r16, 0x70	; 112
 5f8:	10 e0       	ldi	r17, 0x00	; 0
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
 5fc:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
 5fe:	f8 01       	movw	r30, r16
 600:	61 91       	ld	r22, Z+
 602:	8f 01       	movw	r16, r30
 604:	6f 3f       	cpi	r22, 0xFF	; 255
 606:	21 f0       	breq	.+8      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
 608:	ce 01       	movw	r24, r28
 60a:	8c 0d       	add	r24, r12
 60c:	9d 1d       	adc	r25, r13
 60e:	db dd       	rcall	.-1098   	; 0x1c6 <gb_flash_write_byte_special>
 610:	21 96       	adiw	r28, 0x01	; 1
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 612:	c0 34       	cpi	r28, 0x40	; 64
 614:	d1 05       	cpc	r29, r1
 616:	99 f7       	brne	.-26     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 618:	f0 e4       	ldi	r31, 0x40	; 64
 61a:	cf 0e       	add	r12, r31
 61c:	d1 1c       	adc	r13, r1
 61e:	e1 1c       	adc	r14, r1
 620:	f1 1c       	adc	r15, r1
 622:	33 c1       	rjmp	.+614    	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
 624:	88 35       	cpi	r24, 0x58	; 88
 626:	09 f0       	breq	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 628:	41 c0       	rjmp	.+130    	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
			usart_read_bytes(256);
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	1d dd       	rcall	.-1478   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 630:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
 632:	69 ea       	ldi	r22, 0xA9	; 169
 634:	8a ea       	ldi	r24, 0xAA	; 170
 636:	9a e0       	ldi	r25, 0x0A	; 10
 638:	75 dd       	rcall	.-1302   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
 63a:	66 e5       	ldi	r22, 0x56	; 86
 63c:	85 e5       	ldi	r24, 0x55	; 85
 63e:	95 e0       	ldi	r25, 0x05	; 5
 640:	71 dd       	rcall	.-1310   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
 642:	56 01       	movw	r10, r12
 644:	66 e2       	ldi	r22, 0x26	; 38
 646:	c6 01       	movw	r24, r12
 648:	6d dd       	rcall	.-1318   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
 64a:	6f ef       	ldi	r22, 0xFF	; 255
 64c:	c6 01       	movw	r24, r12
 64e:	6a dd       	rcall	.-1324   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 650:	87 ec       	ldi	r24, 0xC7	; 199
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 658:	00 c0       	rjmp	.+0      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 65a:	00 00       	nop
 65c:	00 e7       	ldi	r16, 0x70	; 112
 65e:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 660:	c0 e0       	ldi	r28, 0x00	; 0
 662:	d0 e0       	ldi	r29, 0x00	; 0
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 664:	f8 01       	movw	r30, r16
 666:	61 91       	ld	r22, Z+
 668:	8f 01       	movw	r16, r30
 66a:	ce 01       	movw	r24, r28
 66c:	8a 0d       	add	r24, r10
 66e:	9b 1d       	adc	r25, r11
 670:	59 dd       	rcall	.-1358   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 672:	21 96       	adiw	r28, 0x01	; 1
 674:	c1 15       	cp	r28, r1
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	df 07       	cpc	r29, r31
 67a:	a1 f7       	brne	.-24     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 67c:	2f ef       	ldi	r18, 0xFF	; 255
 67e:	d2 1a       	sub	r13, r18
 680:	e2 0a       	sbc	r14, r18
 682:	f2 0a       	sbc	r15, r18
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
 684:	c6 01       	movw	r24, r12
 686:	9a 95       	dec	r25
 688:	6a e2       	ldi	r22, 0x2A	; 42
 68a:	4c dd       	rcall	.-1384   	; 0x124 <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 68c:	e6 01       	movw	r28, r12
 68e:	21 97       	sbiw	r28, 0x01	; 1
 690:	ce 01       	movw	r24, r28
 692:	3d dd       	rcall	.-1414   	; 0x10e <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
 694:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <receivedBuffer+0xff>
 698:	89 17       	cp	r24, r25
 69a:	09 f4       	brne	.+2      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 69c:	f6 c0       	rjmp	.+492    	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
				dataVerify = gb_flash_read_byte(address-1);
 69e:	ce 01       	movw	r24, r28
 6a0:	36 dd       	rcall	.-1428   	; 0x10e <gb_flash_read_byte>
 6a2:	9a e1       	ldi	r25, 0x1A	; 26
 6a4:	9a 95       	dec	r25
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6aa:	f4 cf       	rjmp	.-24     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
 6ac:	8a 35       	cpi	r24, 0x5A	; 90
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6b0:	b6 c0       	rjmp	.+364    	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
			usart_read_bytes(128);
 6b2:	80 e8       	ldi	r24, 0x80	; 128
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	d9 dc       	rcall	.-1614   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 6b8:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
 6ba:	69 e0       	ldi	r22, 0x09	; 9
 6bc:	80 e2       	ldi	r24, 0x20	; 32
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	31 dd       	rcall	.-1438   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
 6c2:	6a ea       	ldi	r22, 0xAA	; 170
 6c4:	81 e2       	ldi	r24, 0x21	; 33
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	2d dd       	rcall	.-1446   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
 6ca:	65 e5       	ldi	r22, 0x55	; 85
 6cc:	82 e2       	ldi	r24, 0x22	; 34
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	29 dd       	rcall	.-1454   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 6d2:	65 ea       	ldi	r22, 0xA5	; 165
 6d4:	8f e3       	ldi	r24, 0x3F	; 63
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	25 dd       	rcall	.-1462   	; 0x124 <gb_flash_write_bus_cycle>
 6da:	ea e1       	ldi	r30, 0x1A	; 26
 6dc:	ea 95       	dec	r30
 6de:	f1 f7       	brne	.-4      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
 6e2:	61 e1       	ldi	r22, 0x11	; 17
 6e4:	80 e2       	ldi	r24, 0x20	; 32
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	1d dd       	rcall	.-1478   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 6ea:	65 ea       	ldi	r22, 0xA5	; 165
 6ec:	8f e3       	ldi	r24, 0x3F	; 63
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	19 dd       	rcall	.-1486   	; 0x124 <gb_flash_write_bus_cycle>
 6f2:	fa e1       	ldi	r31, 0x1A	; 26
 6f4:	fa 95       	dec	r31
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	91 e2       	ldi	r25, 0x21	; 33
 700:	11 dd       	rcall	.-1502   	; 0x124 <gb_flash_write_bus_cycle>
 702:	2a e1       	ldi	r18, 0x1A	; 26
 704:	2a 95       	dec	r18
 706:	f1 f7       	brne	.-4      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 708:	00 c0       	rjmp	.+0      	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
 70a:	6f e0       	ldi	r22, 0x0F	; 15
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	09 dd       	rcall	.-1518   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 712:	65 e5       	ldi	r22, 0x55	; 85
 714:	85 e2       	ldi	r24, 0x25	; 37
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	05 dd       	rcall	.-1526   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 71a:	65 e5       	ldi	r22, 0x55	; 85
 71c:	86 e2       	ldi	r24, 0x26	; 38
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	01 dd       	rcall	.-1534   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
 722:	6a ea       	ldi	r22, 0xAA	; 170
 724:	87 e2       	ldi	r24, 0x27	; 39
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	fd dc       	rcall	.-1542   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 72a:	65 ea       	ldi	r22, 0xA5	; 165
 72c:	8f e3       	ldi	r24, 0x3F	; 63
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	f9 dc       	rcall	.-1550   	; 0x124 <gb_flash_write_bus_cycle>
 732:	8a e1       	ldi	r24, 0x1A	; 26
 734:	8a 95       	dec	r24
 736:	f1 f7       	brne	.-4      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 738:	00 c0       	rjmp	.+0      	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 73a:	6f e0       	ldi	r22, 0x0F	; 15
 73c:	80 e2       	ldi	r24, 0x20	; 32
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	f1 dc       	rcall	.-1566   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
 742:	6a e2       	ldi	r22, 0x2A	; 42
 744:	85 e2       	ldi	r24, 0x25	; 37
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	ed dc       	rcall	.-1574   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
 74a:	6a ea       	ldi	r22, 0xAA	; 170
 74c:	86 e2       	ldi	r24, 0x26	; 38
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	e9 dc       	rcall	.-1582   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
 752:	65 e5       	ldi	r22, 0x55	; 85
 754:	87 e2       	ldi	r24, 0x27	; 39
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	e5 dc       	rcall	.-1590   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 75a:	65 ea       	ldi	r22, 0xA5	; 165
 75c:	8f e3       	ldi	r24, 0x3F	; 63
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	e1 dc       	rcall	.-1598   	; 0x124 <gb_flash_write_bus_cycle>
 762:	9a e1       	ldi	r25, 0x1A	; 26
 764:	9a 95       	dec	r25
 766:	f1 f7       	brne	.-4      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
 768:	00 c0       	rjmp	.+0      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 76a:	6f e0       	ldi	r22, 0x0F	; 15
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	d9 dc       	rcall	.-1614   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 772:	65 e5       	ldi	r22, 0x55	; 85
 774:	85 e2       	ldi	r24, 0x25	; 37
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	d5 dc       	rcall	.-1622   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 77a:	65 e5       	ldi	r22, 0x55	; 85
 77c:	86 e2       	ldi	r24, 0x26	; 38
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	d1 dc       	rcall	.-1630   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
 782:	60 ea       	ldi	r22, 0xA0	; 160
 784:	87 e2       	ldi	r24, 0x27	; 39
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	cd dc       	rcall	.-1638   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 78a:	65 ea       	ldi	r22, 0xA5	; 165
 78c:	8f e3       	ldi	r24, 0x3F	; 63
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	c9 dc       	rcall	.-1646   	; 0x124 <gb_flash_write_bus_cycle>
 792:	ea e1       	ldi	r30, 0x1A	; 26
 794:	ea 95       	dec	r30
 796:	f1 f7       	brne	.-4      	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
 798:	00 c0       	rjmp	.+0      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	91 e2       	ldi	r25, 0x21	; 33
 7a4:	9d dc       	rcall	.-1734   	; 0xe0 <write_8bit_data>
 7a6:	fa e1       	ldi	r31, 0x1A	; 26
 7a8:	fa 95       	dec	r31
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
 7ae:	60 e1       	ldi	r22, 0x10	; 16
 7b0:	80 e2       	ldi	r24, 0x20	; 32
 7b2:	91 e0       	ldi	r25, 0x01	; 1
 7b4:	b7 dc       	rcall	.-1682   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 7b6:	65 ea       	ldi	r22, 0xA5	; 165
 7b8:	8f e3       	ldi	r24, 0x3F	; 63
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	b3 dc       	rcall	.-1690   	; 0x124 <gb_flash_write_bus_cycle>
 7be:	2a e1       	ldi	r18, 0x1A	; 26
 7c0:	2a 95       	dec	r18
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
 7c6:	68 e0       	ldi	r22, 0x08	; 8
 7c8:	80 e2       	ldi	r24, 0x20	; 32
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	ab dc       	rcall	.-1706   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 7ce:	65 ea       	ldi	r22, 0xA5	; 165
 7d0:	8f e3       	ldi	r24, 0x3F	; 63
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	a7 dc       	rcall	.-1714   	; 0x124 <gb_flash_write_bus_cycle>
 7d6:	8a e1       	ldi	r24, 0x1A	; 26
 7d8:	8a 95       	dec	r24
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
 7de:	c0 e7       	ldi	r28, 0x70	; 112
 7e0:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
 7e2:	6c 16       	cp	r6, r28
 7e4:	7d 06       	cpc	r7, r29
 7e6:	69 f0       	breq	.+26     	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 7e8:	69 91       	ld	r22, Y+
 7ea:	c6 01       	movw	r24, r12
 7ec:	9b dc       	rcall	.-1738   	; 0x124 <gb_flash_write_bus_cycle>
 7ee:	9a e1       	ldi	r25, 0x1A	; 26
 7f0:	9a 95       	dec	r25
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
				_delay_us(5);
				address++;
 7f6:	ef ef       	ldi	r30, 0xFF	; 255
 7f8:	ce 1a       	sub	r12, r30
 7fa:	de 0a       	sbc	r13, r30
 7fc:	ee 0a       	sbc	r14, r30
 7fe:	fe 0a       	sbc	r15, r30
 800:	f0 cf       	rjmp	.-32     	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
 802:	6f ef       	ldi	r22, 0xFF	; 255
 804:	d7 01       	movw	r26, r14
 806:	c6 01       	movw	r24, r12
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	a1 09       	sbc	r26, r1
 80c:	b1 09       	sbc	r27, r1
 80e:	8a dc       	rcall	.-1772   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 810:	8f e3       	ldi	r24, 0x3F	; 63
 812:	9c e9       	ldi	r25, 0x9C	; 156
 814:	01 97       	sbiw	r24, 0x01	; 1
 816:	f1 f7       	brne	.-4      	; 0x814 <__LOCK_REGION_LENGTH__+0x414>
 818:	00 c0       	rjmp	.+0      	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
 81a:	00 00       	nop
 81c:	36 c0       	rjmp	.+108    	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		// Intel chips such as 28F640J5
		else if (receivedChar == GB_FLASH_WRITE_INTEL_BUFFERED_32BYTE) {
 81e:	89 37       	cpi	r24, 0x79	; 121
 820:	b1 f5       	brne	.+108    	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
			usart_read_bytes(32);
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	21 dc       	rcall	.-1982   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 828:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(address, 0xE8);
 82a:	86 01       	movw	r16, r12
 82c:	68 ee       	ldi	r22, 0xE8	; 232
 82e:	c6 01       	movw	r24, r12
 830:	79 dc       	rcall	.-1806   	; 0x124 <gb_flash_write_bus_cycle>
			
			// Wait until ready
			//do { status = gb_flash_read_byte(address); } while(status != 0x80);
			while (gb_flash_read_byte(address) != 0x80);
 832:	c8 01       	movw	r24, r16
 834:	6c dc       	rcall	.-1832   	; 0x10e <gb_flash_read_byte>
 836:	80 38       	cpi	r24, 0x80	; 128
 838:	e1 f7       	brne	.-8      	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
			
			// Set buffer size
			gb_flash_write_bus_cycle(address, 0x1F);
 83a:	6f e1       	ldi	r22, 0x1F	; 31
 83c:	c8 01       	movw	r24, r16
 83e:	72 dc       	rcall	.-1820   	; 0x124 <gb_flash_write_bus_cycle>
 840:	80 e7       	ldi	r24, 0x70	; 112
 842:	a8 2e       	mov	r10, r24
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	b8 2e       	mov	r11, r24
 848:	c0 e0       	ldi	r28, 0x00	; 0
 84a:	d0 e0       	ldi	r29, 0x00	; 0
			
			// Write data to buffer
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 84c:	f5 01       	movw	r30, r10
 84e:	61 91       	ld	r22, Z+
 850:	5f 01       	movw	r10, r30
 852:	ce 01       	movw	r24, r28
 854:	80 0f       	add	r24, r16
 856:	91 1f       	adc	r25, r17
 858:	65 dc       	rcall	.-1846   	; 0x124 <gb_flash_write_bus_cycle>
 85a:	21 96       	adiw	r28, 0x01	; 1
			
			// Set buffer size
			gb_flash_write_bus_cycle(address, 0x1F);
			
			// Write data to buffer
			for (uint8_t x = 0; x < 32; x++) {
 85c:	c0 32       	cpi	r28, 0x20	; 32
 85e:	d1 05       	cpc	r29, r1
 860:	a9 f7       	brne	.-22     	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
 862:	f0 e2       	ldi	r31, 0x20	; 32
 864:	cf 0e       	add	r12, r31
 866:	d1 1c       	adc	r13, r1
 868:	e1 1c       	adc	r14, r1
 86a:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0xD0);
 86c:	e6 01       	movw	r28, r12
 86e:	a0 97       	sbiw	r28, 0x20	; 32
 870:	60 ed       	ldi	r22, 0xD0	; 208
 872:	ce 01       	movw	r24, r28
 874:	57 dc       	rcall	.-1874   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 876:	8f e0       	ldi	r24, 0x0F	; 15
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <__LOCK_REGION_LENGTH__+0x480>
 880:	00 00       	nop
			_delay_us(196);
			
			// Wait until ready
			//do { status = gb_flash_read_byte(address-32); } while(status != 0x80);
			while (gb_flash_read_byte(address-32) != 0x80);
 882:	ce 01       	movw	r24, r28
 884:	44 dc       	rcall	.-1912   	; 0x10e <gb_flash_read_byte>
 886:	80 38       	cpi	r24, 0x80	; 128
 888:	e1 f7       	brne	.-8      	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 88a:	81 e3       	ldi	r24, 0x31	; 49
 88c:	c3 c0       	rjmp	.+390    	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 88e:	89 34       	cpi	r24, 0x49	; 73
 890:	19 f0       	breq	.+6      	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
 892:	8f 34       	cpi	r24, 0x4F	; 79
 894:	09 f0       	breq	.+2      	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
 896:	50 c0       	rjmp	.+160    	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
			char portChar = USART_Receive();
 898:	e0 db       	rcall	.-2112   	; 0x5a <USART_Receive>
 89a:	c8 2f       	mov	r28, r24
			usart_read_chars();
 89c:	fb db       	rcall	.-2058   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 89e:	40 e1       	ldi	r20, 0x10	; 16
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	80 e7       	ldi	r24, 0x70	; 112
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	e9 d0       	rcall	.+466    	; 0xa7e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 8ac:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
 8ae:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
 8b2:	89 34       	cpi	r24, 0x49	; 73
 8b4:	f9 f4       	brne	.+62     	; 0x8f4 <__LOCK_REGION_LENGTH__+0x4f4>
				if (portChar == 'A') {
 8b6:	c1 34       	cpi	r28, 0x41	; 65
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <__LOCK_REGION_LENGTH__+0x4c2>
					DDRA &= ~(setValue);
 8ba:	8a b3       	in	r24, 0x1a	; 26
 8bc:	60 95       	com	r22
 8be:	68 23       	and	r22, r24
 8c0:	20 c0       	rjmp	.+64     	; 0x902 <__LOCK_REGION_LENGTH__+0x502>
				}
				else if (portChar == 'B') {
 8c2:	c2 34       	cpi	r28, 0x42	; 66
 8c4:	21 f4       	brne	.+8      	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
					DDRB &= ~(setValue);
 8c6:	87 b3       	in	r24, 0x17	; 23
 8c8:	60 95       	com	r22
 8ca:	68 23       	and	r22, r24
 8cc:	20 c0       	rjmp	.+64     	; 0x90e <__LOCK_REGION_LENGTH__+0x50e>
				}
				else if (portChar == 'C') {
 8ce:	c3 34       	cpi	r28, 0x43	; 67
 8d0:	21 f4       	brne	.+8      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
					DDRC &= ~(setValue);
 8d2:	84 b3       	in	r24, 0x14	; 20
 8d4:	60 95       	com	r22
 8d6:	68 23       	and	r22, r24
 8d8:	20 c0       	rjmp	.+64     	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
				}
				else if (portChar == 'D') {
 8da:	c4 34       	cpi	r28, 0x44	; 68
 8dc:	21 f4       	brne	.+8      	; 0x8e6 <__LOCK_REGION_LENGTH__+0x4e6>
					DDRD &= ~(setValue);
 8de:	81 b3       	in	r24, 0x11	; 17
 8e0:	60 95       	com	r22
 8e2:	68 23       	and	r22, r24
 8e4:	20 c0       	rjmp	.+64     	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
				}
				else if (portChar == 'E') {
 8e6:	c5 34       	cpi	r28, 0x45	; 69
 8e8:	09 f0       	breq	.+2      	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
 8ea:	95 c0       	rjmp	.+298    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
					DDRE &= ~(setValue);
 8ec:	86 b1       	in	r24, 0x06	; 6
 8ee:	60 95       	com	r22
 8f0:	68 23       	and	r22, r24
 8f2:	20 c0       	rjmp	.+64     	; 0x934 <__LOCK_REGION_LENGTH__+0x534>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
 8f4:	8f 34       	cpi	r24, 0x4F	; 79
 8f6:	09 f0       	breq	.+2      	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
 8f8:	8e c0       	rjmp	.+284    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				if (portChar == 'A') {
 8fa:	c1 34       	cpi	r28, 0x41	; 65
 8fc:	21 f4       	brne	.+8      	; 0x906 <__LOCK_REGION_LENGTH__+0x506>
					DDRA |= (setValue);
 8fe:	8a b3       	in	r24, 0x1a	; 26
 900:	68 2b       	or	r22, r24
 902:	6a bb       	out	0x1a, r22	; 26
 904:	88 c0       	rjmp	.+272    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				}
				else if (portChar == 'B') {
 906:	c2 34       	cpi	r28, 0x42	; 66
 908:	21 f4       	brne	.+8      	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
					DDRB |= (setValue);
 90a:	87 b3       	in	r24, 0x17	; 23
 90c:	68 2b       	or	r22, r24
 90e:	67 bb       	out	0x17, r22	; 23
 910:	82 c0       	rjmp	.+260    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				}
				else if (portChar == 'C') {
 912:	c3 34       	cpi	r28, 0x43	; 67
 914:	21 f4       	brne	.+8      	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
					DDRC |= (setValue);
 916:	84 b3       	in	r24, 0x14	; 20
 918:	68 2b       	or	r22, r24
 91a:	64 bb       	out	0x14, r22	; 20
 91c:	7c c0       	rjmp	.+248    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				}
				else if (portChar == 'D') {
 91e:	c4 34       	cpi	r28, 0x44	; 68
 920:	21 f4       	brne	.+8      	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
					DDRD |= (setValue);
 922:	81 b3       	in	r24, 0x11	; 17
 924:	68 2b       	or	r22, r24
 926:	61 bb       	out	0x11, r22	; 17
 928:	76 c0       	rjmp	.+236    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				}
				else if (portChar == 'E') {
 92a:	c5 34       	cpi	r28, 0x45	; 69
 92c:	09 f0       	breq	.+2      	; 0x930 <__LOCK_REGION_LENGTH__+0x530>
 92e:	73 c0       	rjmp	.+230    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
					DDRE |= (setValue);
 930:	86 b1       	in	r24, 0x06	; 6
 932:	68 2b       	or	r22, r24
 934:	66 b9       	out	0x06, r22	; 6
 936:	6f c0       	rjmp	.+222    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
 938:	8c 34       	cpi	r24, 0x4C	; 76
 93a:	51 f5       	brne	.+84     	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
			char portChar = USART_Receive();			
 93c:	8e db       	rcall	.-2276   	; 0x5a <USART_Receive>
 93e:	c8 2f       	mov	r28, r24
			usart_read_chars();
 940:	a9 db       	rcall	.-2222   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 942:	40 e1       	ldi	r20, 0x10	; 16
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	80 e7       	ldi	r24, 0x70	; 112
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	97 d0       	rcall	.+302    	; 0xa7e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 950:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 952:	c1 34       	cpi	r28, 0x41	; 65
 954:	21 f4       	brne	.+8      	; 0x95e <__LOCK_REGION_LENGTH__+0x55e>
				PORTA &= ~(setValue);
 956:	8b b3       	in	r24, 0x1b	; 27
 958:	60 95       	com	r22
 95a:	68 23       	and	r22, r24
 95c:	2a c0       	rjmp	.+84     	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
			}
			else if (portChar == 'B') {
 95e:	c2 34       	cpi	r28, 0x42	; 66
 960:	21 f4       	brne	.+8      	; 0x96a <__LOCK_REGION_LENGTH__+0x56a>
				PORTB &= ~(setValue);
 962:	88 b3       	in	r24, 0x18	; 24
 964:	60 95       	com	r22
 966:	68 23       	and	r22, r24
 968:	2a c0       	rjmp	.+84     	; 0x9be <__LOCK_REGION_LENGTH__+0x5be>
			}
			else if (portChar == 'C') {
 96a:	c3 34       	cpi	r28, 0x43	; 67
 96c:	21 f4       	brne	.+8      	; 0x976 <__LOCK_REGION_LENGTH__+0x576>
				PORTC &= ~(setValue);
 96e:	85 b3       	in	r24, 0x15	; 21
 970:	60 95       	com	r22
 972:	68 23       	and	r22, r24
 974:	2a c0       	rjmp	.+84     	; 0x9ca <__LOCK_REGION_LENGTH__+0x5ca>
			}
			else if (portChar == 'D') {
 976:	c4 34       	cpi	r28, 0x44	; 68
 978:	21 f4       	brne	.+8      	; 0x982 <__LOCK_REGION_LENGTH__+0x582>
				PORTD &= ~(setValue);
 97a:	82 b3       	in	r24, 0x12	; 18
 97c:	60 95       	com	r22
 97e:	68 23       	and	r22, r24
 980:	2a c0       	rjmp	.+84     	; 0x9d6 <__LOCK_REGION_LENGTH__+0x5d6>
			}
			else if (portChar == 'E') {
 982:	c5 34       	cpi	r28, 0x45	; 69
 984:	09 f0       	breq	.+2      	; 0x988 <__LOCK_REGION_LENGTH__+0x588>
 986:	47 c0       	rjmp	.+142    	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				PORTE &= ~(setValue);
 988:	87 b1       	in	r24, 0x07	; 7
 98a:	60 95       	com	r22
 98c:	68 23       	and	r22, r24
 98e:	29 c0       	rjmp	.+82     	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
 990:	88 34       	cpi	r24, 0x48	; 72
 992:	49 f5       	brne	.+82     	; 0x9e6 <__LOCK_REGION_LENGTH__+0x5e6>
			char portChar = USART_Receive();			
 994:	62 db       	rcall	.-2364   	; 0x5a <USART_Receive>
 996:	c8 2f       	mov	r28, r24
			usart_read_chars();
 998:	7d db       	rcall	.-2310   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 99a:	40 e1       	ldi	r20, 0x10	; 16
 99c:	50 e0       	ldi	r21, 0x00	; 0
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	80 e7       	ldi	r24, 0x70	; 112
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	6b d0       	rcall	.+214    	; 0xa7e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 9a8:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 9aa:	c1 34       	cpi	r28, 0x41	; 65
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <__LOCK_REGION_LENGTH__+0x5b6>
				PORTA |= (setValue);
 9ae:	8b b3       	in	r24, 0x1b	; 27
 9b0:	68 2b       	or	r22, r24
 9b2:	6b bb       	out	0x1b, r22	; 27
 9b4:	30 c0       	rjmp	.+96     	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
			}
			else if (portChar == 'B') {
 9b6:	c2 34       	cpi	r28, 0x42	; 66
 9b8:	21 f4       	brne	.+8      	; 0x9c2 <__LOCK_REGION_LENGTH__+0x5c2>
				PORTB |= (setValue);
 9ba:	88 b3       	in	r24, 0x18	; 24
 9bc:	68 2b       	or	r22, r24
 9be:	68 bb       	out	0x18, r22	; 24
 9c0:	2a c0       	rjmp	.+84     	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
			}
			else if (portChar == 'C') {
 9c2:	c3 34       	cpi	r28, 0x43	; 67
 9c4:	21 f4       	brne	.+8      	; 0x9ce <__LOCK_REGION_LENGTH__+0x5ce>
				PORTC |= (setValue);
 9c6:	85 b3       	in	r24, 0x15	; 21
 9c8:	68 2b       	or	r22, r24
 9ca:	65 bb       	out	0x15, r22	; 21
 9cc:	24 c0       	rjmp	.+72     	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
			}
			else if (portChar == 'D') {
 9ce:	c4 34       	cpi	r28, 0x44	; 68
 9d0:	21 f4       	brne	.+8      	; 0x9da <__LOCK_REGION_LENGTH__+0x5da>
				PORTD |= (setValue);
 9d2:	82 b3       	in	r24, 0x12	; 18
 9d4:	68 2b       	or	r22, r24
 9d6:	62 bb       	out	0x12, r22	; 18
 9d8:	1e c0       	rjmp	.+60     	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
			}
			else if (portChar == 'E') {
 9da:	c5 34       	cpi	r28, 0x45	; 69
 9dc:	e1 f4       	brne	.+56     	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				PORTE |= (setValue);
 9de:	87 b1       	in	r24, 0x07	; 7
 9e0:	68 2b       	or	r22, r24
 9e2:	67 b9       	out	0x07, r22	; 7
 9e4:	18 c0       	rjmp	.+48     	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
 9e6:	84 34       	cpi	r24, 0x44	; 68
 9e8:	c1 f4       	brne	.+48     	; 0xa1a <__LOCK_REGION_LENGTH__+0x61a>
			char portChar = USART_Receive();			
 9ea:	37 db       	rcall	.-2450   	; 0x5a <USART_Receive>
			
			PORTD |= (1<<ACTIVITY_LED);
 9ec:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 9ee:	81 34       	cpi	r24, 0x41	; 65
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__LOCK_REGION_LENGTH__+0x5f6>
				USART_Transmit(PINA);
 9f2:	89 b3       	in	r24, 0x19	; 25
 9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
			}
			else if (portChar == 'B') {
 9f6:	82 34       	cpi	r24, 0x42	; 66
 9f8:	11 f4       	brne	.+4      	; 0x9fe <__LOCK_REGION_LENGTH__+0x5fe>
				USART_Transmit(PINB);
 9fa:	86 b3       	in	r24, 0x16	; 22
 9fc:	0b c0       	rjmp	.+22     	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
			}
			else if (portChar == 'C') {
 9fe:	83 34       	cpi	r24, 0x43	; 67
 a00:	11 f4       	brne	.+4      	; 0xa06 <__LOCK_REGION_LENGTH__+0x606>
				USART_Transmit(PINC);
 a02:	83 b3       	in	r24, 0x13	; 19
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
			}
			else if (portChar == 'D') {
 a06:	84 34       	cpi	r24, 0x44	; 68
 a08:	11 f4       	brne	.+4      	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
				USART_Transmit(PIND);
 a0a:	80 b3       	in	r24, 0x10	; 16
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
			}
			else if (portChar == 'E') {
 a0e:	85 34       	cpi	r24, 0x45	; 69
 a10:	11 f4       	brne	.+4      	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
				USART_Transmit(PINE);
 a12:	85 b1       	in	r24, 0x05	; 5
 a14:	26 db       	rcall	.-2484   	; 0x62 <USART_Transmit>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
 a16:	93 98       	cbi	0x12, 3	; 18
 a18:	a8 cc       	rjmp	.-1712   	; 0x36a <main+0x1e>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
 a1a:	8d 34       	cpi	r24, 0x4D	; 77
 a1c:	59 f4       	brne	.+22     	; 0xa34 <__LOCK_REGION_LENGTH__+0x634>
			char commonChar = USART_Receive();
 a1e:	1d db       	rcall	.-2502   	; 0x5a <USART_Receive>
			if (commonChar == '1') {
 a20:	81 33       	cpi	r24, 0x31	; 49
 a22:	19 f4       	brne	.+6      	; 0xa2a <__LOCK_REGION_LENGTH__+0x62a>
				resetCommonLines = 1;
 a24:	55 24       	eor	r5, r5
 a26:	53 94       	inc	r5
 a28:	a3 cc       	rjmp	.-1722   	; 0x370 <main+0x24>
			}
			else if (commonChar == '0') {
 a2a:	80 33       	cpi	r24, 0x30	; 48
 a2c:	09 f0       	breq	.+2      	; 0xa30 <__LOCK_REGION_LENGTH__+0x630>
 a2e:	9d cc       	rjmp	.-1734   	; 0x36a <main+0x1e>
				resetCommonLines = 0;
 a30:	51 2c       	mov	r5, r1
 a32:	9f cc       	rjmp	.-1730   	; 0x372 <main+0x26>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
 a34:	88 36       	cpi	r24, 0x68	; 104
 a36:	11 f4       	brne	.+4      	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
			USART_Transmit(PCB_VERSION);
 a38:	84 e6       	ldi	r24, 0x64	; 100
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
 a3c:	86 35       	cpi	r24, 0x56	; 86
 a3e:	19 f4       	brne	.+6      	; 0xa46 <__LOCK_REGION_LENGTH__+0x646>
			USART_Transmit(FIRMWARE_VERSION);
 a40:	81 e1       	ldi	r24, 0x11	; 17
 a42:	0f db       	rcall	.-2530   	; 0x62 <USART_Transmit>
 a44:	92 cc       	rjmp	.-1756   	; 0x36a <main+0x1e>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
 a46:	8a 32       	cpi	r24, 0x2A	; 42
 a48:	09 f0       	breq	.+2      	; 0xa4c <__LOCK_REGION_LENGTH__+0x64c>
 a4a:	8f cc       	rjmp	.-1762   	; 0x36a <main+0x1e>
			usart_read_chars();
 a4c:	23 db       	rcall	.-2490   	; 0x94 <usart_read_chars>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 a4e:	40 e1       	ldi	r20, 0x10	; 16
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	70 e0       	ldi	r23, 0x00	; 0
 a56:	80 e7       	ldi	r24, 0x70	; 112
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	11 d0       	rcall	.+34     	; 0xa7e <strtol>
			if (resetValue == RESET_VALUE) {
 a5c:	61 3e       	cpi	r22, 0xE1	; 225
 a5e:	75 4e       	sbci	r23, 0xE5	; 229
 a60:	87 40       	sbci	r24, 0x07	; 7
 a62:	91 05       	cpc	r25, r1
 a64:	09 f0       	breq	.+2      	; 0xa68 <__LOCK_REGION_LENGTH__+0x668>
 a66:	81 cc       	rjmp	.-1790   	; 0x36a <main+0x1e>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
 a68:	84 b7       	in	r24, 0x34	; 52
 a6a:	87 7f       	andi	r24, 0xF7	; 247
 a6c:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
 a6e:	f8 e1       	ldi	r31, 0x18	; 24
 a70:	f1 bd       	out	0x21, r31	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
 a72:	2c e0       	ldi	r18, 0x0C	; 12
 a74:	21 bd       	out	0x21, r18	; 33
 a76:	c1 01       	movw	r24, r2
 a78:	01 97       	sbiw	r24, 0x01	; 1
 a7a:	f1 f7       	brne	.-4      	; 0xa78 <__LOCK_REGION_LENGTH__+0x678>
 a7c:	76 cc       	rjmp	.-1812   	; 0x36a <main+0x1e>

00000a7e <strtol>:
 a7e:	a0 e0       	ldi	r26, 0x00	; 0
 a80:	b0 e0       	ldi	r27, 0x00	; 0
 a82:	e4 e4       	ldi	r30, 0x44	; 68
 a84:	f5 e0       	ldi	r31, 0x05	; 5
 a86:	78 c1       	rjmp	.+752    	; 0xd78 <__prologue_saves__+0x2>
 a88:	5c 01       	movw	r10, r24
 a8a:	6b 01       	movw	r12, r22
 a8c:	7a 01       	movw	r14, r20
 a8e:	61 15       	cp	r22, r1
 a90:	71 05       	cpc	r23, r1
 a92:	19 f0       	breq	.+6      	; 0xa9a <strtol+0x1c>
 a94:	fb 01       	movw	r30, r22
 a96:	91 83       	std	Z+1, r25	; 0x01
 a98:	80 83       	st	Z, r24
 a9a:	e1 14       	cp	r14, r1
 a9c:	f1 04       	cpc	r15, r1
 a9e:	29 f0       	breq	.+10     	; 0xaaa <strtol+0x2c>
 aa0:	c7 01       	movw	r24, r14
 aa2:	02 97       	sbiw	r24, 0x02	; 2
 aa4:	83 97       	sbiw	r24, 0x23	; 35
 aa6:	08 f0       	brcs	.+2      	; 0xaaa <strtol+0x2c>
 aa8:	e2 c0       	rjmp	.+452    	; 0xc6e <strtol+0x1f0>
 aaa:	e5 01       	movw	r28, r10
 aac:	21 96       	adiw	r28, 0x01	; 1
 aae:	f5 01       	movw	r30, r10
 ab0:	10 81       	ld	r17, Z
 ab2:	81 2f       	mov	r24, r17
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	11 d1       	rcall	.+546    	; 0xcda <isspace>
 ab8:	89 2b       	or	r24, r25
 aba:	11 f0       	breq	.+4      	; 0xac0 <strtol+0x42>
 abc:	5e 01       	movw	r10, r28
 abe:	f5 cf       	rjmp	.-22     	; 0xaaa <strtol+0x2c>
 ac0:	1d 32       	cpi	r17, 0x2D	; 45
 ac2:	29 f4       	brne	.+10     	; 0xace <strtol+0x50>
 ac4:	21 96       	adiw	r28, 0x01	; 1
 ac6:	f5 01       	movw	r30, r10
 ac8:	11 81       	ldd	r17, Z+1	; 0x01
 aca:	01 e0       	ldi	r16, 0x01	; 1
 acc:	07 c0       	rjmp	.+14     	; 0xadc <strtol+0x5e>
 ace:	1b 32       	cpi	r17, 0x2B	; 43
 ad0:	21 f4       	brne	.+8      	; 0xada <strtol+0x5c>
 ad2:	e5 01       	movw	r28, r10
 ad4:	22 96       	adiw	r28, 0x02	; 2
 ad6:	f5 01       	movw	r30, r10
 ad8:	11 81       	ldd	r17, Z+1	; 0x01
 ada:	00 e0       	ldi	r16, 0x00	; 0
 adc:	e1 14       	cp	r14, r1
 ade:	f1 04       	cpc	r15, r1
 ae0:	09 f1       	breq	.+66     	; 0xb24 <strtol+0xa6>
 ae2:	f0 e1       	ldi	r31, 0x10	; 16
 ae4:	ef 16       	cp	r14, r31
 ae6:	f1 04       	cpc	r15, r1
 ae8:	29 f4       	brne	.+10     	; 0xaf4 <strtol+0x76>
 aea:	3e c0       	rjmp	.+124    	; 0xb68 <strtol+0xea>
 aec:	10 e3       	ldi	r17, 0x30	; 48
 aee:	e1 14       	cp	r14, r1
 af0:	f1 04       	cpc	r15, r1
 af2:	21 f1       	breq	.+72     	; 0xb3c <strtol+0xbe>
 af4:	28 e0       	ldi	r18, 0x08	; 8
 af6:	e2 16       	cp	r14, r18
 af8:	f1 04       	cpc	r15, r1
 afa:	01 f1       	breq	.+64     	; 0xb3c <strtol+0xbe>
 afc:	54 f4       	brge	.+20     	; 0xb12 <strtol+0x94>
 afe:	e2 e0       	ldi	r30, 0x02	; 2
 b00:	ee 16       	cp	r14, r30
 b02:	f1 04       	cpc	r15, r1
 b04:	21 f5       	brne	.+72     	; 0xb4e <strtol+0xd0>
 b06:	81 2c       	mov	r8, r1
 b08:	91 2c       	mov	r9, r1
 b0a:	a1 2c       	mov	r10, r1
 b0c:	b0 e4       	ldi	r27, 0x40	; 64
 b0e:	bb 2e       	mov	r11, r27
 b10:	3d c0       	rjmp	.+122    	; 0xb8c <strtol+0x10e>
 b12:	fa e0       	ldi	r31, 0x0A	; 10
 b14:	ef 16       	cp	r14, r31
 b16:	f1 04       	cpc	r15, r1
 b18:	39 f0       	breq	.+14     	; 0xb28 <strtol+0xaa>
 b1a:	20 e1       	ldi	r18, 0x10	; 16
 b1c:	e2 16       	cp	r14, r18
 b1e:	f1 04       	cpc	r15, r1
 b20:	b1 f4       	brne	.+44     	; 0xb4e <strtol+0xd0>
 b22:	2f c0       	rjmp	.+94     	; 0xb82 <strtol+0x104>
 b24:	10 33       	cpi	r17, 0x30	; 48
 b26:	11 f1       	breq	.+68     	; 0xb6c <strtol+0xee>
 b28:	fa e0       	ldi	r31, 0x0A	; 10
 b2a:	ef 2e       	mov	r14, r31
 b2c:	f1 2c       	mov	r15, r1
 b2e:	ac ec       	ldi	r26, 0xCC	; 204
 b30:	8a 2e       	mov	r8, r26
 b32:	98 2c       	mov	r9, r8
 b34:	a8 2c       	mov	r10, r8
 b36:	ac e0       	ldi	r26, 0x0C	; 12
 b38:	ba 2e       	mov	r11, r26
 b3a:	28 c0       	rjmp	.+80     	; 0xb8c <strtol+0x10e>
 b3c:	78 e0       	ldi	r23, 0x08	; 8
 b3e:	e7 2e       	mov	r14, r23
 b40:	f1 2c       	mov	r15, r1
 b42:	81 2c       	mov	r8, r1
 b44:	91 2c       	mov	r9, r1
 b46:	a1 2c       	mov	r10, r1
 b48:	e0 e1       	ldi	r30, 0x10	; 16
 b4a:	be 2e       	mov	r11, r30
 b4c:	1f c0       	rjmp	.+62     	; 0xb8c <strtol+0x10e>
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	90 e8       	ldi	r25, 0x80	; 128
 b56:	97 01       	movw	r18, r14
 b58:	0f 2c       	mov	r0, r15
 b5a:	00 0c       	add	r0, r0
 b5c:	44 0b       	sbc	r20, r20
 b5e:	55 0b       	sbc	r21, r21
 b60:	de d0       	rcall	.+444    	; 0xd1e <__udivmodsi4>
 b62:	49 01       	movw	r8, r18
 b64:	5a 01       	movw	r10, r20
 b66:	12 c0       	rjmp	.+36     	; 0xb8c <strtol+0x10e>
 b68:	10 33       	cpi	r17, 0x30	; 48
 b6a:	59 f4       	brne	.+22     	; 0xb82 <strtol+0x104>
 b6c:	88 81       	ld	r24, Y
 b6e:	8f 7d       	andi	r24, 0xDF	; 223
 b70:	88 35       	cpi	r24, 0x58	; 88
 b72:	09 f0       	breq	.+2      	; 0xb76 <strtol+0xf8>
 b74:	bb cf       	rjmp	.-138    	; 0xaec <strtol+0x6e>
 b76:	19 81       	ldd	r17, Y+1	; 0x01
 b78:	22 96       	adiw	r28, 0x02	; 2
 b7a:	02 60       	ori	r16, 0x02	; 2
 b7c:	80 e1       	ldi	r24, 0x10	; 16
 b7e:	e8 2e       	mov	r14, r24
 b80:	f1 2c       	mov	r15, r1
 b82:	81 2c       	mov	r8, r1
 b84:	91 2c       	mov	r9, r1
 b86:	a1 2c       	mov	r10, r1
 b88:	68 e0       	ldi	r22, 0x08	; 8
 b8a:	b6 2e       	mov	r11, r22
 b8c:	40 e0       	ldi	r20, 0x00	; 0
 b8e:	60 e0       	ldi	r22, 0x00	; 0
 b90:	70 e0       	ldi	r23, 0x00	; 0
 b92:	cb 01       	movw	r24, r22
 b94:	27 01       	movw	r4, r14
 b96:	0f 2c       	mov	r0, r15
 b98:	00 0c       	add	r0, r0
 b9a:	66 08       	sbc	r6, r6
 b9c:	77 08       	sbc	r7, r7
 b9e:	fe 01       	movw	r30, r28
 ba0:	50 ed       	ldi	r21, 0xD0	; 208
 ba2:	35 2e       	mov	r3, r21
 ba4:	31 0e       	add	r3, r17
 ba6:	29 e0       	ldi	r18, 0x09	; 9
 ba8:	23 15       	cp	r18, r3
 baa:	70 f4       	brcc	.+28     	; 0xbc8 <strtol+0x14a>
 bac:	2f eb       	ldi	r18, 0xBF	; 191
 bae:	21 0f       	add	r18, r17
 bb0:	2a 31       	cpi	r18, 0x1A	; 26
 bb2:	18 f4       	brcc	.+6      	; 0xbba <strtol+0x13c>
 bb4:	39 ec       	ldi	r19, 0xC9	; 201
 bb6:	33 2e       	mov	r3, r19
 bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <strtol+0x148>
 bba:	2f e9       	ldi	r18, 0x9F	; 159
 bbc:	21 0f       	add	r18, r17
 bbe:	2a 31       	cpi	r18, 0x1A	; 26
 bc0:	10 f5       	brcc	.+68     	; 0xc06 <strtol+0x188>
 bc2:	29 ea       	ldi	r18, 0xA9	; 169
 bc4:	32 2e       	mov	r3, r18
 bc6:	31 0e       	add	r3, r17
 bc8:	23 2d       	mov	r18, r3
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	2e 15       	cp	r18, r14
 bce:	3f 05       	cpc	r19, r15
 bd0:	d4 f4       	brge	.+52     	; 0xc06 <strtol+0x188>
 bd2:	47 fd       	sbrc	r20, 7
 bd4:	15 c0       	rjmp	.+42     	; 0xc00 <strtol+0x182>
 bd6:	86 16       	cp	r8, r22
 bd8:	97 06       	cpc	r9, r23
 bda:	a8 06       	cpc	r10, r24
 bdc:	b9 06       	cpc	r11, r25
 bde:	68 f0       	brcs	.+26     	; 0xbfa <strtol+0x17c>
 be0:	a3 01       	movw	r20, r6
 be2:	92 01       	movw	r18, r4
 be4:	8d d0       	rcall	.+282    	; 0xd00 <__mulsi3>
 be6:	63 0d       	add	r22, r3
 be8:	71 1d       	adc	r23, r1
 bea:	81 1d       	adc	r24, r1
 bec:	91 1d       	adc	r25, r1
 bee:	61 30       	cpi	r22, 0x01	; 1
 bf0:	71 05       	cpc	r23, r1
 bf2:	81 05       	cpc	r24, r1
 bf4:	20 e8       	ldi	r18, 0x80	; 128
 bf6:	92 07       	cpc	r25, r18
 bf8:	10 f0       	brcs	.+4      	; 0xbfe <strtol+0x180>
 bfa:	4f ef       	ldi	r20, 0xFF	; 255
 bfc:	01 c0       	rjmp	.+2      	; 0xc00 <strtol+0x182>
 bfe:	41 e0       	ldi	r20, 0x01	; 1
 c00:	21 96       	adiw	r28, 0x01	; 1
 c02:	10 81       	ld	r17, Z
 c04:	cc cf       	rjmp	.-104    	; 0xb9e <strtol+0x120>
 c06:	20 2f       	mov	r18, r16
 c08:	21 70       	andi	r18, 0x01	; 1
 c0a:	c1 14       	cp	r12, r1
 c0c:	d1 04       	cpc	r13, r1
 c0e:	71 f0       	breq	.+28     	; 0xc2c <strtol+0x1ae>
 c10:	44 23       	and	r20, r20
 c12:	29 f0       	breq	.+10     	; 0xc1e <strtol+0x1a0>
 c14:	21 97       	sbiw	r28, 0x01	; 1
 c16:	f6 01       	movw	r30, r12
 c18:	d1 83       	std	Z+1, r29	; 0x01
 c1a:	c0 83       	st	Z, r28
 c1c:	07 c0       	rjmp	.+14     	; 0xc2c <strtol+0x1ae>
 c1e:	01 ff       	sbrs	r16, 1
 c20:	19 c0       	rjmp	.+50     	; 0xc54 <strtol+0x1d6>
 c22:	22 97       	sbiw	r28, 0x02	; 2
 c24:	f6 01       	movw	r30, r12
 c26:	d1 83       	std	Z+1, r29	; 0x01
 c28:	c0 83       	st	Z, r28
 c2a:	14 c0       	rjmp	.+40     	; 0xc54 <strtol+0x1d6>
 c2c:	47 ff       	sbrs	r20, 7
 c2e:	12 c0       	rjmp	.+36     	; 0xc54 <strtol+0x1d6>
 c30:	22 23       	and	r18, r18
 c32:	29 f0       	breq	.+10     	; 0xc3e <strtol+0x1c0>
 c34:	60 e0       	ldi	r22, 0x00	; 0
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	80 e0       	ldi	r24, 0x00	; 0
 c3a:	90 e8       	ldi	r25, 0x80	; 128
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <strtol+0x1c8>
 c3e:	6f ef       	ldi	r22, 0xFF	; 255
 c40:	7f ef       	ldi	r23, 0xFF	; 255
 c42:	8f ef       	ldi	r24, 0xFF	; 255
 c44:	9f e7       	ldi	r25, 0x7F	; 127
 c46:	22 e2       	ldi	r18, 0x22	; 34
 c48:	30 e0       	ldi	r19, 0x00	; 0
 c4a:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <errno+0x1>
 c4e:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <errno>
 c52:	09 c0       	rjmp	.+18     	; 0xc66 <strtol+0x1e8>
 c54:	22 23       	and	r18, r18
 c56:	81 f0       	breq	.+32     	; 0xc78 <strtol+0x1fa>
 c58:	90 95       	com	r25
 c5a:	80 95       	com	r24
 c5c:	70 95       	com	r23
 c5e:	61 95       	neg	r22
 c60:	7f 4f       	sbci	r23, 0xFF	; 255
 c62:	8f 4f       	sbci	r24, 0xFF	; 255
 c64:	9f 4f       	sbci	r25, 0xFF	; 255
 c66:	46 2f       	mov	r20, r22
 c68:	37 2f       	mov	r19, r23
 c6a:	28 2f       	mov	r18, r24
 c6c:	12 c0       	rjmp	.+36     	; 0xc92 <strtol+0x214>
 c6e:	40 e0       	ldi	r20, 0x00	; 0
 c70:	30 e0       	ldi	r19, 0x00	; 0
 c72:	20 e0       	ldi	r18, 0x00	; 0
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0d c0       	rjmp	.+26     	; 0xc92 <strtol+0x214>
 c78:	97 ff       	sbrs	r25, 7
 c7a:	f5 cf       	rjmp	.-22     	; 0xc66 <strtol+0x1e8>
 c7c:	82 e2       	ldi	r24, 0x22	; 34
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <errno+0x1>
 c84:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <errno>
 c88:	6f ef       	ldi	r22, 0xFF	; 255
 c8a:	7f ef       	ldi	r23, 0xFF	; 255
 c8c:	8f ef       	ldi	r24, 0xFF	; 255
 c8e:	9f e7       	ldi	r25, 0x7F	; 127
 c90:	ea cf       	rjmp	.-44     	; 0xc66 <strtol+0x1e8>
 c92:	64 2f       	mov	r22, r20
 c94:	73 2f       	mov	r23, r19
 c96:	82 2f       	mov	r24, r18
 c98:	cd b7       	in	r28, 0x3d	; 61
 c9a:	de b7       	in	r29, 0x3e	; 62
 c9c:	e1 e1       	ldi	r30, 0x11	; 17
 c9e:	88 c0       	rjmp	.+272    	; 0xdb0 <__epilogue_restores__+0x2>

00000ca0 <atoi>:
 ca0:	fc 01       	movw	r30, r24
 ca2:	88 27       	eor	r24, r24
 ca4:	99 27       	eor	r25, r25
 ca6:	e8 94       	clt
 ca8:	21 91       	ld	r18, Z+
 caa:	20 32       	cpi	r18, 0x20	; 32
 cac:	e9 f3       	breq	.-6      	; 0xca8 <atoi+0x8>
 cae:	29 30       	cpi	r18, 0x09	; 9
 cb0:	10 f0       	brcs	.+4      	; 0xcb6 <atoi+0x16>
 cb2:	2e 30       	cpi	r18, 0x0E	; 14
 cb4:	c8 f3       	brcs	.-14     	; 0xca8 <atoi+0x8>
 cb6:	2b 32       	cpi	r18, 0x2B	; 43
 cb8:	39 f0       	breq	.+14     	; 0xcc8 <atoi+0x28>
 cba:	2d 32       	cpi	r18, 0x2D	; 45
 cbc:	31 f4       	brne	.+12     	; 0xcca <atoi+0x2a>
 cbe:	68 94       	set
 cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <atoi+0x28>
 cc2:	13 d0       	rcall	.+38     	; 0xcea <__mulhi_const_10>
 cc4:	82 0f       	add	r24, r18
 cc6:	91 1d       	adc	r25, r1
 cc8:	21 91       	ld	r18, Z+
 cca:	20 53       	subi	r18, 0x30	; 48
 ccc:	2a 30       	cpi	r18, 0x0A	; 10
 cce:	c8 f3       	brcs	.-14     	; 0xcc2 <atoi+0x22>
 cd0:	1e f4       	brtc	.+6      	; 0xcd8 <atoi+0x38>
 cd2:	90 95       	com	r25
 cd4:	81 95       	neg	r24
 cd6:	9f 4f       	sbci	r25, 0xFF	; 255
 cd8:	08 95       	ret

00000cda <isspace>:
 cda:	91 11       	cpse	r25, r1
 cdc:	0e c0       	rjmp	.+28     	; 0xcfa <__ctype_isfalse>
 cde:	80 32       	cpi	r24, 0x20	; 32
 ce0:	19 f0       	breq	.+6      	; 0xce8 <isspace+0xe>
 ce2:	89 50       	subi	r24, 0x09	; 9
 ce4:	85 50       	subi	r24, 0x05	; 5
 ce6:	d0 f7       	brcc	.-12     	; 0xcdc <isspace+0x2>
 ce8:	08 95       	ret

00000cea <__mulhi_const_10>:
 cea:	7a e0       	ldi	r23, 0x0A	; 10
 cec:	97 9f       	mul	r25, r23
 cee:	90 2d       	mov	r25, r0
 cf0:	87 9f       	mul	r24, r23
 cf2:	80 2d       	mov	r24, r0
 cf4:	91 0d       	add	r25, r1
 cf6:	11 24       	eor	r1, r1
 cf8:	08 95       	ret

00000cfa <__ctype_isfalse>:
 cfa:	99 27       	eor	r25, r25
 cfc:	88 27       	eor	r24, r24

00000cfe <__ctype_istrue>:
 cfe:	08 95       	ret

00000d00 <__mulsi3>:
 d00:	db 01       	movw	r26, r22
 d02:	8f 93       	push	r24
 d04:	9f 93       	push	r25
 d06:	2d d0       	rcall	.+90     	; 0xd62 <__muluhisi3>
 d08:	bf 91       	pop	r27
 d0a:	af 91       	pop	r26
 d0c:	a2 9f       	mul	r26, r18
 d0e:	80 0d       	add	r24, r0
 d10:	91 1d       	adc	r25, r1
 d12:	a3 9f       	mul	r26, r19
 d14:	90 0d       	add	r25, r0
 d16:	b2 9f       	mul	r27, r18
 d18:	90 0d       	add	r25, r0
 d1a:	11 24       	eor	r1, r1
 d1c:	08 95       	ret

00000d1e <__udivmodsi4>:
 d1e:	a1 e2       	ldi	r26, 0x21	; 33
 d20:	1a 2e       	mov	r1, r26
 d22:	aa 1b       	sub	r26, r26
 d24:	bb 1b       	sub	r27, r27
 d26:	fd 01       	movw	r30, r26
 d28:	0d c0       	rjmp	.+26     	; 0xd44 <__udivmodsi4_ep>

00000d2a <__udivmodsi4_loop>:
 d2a:	aa 1f       	adc	r26, r26
 d2c:	bb 1f       	adc	r27, r27
 d2e:	ee 1f       	adc	r30, r30
 d30:	ff 1f       	adc	r31, r31
 d32:	a2 17       	cp	r26, r18
 d34:	b3 07       	cpc	r27, r19
 d36:	e4 07       	cpc	r30, r20
 d38:	f5 07       	cpc	r31, r21
 d3a:	20 f0       	brcs	.+8      	; 0xd44 <__udivmodsi4_ep>
 d3c:	a2 1b       	sub	r26, r18
 d3e:	b3 0b       	sbc	r27, r19
 d40:	e4 0b       	sbc	r30, r20
 d42:	f5 0b       	sbc	r31, r21

00000d44 <__udivmodsi4_ep>:
 d44:	66 1f       	adc	r22, r22
 d46:	77 1f       	adc	r23, r23
 d48:	88 1f       	adc	r24, r24
 d4a:	99 1f       	adc	r25, r25
 d4c:	1a 94       	dec	r1
 d4e:	69 f7       	brne	.-38     	; 0xd2a <__udivmodsi4_loop>
 d50:	60 95       	com	r22
 d52:	70 95       	com	r23
 d54:	80 95       	com	r24
 d56:	90 95       	com	r25
 d58:	9b 01       	movw	r18, r22
 d5a:	ac 01       	movw	r20, r24
 d5c:	bd 01       	movw	r22, r26
 d5e:	cf 01       	movw	r24, r30
 d60:	08 95       	ret

00000d62 <__muluhisi3>:
 d62:	40 d0       	rcall	.+128    	; 0xde4 <__umulhisi3>
 d64:	a5 9f       	mul	r26, r21
 d66:	90 0d       	add	r25, r0
 d68:	b4 9f       	mul	r27, r20
 d6a:	90 0d       	add	r25, r0
 d6c:	a4 9f       	mul	r26, r20
 d6e:	80 0d       	add	r24, r0
 d70:	91 1d       	adc	r25, r1
 d72:	11 24       	eor	r1, r1
 d74:	08 95       	ret

00000d76 <__prologue_saves__>:
 d76:	2f 92       	push	r2
 d78:	3f 92       	push	r3
 d7a:	4f 92       	push	r4
 d7c:	5f 92       	push	r5
 d7e:	6f 92       	push	r6
 d80:	7f 92       	push	r7
 d82:	8f 92       	push	r8
 d84:	9f 92       	push	r9
 d86:	af 92       	push	r10
 d88:	bf 92       	push	r11
 d8a:	cf 92       	push	r12
 d8c:	df 92       	push	r13
 d8e:	ef 92       	push	r14
 d90:	ff 92       	push	r15
 d92:	0f 93       	push	r16
 d94:	1f 93       	push	r17
 d96:	cf 93       	push	r28
 d98:	df 93       	push	r29
 d9a:	cd b7       	in	r28, 0x3d	; 61
 d9c:	de b7       	in	r29, 0x3e	; 62
 d9e:	ca 1b       	sub	r28, r26
 da0:	db 0b       	sbc	r29, r27
 da2:	0f b6       	in	r0, 0x3f	; 63
 da4:	f8 94       	cli
 da6:	de bf       	out	0x3e, r29	; 62
 da8:	0f be       	out	0x3f, r0	; 63
 daa:	cd bf       	out	0x3d, r28	; 61
 dac:	09 94       	ijmp

00000dae <__epilogue_restores__>:
 dae:	2a 88       	ldd	r2, Y+18	; 0x12
 db0:	39 88       	ldd	r3, Y+17	; 0x11
 db2:	48 88       	ldd	r4, Y+16	; 0x10
 db4:	5f 84       	ldd	r5, Y+15	; 0x0f
 db6:	6e 84       	ldd	r6, Y+14	; 0x0e
 db8:	7d 84       	ldd	r7, Y+13	; 0x0d
 dba:	8c 84       	ldd	r8, Y+12	; 0x0c
 dbc:	9b 84       	ldd	r9, Y+11	; 0x0b
 dbe:	aa 84       	ldd	r10, Y+10	; 0x0a
 dc0:	b9 84       	ldd	r11, Y+9	; 0x09
 dc2:	c8 84       	ldd	r12, Y+8	; 0x08
 dc4:	df 80       	ldd	r13, Y+7	; 0x07
 dc6:	ee 80       	ldd	r14, Y+6	; 0x06
 dc8:	fd 80       	ldd	r15, Y+5	; 0x05
 dca:	0c 81       	ldd	r16, Y+4	; 0x04
 dcc:	1b 81       	ldd	r17, Y+3	; 0x03
 dce:	aa 81       	ldd	r26, Y+2	; 0x02
 dd0:	b9 81       	ldd	r27, Y+1	; 0x01
 dd2:	ce 0f       	add	r28, r30
 dd4:	d1 1d       	adc	r29, r1
 dd6:	0f b6       	in	r0, 0x3f	; 63
 dd8:	f8 94       	cli
 dda:	de bf       	out	0x3e, r29	; 62
 ddc:	0f be       	out	0x3f, r0	; 63
 dde:	cd bf       	out	0x3d, r28	; 61
 de0:	ed 01       	movw	r28, r26
 de2:	08 95       	ret

00000de4 <__umulhisi3>:
 de4:	a2 9f       	mul	r26, r18
 de6:	b0 01       	movw	r22, r0
 de8:	b3 9f       	mul	r27, r19
 dea:	c0 01       	movw	r24, r0
 dec:	a3 9f       	mul	r26, r19
 dee:	01 d0       	rcall	.+2      	; 0xdf2 <__umulhisi3+0xe>
 df0:	b2 9f       	mul	r27, r18
 df2:	70 0d       	add	r23, r0
 df4:	81 1d       	adc	r24, r1
 df6:	11 24       	eor	r1, r1
 df8:	91 1d       	adc	r25, r1
 dfa:	08 95       	ret

00000dfc <_exit>:
 dfc:	f8 94       	cli

00000dfe <__stop_program>:
 dfe:	ff cf       	rjmp	.-2      	; 0xdfe <__stop_program>
