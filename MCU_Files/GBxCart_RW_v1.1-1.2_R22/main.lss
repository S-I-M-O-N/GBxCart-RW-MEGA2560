
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001b78  00001c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011d  00800060  00800060  00001c0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c01  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000728  00000000  00000000  000058d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c0c  00000000  00000000  00005ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00007c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000743  00000000  00000000  00007ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a0c  00000000  00000000  0000873b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000b147  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
       4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
       6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
       8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
       a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
       c:	0c c4       	rjmp	.+2072   	; 0x826 <__vector_6>
       e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
      10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
      12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
      14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
      16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
      18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
      1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
      1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
      1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
      20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
      2e:	21 e0       	ldi	r18, 0x01	; 1
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
      36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
      38:	ad 37       	cpi	r26, 0x7D	; 125
      3a:	b2 07       	cpc	r27, r18
      3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
      3e:	08 d4       	rcall	.+2064   	; 0x850 <main>
      40:	99 cd       	rjmp	.-1230   	; 0xfffffb74 <__eeprom_end+0xff7efb74>

00000042 <__bad_interrupt>:
      42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <USART_Receive>:
volatile uint8_t writingTimedout = 0;


// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
      44:	5f 9b       	sbis	0x0b, 7	; 11
      46:	fe cf       	rjmp	.-4      	; 0x44 <USART_Receive>
	return UDR; // Get and return received data from buffer
      48:	8c b1       	in	r24, 0x0c	; 12
}
      4a:	08 95       	ret

0000004c <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
      4c:	5d 9b       	sbis	0x0b, 5	; 11
      4e:	fe cf       	rjmp	.-4      	; 0x4c <USART_Transmit>
	UDR = data;
      50:	8c b9       	out	0x0c, r24	; 12
      52:	08 95       	ret

00000054 <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
      54:	0f 93       	push	r16
      56:	1f 93       	push	r17
      58:	cf 93       	push	r28
      5a:	df 93       	push	r29
      5c:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
      5e:	c1 e7       	ldi	r28, 0x71	; 113
      60:	d0 e0       	ldi	r29, 0x00	; 0
      62:	ce 01       	movw	r24, r28
      64:	81 57       	subi	r24, 0x71	; 113
      66:	90 40       	sbci	r25, 0x00	; 0
      68:	80 17       	cp	r24, r16
      6a:	91 07       	cpc	r25, r17
      6c:	1c f4       	brge	.+6      	; 0x74 <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
      6e:	ea df       	rcall	.-44     	; 0x44 <USART_Receive>
      70:	89 93       	st	Y+, r24
      72:	f7 cf       	rjmp	.-18     	; 0x62 <usart_read_bytes+0xe>
	}
}
      74:	df 91       	pop	r29
      76:	cf 91       	pop	r28
      78:	1f 91       	pop	r17
      7a:	0f 91       	pop	r16
      7c:	08 95       	ret

0000007e <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	c1 e7       	ldi	r28, 0x71	; 113
      84:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
      86:	de df       	rcall	.-68     	; 0x44 <USART_Receive>
      88:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
      8a:	81 11       	cpse	r24, r1
      8c:	fc cf       	rjmp	.-8      	; 0x86 <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
      8e:	df 91       	pop	r29
      90:	cf 91       	pop	r28
      92:	08 95       	ret

00000094 <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
      94:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
      96:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
      98:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
      9a:	96 9a       	sbi	0x12, 6	; 18
      9c:	08 95       	ret

0000009e <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
      9e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      a0:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
      a2:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
      a4:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
      aa:	8a bb       	out	0x1a, r24	; 26
      ac:	08 95       	ret

000000ae <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
      ae:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
      b0:	88 bb       	out	0x18, r24	; 24
      b2:	08 95       	ret

000000b4 <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
      b4:	fc df       	rcall	.-8      	; 0xae <set_16bit_address>
	
	cs_mreqPin_low;
      b6:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
      b8:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
      ba:	00 00       	nop
	asm volatile("nop");
      bc:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
      be:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
      c0:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
      c2:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
      c4:	08 95       	ret

000000c6 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	d6 2f       	mov	r29, r22
      cc:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
      ce:	ef df       	rcall	.-34     	; 0xae <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
      d4:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
      d6:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
      d8:	c1 30       	cpi	r28, 0x01	; 1
      da:	09 f4       	brne	.+2      	; 0xde <write_8bit_data+0x18>
		cs_mreqPin_low;
      dc:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
      de:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
      e0:	c1 30       	cpi	r28, 0x01	; 1
      e2:	09 f4       	brne	.+2      	; 0xe6 <write_8bit_data+0x20>
		cs_mreqPin_high;
      e4:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
      e6:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
      e8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      ea:	14 ba       	out	0x14, r1	; 20
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
      f2:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
      f4:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
      f6:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
      f8:	8f ef       	ldi	r24, 0xFF	; 255
      fa:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
      fc:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
      fe:	84 bb       	out	0x14, r24	; 20
     100:	08 95       	ret

00000102 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
     106:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
     108:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     10a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     10c:	2f ef       	ldi	r18, 0xFF	; 255
     10e:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     110:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     112:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     114:	8c 01       	movw	r16, r24
     116:	22 27       	eor	r18, r18
     118:	33 27       	eor	r19, r19
     11a:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     11c:	07 2f       	mov	r16, r23
     11e:	18 2f       	mov	r17, r24
     120:	29 2f       	mov	r18, r25
     122:	33 27       	eor	r19, r19
     124:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     126:	68 bb       	out	0x18, r22	; 24
}
     128:	1f 91       	pop	r17
     12a:	0f 91       	pop	r16
     12c:	08 95       	ret

0000012e <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
     12e:	e9 df       	rcall	.-46     	; 0x102 <gba_set_24bit_address>
	
	cs_mreqPin_low;
     130:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be read out
     132:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     134:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
     136:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
     138:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
     13a:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
     13c:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
     13e:	29 b3       	in	r18, 0x19	; 25
     140:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
     142:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
     144:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
     146:	90 e0       	ldi	r25, 0x00	; 0
}
     148:	92 2b       	or	r25, r18
     14a:	08 95       	ret

0000014c <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
     14c:	b0 df       	rcall	.-160    	; 0xae <set_16bit_address>
	
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     14e:	3a 98       	cbi	0x07, 2	; 7
	rdPin_low;
     150:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
     152:	00 00       	nop
	asm volatile("nop");
     154:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
     156:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
     158:	95 9a       	sbi	0x12, 5	; 18
	cs2Pin_high;
     15a:	3a 9a       	sbi	0x07, 2	; 7
	
	return data;
}
     15c:	08 95       	ret

0000015e <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
     15e:	cf 93       	push	r28
     160:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
     162:	a5 df       	rcall	.-182    	; 0xae <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
     168:	c5 bb       	out	0x15, r28	; 21
	
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     16a:	3a 98       	cbi	0x07, 2	; 7
	wrPin_low; // Pulse WR
     16c:	96 98       	cbi	0x12, 6	; 18
	
	asm volatile("nop");
     16e:	00 00       	nop
	asm volatile("nop");
     170:	00 00       	nop
	
	wrPin_high;
     172:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
     174:	3a 9a       	sbi	0x07, 2	; 7
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     176:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     178:	14 ba       	out	0x14, r1	; 20
}
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     182:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     184:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
     186:	90 e8       	ldi	r25, 0x80	; 128
     188:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
     18a:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
     18c:	85 bb       	out	0x15, r24	; 21
     18e:	08 95       	ret

00000190 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
     190:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
     192:	62 30       	cpi	r22, 0x02	; 2
     194:	49 f4       	brne	.+18     	; 0x1a8 <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
     196:	41 11       	cpse	r20, r1
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
     19a:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
     19c:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
     19e:	e1 e0       	ldi	r30, 0x01	; 1
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
     1a4:	90 68       	ori	r25, 0x80	; 128
     1a6:	fa cf       	rjmp	.-12     	; 0x19c <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
     1a8:	41 11       	cpse	r20, r1
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
     1ac:	80 6c       	ori	r24, 0xC0	; 192
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
     1b0:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
     1b2:	27 e0       	ldi	r18, 0x07	; 7
     1b4:	f4 cf       	rjmp	.-24     	; 0x19e <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
     1b6:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
     1b8:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ba:	00 00       	nop
		asm ("nop");
     1bc:	00 00       	nop
		wrPin_high; 
     1be:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
     1c0:	00 00       	nop
		asm ("nop");
     1c2:	00 00       	nop
     1c4:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
     1c6:	27 fd       	sbrc	r18, 7
     1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
     1ca:	bf 01       	movw	r22, r30
     1cc:	02 2e       	mov	r0, r18
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <gba_eeprom_set_address+0x44>
     1d0:	66 0f       	add	r22, r22
     1d2:	77 1f       	adc	r23, r23
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <gba_eeprom_set_address+0x40>
     1d8:	68 23       	and	r22, r24
     1da:	79 23       	and	r23, r25
     1dc:	67 2b       	or	r22, r23
     1de:	59 f3       	breq	.-42     	; 0x1b6 <gba_eeprom_set_address+0x26>
			ad0Pin_high;
     1e0:	c0 9a       	sbi	0x18, 0	; 24
     1e2:	ea cf       	rjmp	.-44     	; 0x1b8 <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
     1e4:	41 11       	cpse	r20, r1
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <gba_eeprom_set_address+0x66>
		ad0Pin_low;
     1e8:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
     1ea:	00 00       	nop
		wrPin_low;
     1ec:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ee:	00 00       	nop
		asm ("nop");
     1f0:	00 00       	nop
		
		wrPin_high;
     1f2:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
     1f4:	94 9a       	sbi	0x12, 4	; 18
     1f6:	08 95       	ret

000001f8 <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	ca df       	rcall	.-108    	; 0x190 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fc:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fe:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
     200:	94 98       	cbi	0x12, 4	; 18
     202:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
     204:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
     206:	00 00       	nop
		asm ("nop");
     208:	00 00       	nop
		rdPin_high; 
     20a:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
     20c:	00 00       	nop
		asm ("nop");
     20e:	00 00       	nop
     210:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
     212:	c1 f7       	brne	.-16     	; 0x204 <gba_eeprom_read+0xc>
     214:	e2 e7       	ldi	r30, 0x72	; 114
     216:	f1 e0       	ldi	r31, 0x01	; 1
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
     21c:	87 e0       	ldi	r24, 0x07	; 7
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
     222:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
     224:	00 00       	nop
			asm ("nop");
     226:	00 00       	nop
			rdPin_high;
     228:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
     22a:	b0 9b       	sbis	0x16, 0	; 22
     22c:	07 c0       	rjmp	.+14     	; 0x23c <gba_eeprom_read+0x44>
				data |= (1<<x);
     22e:	ba 01       	movw	r22, r20
     230:	08 2e       	mov	r0, r24
     232:	01 c0       	rjmp	.+2      	; 0x236 <gba_eeprom_read+0x3e>
     234:	66 0f       	add	r22, r22
     236:	0a 94       	dec	r0
     238:	ea f7       	brpl	.-6      	; 0x234 <gba_eeprom_read+0x3c>
     23a:	26 2b       	or	r18, r22
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	88 f7       	brcc	.-30     	; 0x222 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
     240:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	ea 37       	cpi	r30, 0x7A	; 122
     246:	f8 07       	cpc	r31, r24
     248:	49 f7       	brne	.-46     	; 0x21c <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
     24a:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
     24c:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
     24e:	b8 9a       	sbi	0x17, 0	; 23
     250:	08 95       	ret

00000252 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	9d df       	rcall	.-198    	; 0x190 <gba_eeprom_set_address>
     256:	e2 e7       	ldi	r30, 0x72	; 114
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
     25c:	27 e0       	ldi	r18, 0x07	; 7
     25e:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
     260:	80 81       	ld	r24, Z
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 2e       	mov	r0, r18
     266:	02 c0       	rjmp	.+4      	; 0x26c <__stack+0xd>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <__stack+0x9>
     270:	80 ff       	sbrs	r24, 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <__stack+0x19>
				ad0Pin_high;
     274:	c0 9a       	sbi	0x18, 0	; 24
     276:	01 c0       	rjmp	.+2      	; 0x27a <__stack+0x1b>
			}
			else {
				ad0Pin_low;
     278:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
     27a:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
     27c:	00 00       	nop
			asm ("nop");
     27e:	00 00       	nop
			wrPin_high; 
     280:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
     282:	00 00       	nop
			asm ("nop");
     284:	00 00       	nop
     286:	21 50       	subi	r18, 0x01	; 1
     288:	31 09       	sbc	r19, r1
     28a:	50 f7       	brcc	.-44     	; 0x260 <__stack+0x1>
     28c:	41 50       	subi	r20, 0x01	; 1
     28e:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     290:	41 11       	cpse	r20, r1
     292:	e4 cf       	rjmp	.-56     	; 0x25c <gba_eeprom_write+0xa>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
     294:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
     296:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
     298:	00 00       	nop
	asm ("nop");
     29a:	00 00       	nop
	wrPin_high; 
     29c:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
     29e:	00 00       	nop
	asm ("nop");
     2a0:	00 00       	nop
	
	cs_mreqPin_high;
     2a2:	94 9a       	sbi	0x12, 4	; 18
     2a4:	08 95       	ret

000002a6 <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
     2a6:	cf 93       	push	r28
     2a8:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     2aa:	2f ef       	ldi	r18, 0xFF	; 255
     2ac:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     2ae:	ff de       	rcall	.-514    	; 0xae <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
     2b0:	c5 bb       	out	0x15, r28	; 21
	
	cs2Pin_low;
     2b2:	3a 98       	cbi	0x07, 2	; 7
	wrPin_low;
     2b4:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     2b6:	00 00       	nop
	cs2Pin_high;
     2b8:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
     2ba:	96 9a       	sbi	0x12, 6	; 18
}
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
     2c4:	6a ea       	ldi	r22, 0xAA	; 170
     2c6:	85 e5       	ldi	r24, 0x55	; 85
     2c8:	95 e5       	ldi	r25, 0x55	; 85
     2ca:	ed df       	rcall	.-38     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     2cc:	65 e5       	ldi	r22, 0x55	; 85
     2ce:	8a ea       	ldi	r24, 0xAA	; 170
     2d0:	9a e2       	ldi	r25, 0x2A	; 42
     2d2:	e9 df       	rcall	.-46     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
     2d4:	60 e9       	ldi	r22, 0x90	; 144
     2d6:	85 e5       	ldi	r24, 0x55	; 85
     2d8:	95 e5       	ldi	r25, 0x55	; 85
     2da:	e5 df       	rcall	.-54     	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	8f e3       	ldi	r24, 0x3F	; 63
     2de:	9c e9       	ldi	r25, 0x9C	; 156
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <flash_read_chip_id+0x20>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <flash_read_chip_id+0x26>
     2e6:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     2e8:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     2ea:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2d df       	rcall	.-422    	; 0x14c <gba_read_ram_8bit_data>
     2f2:	cf e6       	ldi	r28, 0x6F	; 111
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
     2f6:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	27 df       	rcall	.-434    	; 0x14c <gba_read_ram_8bit_data>
     2fe:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
     300:	6a ea       	ldi	r22, 0xAA	; 170
     302:	85 e5       	ldi	r24, 0x55	; 85
     304:	95 e5       	ldi	r25, 0x55	; 85
     306:	cf df       	rcall	.-98     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     308:	65 e5       	ldi	r22, 0x55	; 85
     30a:	8a ea       	ldi	r24, 0xAA	; 170
     30c:	9a e2       	ldi	r25, 0x2A	; 42
     30e:	cb df       	rcall	.-106    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
     310:	60 ef       	ldi	r22, 0xF0	; 240
     312:	85 e5       	ldi	r24, 0x55	; 85
     314:	95 e5       	ldi	r25, 0x55	; 85
     316:	c7 df       	rcall	.-114    	; 0x2a6 <flash_write_bus_cycle>
     318:	8f e3       	ldi	r24, 0x3F	; 63
     31a:	9c e9       	ldi	r25, 0x9C	; 156
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <flash_read_chip_id+0x5c>
     320:	00 c0       	rjmp	.+0      	; 0x322 <flash_read_chip_id+0x62>
     322:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
     32a:	cf 93       	push	r28
     32c:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     32e:	6a ea       	ldi	r22, 0xAA	; 170
     330:	85 e5       	ldi	r24, 0x55	; 85
     332:	95 e5       	ldi	r25, 0x55	; 85
     334:	b8 df       	rcall	.-144    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     336:	65 e5       	ldi	r22, 0x55	; 85
     338:	8a ea       	ldi	r24, 0xAA	; 170
     33a:	9a e2       	ldi	r25, 0x2A	; 42
     33c:	b4 df       	rcall	.-152    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
     33e:	60 eb       	ldi	r22, 0xB0	; 176
     340:	85 e5       	ldi	r24, 0x55	; 85
     342:	95 e5       	ldi	r25, 0x55	; 85
     344:	b0 df       	rcall	.-160    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
     346:	6c 2f       	mov	r22, r28
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
}
     34c:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
     34e:	ab cf       	rjmp	.-170    	; 0x2a6 <flash_write_bus_cycle>

00000350 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
     350:	cf 93       	push	r28
     352:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     354:	6a ea       	ldi	r22, 0xAA	; 170
     356:	85 e5       	ldi	r24, 0x55	; 85
     358:	95 e5       	ldi	r25, 0x55	; 85
     35a:	a5 df       	rcall	.-182    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     35c:	65 e5       	ldi	r22, 0x55	; 85
     35e:	8a ea       	ldi	r24, 0xAA	; 170
     360:	9a e2       	ldi	r25, 0x2A	; 42
     362:	a1 df       	rcall	.-190    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
     364:	60 e8       	ldi	r22, 0x80	; 128
     366:	85 e5       	ldi	r24, 0x55	; 85
     368:	95 e5       	ldi	r25, 0x55	; 85
     36a:	9d df       	rcall	.-198    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
     36c:	6a ea       	ldi	r22, 0xAA	; 170
     36e:	85 e5       	ldi	r24, 0x55	; 85
     370:	95 e5       	ldi	r25, 0x55	; 85
     372:	99 df       	rcall	.-206    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     374:	65 e5       	ldi	r22, 0x55	; 85
     376:	8a ea       	ldi	r24, 0xAA	; 170
     378:	9a e2       	ldi	r25, 0x2A	; 42
     37a:	95 df       	rcall	.-214    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
     37c:	60 e3       	ldi	r22, 0x30	; 48
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	9c 2f       	mov	r25, r28
     382:	92 95       	swap	r25
     384:	90 7f       	andi	r25, 0xF0	; 240
     386:	8f df       	rcall	.-226    	; 0x2a6 <flash_write_bus_cycle>
     388:	8f e4       	ldi	r24, 0x4F	; 79
     38a:	93 ec       	ldi	r25, 0xC3	; 195
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <flash_erase_4k_sector+0x3c>
     390:	00 c0       	rjmp	.+0      	; 0x392 <flash_erase_4k_sector+0x42>
     392:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
     3a0:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
     3a2:	6a ea       	ldi	r22, 0xAA	; 170
     3a4:	85 e5       	ldi	r24, 0x55	; 85
     3a6:	95 e5       	ldi	r25, 0x55	; 85
     3a8:	7e df       	rcall	.-260    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3aa:	65 e5       	ldi	r22, 0x55	; 85
     3ac:	8a ea       	ldi	r24, 0xAA	; 170
     3ae:	9a e2       	ldi	r25, 0x2A	; 42
     3b0:	7a df       	rcall	.-268    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3b2:	60 ea       	ldi	r22, 0xA0	; 160
     3b4:	85 e5       	ldi	r24, 0x55	; 85
     3b6:	95 e5       	ldi	r25, 0x55	; 85
     3b8:	76 df       	rcall	.-276    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	73 df       	rcall	.-282    	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c0:	85 e3       	ldi	r24, 0x35	; 53
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <flash_write_byte+0x2a>
     3c6:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     3de:	6a ea       	ldi	r22, 0xAA	; 170
     3e0:	85 e5       	ldi	r24, 0x55	; 85
     3e2:	95 e5       	ldi	r25, 0x55	; 85
     3e4:	60 df       	rcall	.-320    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3e6:	65 e5       	ldi	r22, 0x55	; 85
     3e8:	8a ea       	ldi	r24, 0xAA	; 170
     3ea:	9a e2       	ldi	r25, 0x2A	; 42
     3ec:	5c df       	rcall	.-328    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3ee:	60 ea       	ldi	r22, 0xA0	; 160
     3f0:	85 e5       	ldi	r24, 0x55	; 85
     3f2:	95 e5       	ldi	r25, 0x55	; 85
     3f4:	58 df       	rcall	.-336    	; 0x2a6 <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
     3f6:	16 95       	lsr	r17
     3f8:	10 2f       	mov	r17, r16
     3fa:	00 27       	eor	r16, r16
     3fc:	17 95       	ror	r17
     3fe:	07 95       	ror	r16
     400:	91 e7       	ldi	r25, 0x71	; 113
     402:	e9 2e       	mov	r14, r25
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	f9 2e       	mov	r15, r25
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	f7 01       	movw	r30, r14
     40e:	61 91       	ld	r22, Z+
     410:	7f 01       	movw	r14, r30
     412:	ce 01       	movw	r24, r28
     414:	80 2b       	or	r24, r16
     416:	91 2b       	or	r25, r17
     418:	46 df       	rcall	.-372    	; 0x2a6 <flash_write_bus_cycle>
     41a:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
     41c:	c0 38       	cpi	r28, 0x80	; 128
     41e:	d1 05       	cpc	r29, r1
     420:	a9 f7       	brne	.-22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     422:	8f e3       	ldi	r24, 0x3F	; 63
     424:	9c e9       	ldi	r25, 0x9C	; 156
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	08 95       	ret

0000043c <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
     43c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     43e:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
     440:	36 de       	rcall	.-916    	; 0xae <set_16bit_address>
	
	rdPin_low;
     442:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     444:	00 00       	nop
	asm volatile("nop");
     446:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     448:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     44a:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     44c:	08 95       	ret

0000044e <gb_flash_read_byte_fast>:

// No setting address or outputs, assuming already set
uint8_t gb_flash_read_byte_fast(void) {
	rdPin_low;
     44e:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     450:	00 00       	nop
	asm volatile("nop");
     452:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     454:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     456:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     458:	08 95       	ret

0000045a <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
     45a:	cf 93       	push	r28
     45c:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     45e:	2f ef       	ldi	r18, 0xFF	; 255
     460:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     462:	25 de       	rcall	.-950    	; 0xae <set_16bit_address>
	PORT_DATA7_0 = data;
     464:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     466:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <flashWriteWePin>
     46a:	81 34       	cpi	r24, 0x41	; 65
     46c:	31 f4       	brne	.+12     	; 0x47a <gb_flash_write_bus_cycle+0x20>
		audioPin_low; // WE low
     46e:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     470:	00 00       	nop
		asm volatile("nop");
     472:	00 00       	nop
		asm volatile("nop");
     474:	00 00       	nop
		audioPin_high; // WE high
     476:	39 9a       	sbi	0x07, 1	; 7
     478:	05 c0       	rjmp	.+10     	; 0x484 <gb_flash_write_bus_cycle+0x2a>
	}
	else { // WR pin
		wrPin_low; // WE low
     47a:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     47c:	00 00       	nop
		asm volatile("nop");
     47e:	00 00       	nop
		asm volatile("nop");
     480:	00 00       	nop
		wrPin_high; // WE high
     482:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
     484:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     486:	14 ba       	out	0x14, r1	; 20
}
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <gb_flash_write_bus_cycle_fast>:

void gb_flash_write_bus_cycle_fast(uint16_t address, uint8_t data) {
	PORT_ADDR15_8 = (address >> 8);
     48c:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     48e:	88 bb       	out	0x18, r24	; 24
	PORT_DATA7_0 = data;
     490:	65 bb       	out	0x15, r22	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     492:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <flashWriteWePin>
     496:	81 34       	cpi	r24, 0x41	; 65
     498:	31 f4       	brne	.+12     	; 0x4a6 <gb_flash_write_bus_cycle_fast+0x1a>
		audioPin_low; // WE low
     49a:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     49c:	00 00       	nop
		asm volatile("nop");
     49e:	00 00       	nop
		asm volatile("nop");
     4a0:	00 00       	nop
		audioPin_high; // WE high
     4a2:	39 9a       	sbi	0x07, 1	; 7
     4a4:	08 95       	ret
	}
	else { // WR pin
		wrPin_low; // WE low
     4a6:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     4a8:	00 00       	nop
		asm volatile("nop");
     4aa:	00 00       	nop
		asm volatile("nop");
     4ac:	00 00       	nop
		wrPin_high; // WE high
     4ae:	96 9a       	sbi	0x12, 6	; 18
     4b0:	08 95       	ret

000004b2 <gb_flash_write_byte>:
	}
}

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	8c 01       	movw	r16, r24
     4ba:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	84 bb       	out	0x14, r24	; 20
	
	gb_flash_write_bus_cycle_fast(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     4c0:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <flashWriteCycle+0x2>
     4c4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashWriteCycle>
     4c8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <flashWriteCycle+0x1>
     4cc:	df df       	rcall	.-66     	; 0x48c <gb_flash_write_bus_cycle_fast>
	gb_flash_write_bus_cycle_fast(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     4ce:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <flashWriteCycle+0x6>
     4d2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flashWriteCycle+0x4>
     4d6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <flashWriteCycle+0x5>
     4da:	d8 df       	rcall	.-80     	; 0x48c <gb_flash_write_bus_cycle_fast>
	gb_flash_write_bus_cycle_fast(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     4dc:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <flashWriteCycle+0xa>
     4e0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <flashWriteCycle+0x8>
     4e4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <flashWriteCycle+0x9>
     4e8:	d1 df       	rcall	.-94     	; 0x48c <gb_flash_write_bus_cycle_fast>
	gb_flash_write_bus_cycle_fast(address, data);
     4ea:	6c 2f       	mov	r22, r28
     4ec:	c8 01       	movw	r24, r16
     4ee:	ce df       	rcall	.-100    	; 0x48c <gb_flash_write_bus_cycle_fast>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f0:	8d e0       	ldi	r24, 0x0D	; 13
     4f2:	8a 95       	dec	r24
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <gb_flash_write_byte+0x40>
     4f6:	00 00       	nop
	_delay_us(5); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     4f8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     4fa:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte_fast();
     4fc:	a8 df       	rcall	.-176    	; 0x44e <gb_flash_read_byte_fast>
	while (data != dataVerify) {
     4fe:	8c 17       	cp	r24, r28
     500:	49 f0       	breq	.+18     	; 0x514 <gb_flash_write_byte+0x62>
		dataVerify = gb_flash_read_byte_fast();
     502:	a5 df       	rcall	.-182    	; 0x44e <gb_flash_read_byte_fast>
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	9a 95       	dec	r25
     508:	f1 f7       	brne	.-4      	; 0x506 <gb_flash_write_byte+0x54>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <gb_flash_write_byte+0x5a>
		_delay_us(1);
		if (writingTimedout == 1) {
     50c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
     510:	91 30       	cpi	r25, 0x01	; 1
     512:	a9 f7       	brne	.-22     	; 0x4fe <gb_flash_write_byte+0x4c>
			break;
		}
	}
}
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <gb_flash_write_byte_special>:

// Set the bank, write a single byte to the Flash address and pulse the reset pin
void gb_flash_write_byte_special(uint16_t address, uint8_t data) {
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	ec 01       	movw	r28, r24
     524:	16 2f       	mov	r17, r22
	// Set bank back
	if (flashBank1CommandWrites == 1) {
     526:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flashBank1CommandWrites>
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	51 f4       	brne	.+20     	; 0x542 <gb_flash_write_byte_special+0x26>
		write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <lastBankAccessed>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	91 e2       	ldi	r25, 0x21	; 33
     538:	c6 dd       	rcall	.-1140   	; 0xc6 <write_8bit_data>
     53a:	85 e8       	ldi	r24, 0x85	; 133
     53c:	8a 95       	dec	r24
     53e:	f1 f7       	brne	.-4      	; 0x53c <gb_flash_write_byte_special+0x20>
     540:	00 00       	nop
		_delay_us(50);
	}
	
	// Write
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     542:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <flashWriteCycle+0x2>
     546:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashWriteCycle>
     54a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <flashWriteCycle+0x1>
     54e:	85 df       	rcall	.-246    	; 0x45a <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     550:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <flashWriteCycle+0x6>
     554:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flashWriteCycle+0x4>
     558:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <flashWriteCycle+0x5>
     55c:	7e df       	rcall	.-260    	; 0x45a <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     55e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <flashWriteCycle+0xa>
     562:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <flashWriteCycle+0x8>
     566:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <flashWriteCycle+0x9>
     56a:	77 df       	rcall	.-274    	; 0x45a <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     56c:	61 2f       	mov	r22, r17
     56e:	ce 01       	movw	r24, r28
     570:	74 df       	rcall	.-280    	; 0x45a <gb_flash_write_bus_cycle>
     572:	83 ef       	ldi	r24, 0xF3	; 243
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <gb_flash_write_byte_special+0x5a>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <gb_flash_write_byte_special+0x60>
     57c:	00 00       	nop
	_delay_us(250); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     57e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     580:	14 ba       	out	0x14, r1	; 20
	
	// Pulse reset
	PORTE &= ~(1<<CS2_PIN);
     582:	3a 98       	cbi	0x07, 2	; 7
     584:	95 e8       	ldi	r25, 0x85	; 133
     586:	9a 95       	dec	r25
     588:	f1 f7       	brne	.-4      	; 0x586 <gb_flash_write_byte_special+0x6a>
     58a:	00 00       	nop
	_delay_us(50);
	PORTE |= (1<<CS2_PIN);
     58c:	3a 9a       	sbi	0x07, 2	; 7
     58e:	85 e8       	ldi	r24, 0x85	; 133
     590:	8a 95       	dec	r24
     592:	f1 f7       	brne	.-4      	; 0x590 <gb_flash_write_byte_special+0x74>
     594:	00 00       	nop
	_delay_us(50);
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	08 95       	ret

0000059e <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ec 01       	movw	r28, r24
     5aa:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
     5ac:	ff 24       	eor	r15, r15
     5ae:	fa 94       	dec	r15
     5b0:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     5b2:	01 e2       	ldi	r16, 0x21	; 33
     5b4:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     5b6:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     5bc:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5be:	00 00       	nop
	wrPin_high;
     5c0:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     5c2:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <flashWriteCycle+0x2>
     5c6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashWriteCycle>
     5ca:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <flashWriteCycle+0x1>
     5ce:	45 df       	rcall	.-374    	; 0x45a <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     5d0:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <flashWriteCycle+0x6>
     5d4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flashWriteCycle+0x4>
     5d8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <flashWriteCycle+0x5>
     5dc:	3e df       	rcall	.-388    	; 0x45a <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     5de:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <flashWriteCycle+0xa>
     5e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <flashWriteCycle+0x8>
     5e6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <flashWriteCycle+0x9>
     5ea:	37 df       	rcall	.-402    	; 0x45a <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
     5ec:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     5ee:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     5f0:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
     5f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lastBankAccessed>
     5f6:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     5f8:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5fa:	00 00       	nop
	wrPin_high;
     5fc:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
     5fe:	61 2f       	mov	r22, r17
     600:	ce 01       	movw	r24, r28
     602:	2b df       	rcall	.-426    	; 0x45a <gb_flash_write_bus_cycle>
     604:	8a e1       	ldi	r24, 0x1A	; 26
     606:	8a 95       	dec	r24
     608:	f1 f7       	brne	.-4      	; 0x606 <gb_flash_write_byte_bank1_commands+0x68>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <gb_flash_write_byte_bank1_commands+0x6e>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     60c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     60e:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     610:	ce 01       	movw	r24, r28
     612:	14 df       	rcall	.-472    	; 0x43c <gb_flash_read_byte>
	while (data != dataVerify) {
     614:	81 17       	cp	r24, r17
     616:	51 f0       	breq	.+20     	; 0x62c <gb_flash_write_byte_bank1_commands+0x8e>
		dataVerify = gb_flash_read_byte(address);
     618:	ce 01       	movw	r24, r28
     61a:	10 df       	rcall	.-480    	; 0x43c <gb_flash_read_byte>
     61c:	9d e0       	ldi	r25, 0x0D	; 13
     61e:	9a 95       	dec	r25
     620:	f1 f7       	brne	.-4      	; 0x61e <gb_flash_write_byte_bank1_commands+0x80>
     622:	00 00       	nop
		_delay_us(5);
		if (writingTimedout == 1) {
     624:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
     628:	91 30       	cpi	r25, 0x01	; 1
     62a:	a1 f7       	brne	.-24     	; 0x614 <gb_flash_write_byte_bank1_commands+0x76>
			break;
		}
	}
}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	08 95       	ret

00000638 <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     63c:	8c 01       	movw	r16, r24
     63e:	22 27       	eor	r18, r18
     640:	33 27       	eor	r19, r19
     642:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     644:	07 2f       	mov	r16, r23
     646:	18 2f       	mov	r17, r24
     648:	29 2f       	mov	r18, r25
     64a:	33 27       	eor	r19, r19
     64c:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     64e:	68 bb       	out	0x18, r22	; 24
	
	cs_mreqPin_low;
     650:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
     652:	5b bb       	out	0x1b, r21	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
     654:	48 bb       	out	0x18, r20	; 24
	
	wrPin_low;
     656:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     658:	00 00       	nop
	asm volatile("nop");
     65a:	00 00       	nop
	asm volatile("nop");
     65c:	00 00       	nop
	wrPin_high;
     65e:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     660:	94 9a       	sbi	0x12, 4	; 18
}
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <gba_flash_write_cycle_start_swapped>:

// Send the first 3 write cycles to the flash (swapped D0/D1)
void gba_flash_write_cycle_start_swapped(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     66c:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     66e:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xA9
	GBA_PORT_ROM_ADDR23_16 = 0;
     670:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     672:	95 e0       	ldi	r25, 0x05	; 5
     674:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     676:	85 e5       	ldi	r24, 0x55	; 85
     678:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     67a:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     67c:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA9;
     67e:	29 ea       	ldi	r18, 0xA9	; 169
     680:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     682:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     684:	00 00       	nop
	asm volatile("nop");
     686:	00 00       	nop
	asm volatile("nop");
     688:	00 00       	nop
	wrPin_high;
     68a:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     68c:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x56
	GBA_PORT_ROM_ADDR23_16 = 0;
     68e:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     690:	22 e0       	ldi	r18, 0x02	; 2
     692:	2b bb       	out	0x1b, r18	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     694:	2a ea       	ldi	r18, 0xAA	; 170
     696:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     698:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     69a:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x56;
     69c:	26 e5       	ldi	r18, 0x56	; 86
     69e:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     6a0:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6a2:	00 00       	nop
	asm volatile("nop");
     6a4:	00 00       	nop
	asm volatile("nop");
     6a6:	00 00       	nop
	wrPin_high;
     6a8:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6aa:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     6ac:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     6ae:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     6b0:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     6b2:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6b4:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     6b6:	80 ea       	ldi	r24, 0xA0	; 160
     6b8:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     6ba:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6bc:	00 00       	nop
	asm volatile("nop");
     6be:	00 00       	nop
	asm volatile("nop");
     6c0:	00 00       	nop
	wrPin_high;
     6c2:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6c4:	94 9a       	sbi	0x12, 4	; 18
     6c6:	08 95       	ret

000006c8 <gba_flash_write_cycle_start>:


// Send the first 3 write cycles to the flash
void gba_flash_write_cycle_start(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     6cc:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     6ce:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xAA
	GBA_PORT_ROM_ADDR23_16 = 0;
     6d0:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     6d2:	95 e0       	ldi	r25, 0x05	; 5
     6d4:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     6d6:	85 e5       	ldi	r24, 0x55	; 85
     6d8:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     6da:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6dc:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xAA;
     6de:	2a ea       	ldi	r18, 0xAA	; 170
     6e0:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     6e2:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6e4:	00 00       	nop
	asm volatile("nop");
     6e6:	00 00       	nop
	asm volatile("nop");
     6e8:	00 00       	nop
	wrPin_high;
     6ea:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6ec:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x55
	GBA_PORT_ROM_ADDR23_16 = 0;
     6ee:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     6f0:	32 e0       	ldi	r19, 0x02	; 2
     6f2:	3b bb       	out	0x1b, r19	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     6f4:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     6f6:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6f8:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x55;
     6fa:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     6fc:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6fe:	00 00       	nop
	asm volatile("nop");
     700:	00 00       	nop
	asm volatile("nop");
     702:	00 00       	nop
	wrPin_high;
     704:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     706:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     708:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     70a:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     70c:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     70e:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     710:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     712:	80 ea       	ldi	r24, 0xA0	; 160
     714:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     716:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     718:	00 00       	nop
	asm volatile("nop");
     71a:	00 00       	nop
	asm volatile("nop");
     71c:	00 00       	nop
	wrPin_high;
     71e:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     720:	94 9a       	sbi	0x12, 4	; 18
     722:	08 95       	ret

00000724 <gba_flash_write_byte>:
}	


// Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify the correct data has been written.
// Address is divided by 2 as we are in GBA mode. 
void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
     724:	cf 92       	push	r12
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	6b 01       	movw	r12, r22
     732:	7c 01       	movw	r14, r24
     734:	ea 01       	movw	r28, r20
	if (isD0D1Swapped == 0) {
     736:	21 11       	cpse	r18, r1
     738:	02 c0       	rjmp	.+4      	; 0x73e <gba_flash_write_byte+0x1a>
		gba_flash_write_cycle_start();
     73a:	c6 df       	rcall	.-116    	; 0x6c8 <gba_flash_write_cycle_start>
     73c:	01 c0       	rjmp	.+2      	; 0x740 <gba_flash_write_byte+0x1c>
	}
	else {
		gba_flash_write_cycle_start_swapped();
     73e:	94 df       	rcall	.-216    	; 0x668 <gba_flash_write_cycle_start_swapped>
	}
	gba_flash_write_bus_cycle(address, data);
     740:	ae 01       	movw	r20, r28
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	78 df       	rcall	.-272    	; 0x638 <gba_flash_write_bus_cycle>
     748:	25 e0       	ldi	r18, 0x05	; 5
     74a:	2a 95       	dec	r18
     74c:	f1 f7       	brne	.-4      	; 0x74a <gba_flash_write_byte+0x26>
     74e:	00 00       	nop
	_delay_us(2); // Wait byte program time
	
	// Verify data
	uint16_t dataVerify = gba_read_16bit_data(address);
     750:	c7 01       	movw	r24, r14
     752:	b6 01       	movw	r22, r12
     754:	ec dc       	rcall	.-1576   	; 0x12e <gba_read_16bit_data>
	while (data != dataVerify) {
     756:	8c 17       	cp	r24, r28
     758:	9d 07       	cpc	r25, r29
     75a:	59 f0       	breq	.+22     	; 0x772 <gba_flash_write_byte+0x4e>
		dataVerify = gba_read_16bit_data(address);
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	e6 dc       	rcall	.-1588   	; 0x12e <gba_read_16bit_data>
     762:	25 e0       	ldi	r18, 0x05	; 5
     764:	2a 95       	dec	r18
     766:	f1 f7       	brne	.-4      	; 0x764 <gba_flash_write_byte+0x40>
     768:	00 00       	nop
		_delay_us(2);
		if (writingTimedout == 1) {
     76a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
     76e:	21 30       	cpi	r18, 0x01	; 1
     770:	91 f7       	brne	.-28     	; 0x756 <gba_flash_write_byte+0x32>
			break;
		}
	}
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	08 95       	ret

00000780 <start_timeout_timer>:

// Timeout for ~500ms when flashing carts
void start_timeout_timer(void) {
	writingTimedout = 0;
     780:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	TCNT1 = 0;
     784:	1d bc       	out	0x2d, r1	; 45
     786:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS11) | (1<<CS10);
     788:	8e b5       	in	r24, 0x2e	; 46
     78a:	83 60       	ori	r24, 0x03	; 3
     78c:	8e bd       	out	0x2e, r24	; 46
     78e:	08 95       	ret

00000790 <stop_timeout_timer>:
}

// Stop the flash timeout timer
void stop_timeout_timer(void) {
	writingTimedout = 0;
     790:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	TCNT1 = 0;
     794:	1d bc       	out	0x2d, r1	; 45
     796:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0;
     798:	1e bc       	out	0x2e, r1	; 46
	PORTD &= ~(1<<ACTIVITY_LED);
     79a:	93 98       	cbi	0x12, 3	; 18
     79c:	08 95       	ret

0000079e <check_if_timed_out>:
}

void check_if_timed_out(void) {
	if (writingTimedout == 0) {
     79e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     7a2:	81 11       	cpse	r24, r1
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <check_if_timed_out+0x10>
		stop_timeout_timer();		
     7a6:	f4 df       	rcall	.-24     	; 0x790 <stop_timeout_timer>
		USART_Transmit(SEND_ACK); // Send back acknowledgement
     7a8:	81 e3       	ldi	r24, 0x31	; 49
     7aa:	50 dc       	rcall	.-1888   	; 0x4c <USART_Transmit>
		PORTD &= ~(1<<ACTIVITY_LED);
     7ac:	93 98       	cbi	0x12, 3	; 18
     7ae:	08 95       	ret

000007b0 <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
     7b0:	84 b7       	in	r24, 0x34	; 52
     7b2:	87 7f       	andi	r24, 0xF7	; 247
     7b4:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
     7b6:	88 e1       	ldi	r24, 0x18	; 24
     7b8:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
     7ba:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
     7bc:	6b dc       	rcall	.-1834   	; 0x94 <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V);
     7be:	81 b3       	in	r24, 0x11	; 17
     7c0:	88 6f       	ori	r24, 0xF8	; 248
     7c2:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
     7c4:	86 b1       	in	r24, 0x06	; 6
     7c6:	85 60       	ori	r24, 0x05	; 5
     7c8:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
     7ca:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     7cc:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
     7ce:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
     7d0:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
     7d2:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
     7d4:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (PIND & (1<<SWITCH_DETECT)) {
     7d6:	82 9b       	sbis	0x10, 2	; 16
     7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <setup+0x46>
		PORTD |= (1<<LED_5V);
     7da:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
     7dc:	38 98       	cbi	0x07, 0	; 7
		
		// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
		cs2Pin_low;
     7de:	3a 98       	cbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e0:	2f e7       	ldi	r18, 0x7F	; 127
     7e2:	88 e3       	ldi	r24, 0x38	; 56
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	21 50       	subi	r18, 0x01	; 1
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <setup+0x36>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <setup+0x40>
     7f0:	00 00       	nop
		_delay_ms(50);
		cs2Pin_high;
     7f2:	3a 9a       	sbi	0x07, 2	; 7
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <setup+0x4a>
	}
	else {
		PORTE |= (1<<LED_3V);
     7f6:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
     7f8:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
     7fa:	93 9a       	sbi	0x12, 3	; 18
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	84 e3       	ldi	r24, 0x34	; 52
     800:	9c e0       	ldi	r25, 0x0C	; 12
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <setup+0x52>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <setup+0x5c>
     80c:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
     80e:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
     810:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
     812:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
     814:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
     816:	54 9a       	sbi	0x0a, 4	; 10
	
	// Timer1 setup
	TIMSK |= (1<<TOIE1);
     818:	89 b7       	in	r24, 0x39	; 57
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0;
     81e:	1d bc       	out	0x2d, r1	; 45
     820:	1c bc       	out	0x2c, r1	; 44
	
	// Turn on interrupts
	sei();
     822:	78 94       	sei
     824:	08 95       	ret

00000826 <__vector_6>:
		}
	}
}

// Timeout after ~500ms which also blinks the LED
ISR(TIMER1_OVF_vect) {
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
	PORTD ^= (1<<ACTIVITY_LED);
     834:	92 b3       	in	r25, 0x12	; 18
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	89 27       	eor	r24, r25
     83a:	82 bb       	out	0x12, r24	; 18
	writingTimedout = 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <main>:
#include <stdlib.h>
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	aa 97       	sbiw	r28, 0x2a	; 42
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
	setup();
     864:	a5 df       	rcall	.-182    	; 0x7b0 <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	2e a3       	std	Y+38, r18	; 0x26

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8d a3       	std	Y+37, r24	; 0x25


int main(void) {
	setup();
	
	uint32_t address = 0;
     86e:	41 2c       	mov	r4, r1
     870:	51 2c       	mov	r5, r1
     872:	32 01       	movw	r6, r4
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Wait until ready
				while ((status & 0x80) != 0x80) {
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
     874:	99 24       	eor	r9, r9
     876:	9a 94       	dec	r9
     878:	1e 01       	movw	r2, r28
     87a:	91 e2       	ldi	r25, 0x21	; 33
     87c:	29 0e       	add	r2, r25
     87e:	31 1c       	adc	r3, r1
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
     880:	be a1       	ldd	r27, Y+38	; 0x26
     882:	b1 30       	cpi	r27, 0x01	; 1
     884:	09 f4       	brne	.+2      	; 0x888 <main+0x38>
			rd_wr_csmreq_cs2_reset();
     886:	06 dc       	rcall	.-2036   	; 0x94 <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     888:	dd db       	rcall	.-2118   	; 0x44 <USART_Receive>
     88a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
     88e:	82 9b       	sbis	0x10, 2	; 16
     890:	04 c0       	rjmp	.+8      	; 0x89a <main+0x4a>
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
     892:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
     894:	38 98       	cbi	0x07, 0	; 7
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
			cartMode = GB_MODE;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <main+0x50>
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
			PORTE |= (1<<LED_3V);
     89a:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
     89c:	97 98       	cbi	0x12, 7	; 18
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
     89e:	82 e0       	ldi	r24, 0x02	; 2
			PORTE |= (1<<LED_3V);
			PORTD &= ~(1<<LED_5V);
		}
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     8a0:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <receivedChar>
     8a4:	93 34       	cpi	r25, 0x43	; 67
     8a6:	11 f4       	brne	.+4      	; 0x8ac <main+0x5c>
			USART_Transmit(cartMode);
     8a8:	d1 db       	rcall	.-2142   	; 0x4c <USART_Transmit>
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <main+0x66>
			stop_timeout_timer();
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     8ac:	97 34       	cpi	r25, 0x47	; 71
     8ae:	29 f4       	brne	.+10     	; 0x8ba <main+0x6a>
			gb_mode();
     8b0:	f6 db       	rcall	.-2068   	; 0x9e <gb_mode>
			flashBank1CommandWrites = 0; // Reset back to normal
     8b2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flashBank1CommandWrites>
			stop_timeout_timer();
     8b6:	6c df       	rcall	.-296    	; 0x790 <stop_timeout_timer>
     8b8:	e3 cf       	rjmp	.-58     	; 0x880 <main+0x30>
		}
		else if (receivedChar == GBA_CART_MODE) {
     8ba:	97 36       	cpi	r25, 0x67	; 103
     8bc:	11 f4       	brne	.+4      	; 0x8c2 <main+0x72>
			gba_mode();
     8be:	19 dc       	rcall	.-1998   	; 0xf2 <gba_mode>
     8c0:	fa cf       	rjmp	.-12     	; 0x8b6 <main+0x66>
		}
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     8c2:	91 34       	cpi	r25, 0x41	; 65
     8c4:	59 f4       	brne	.+22     	; 0x8dc <main+0x8c>
			usart_read_chars(); // Read start address
     8c6:	db db       	rcall	.-2122   	; 0x7e <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     8c8:	40 e1       	ldi	r20, 0x10	; 16
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	81 e7       	ldi	r24, 0x71	; 113
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	90 d7       	rcall	.+3872   	; 0x17f6 <strtol>
     8d6:	2b 01       	movw	r4, r22
     8d8:	3c 01       	movw	r6, r24
     8da:	d2 cf       	rjmp	.-92     	; 0x880 <main+0x30>
		}
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     8dc:	92 35       	cpi	r25, 0x52	; 82
     8de:	e9 f4       	brne	.+58     	; 0x91a <main+0xca>
			gb_mode();
     8e0:	de db       	rcall	.-2116   	; 0x9e <gb_mode>
			receivedChar = '1';
     8e2:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
     8e4:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
     8e8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
     8ec:	81 33       	cpi	r24, 0x31	; 49
     8ee:	41 f6       	brne	.-112    	; 0x880 <main+0x30>
				PORTD |= (1<<ACTIVITY_LED);
     8f0:	93 9a       	sbi	0x12, 3	; 18
     8f2:	00 e0       	ldi	r16, 0x00	; 0
     8f4:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     8f6:	c8 01       	movw	r24, r16
     8f8:	84 0d       	add	r24, r4
     8fa:	95 1d       	adc	r25, r5
     8fc:	db db       	rcall	.-2122   	; 0xb4 <read_8bit_data>
     8fe:	a6 db       	rcall	.-2228   	; 0x4c <USART_Transmit>
     900:	0f 5f       	subi	r16, 0xFF	; 255
     902:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     904:	00 34       	cpi	r16, 0x40	; 64
     906:	11 05       	cpc	r17, r1
     908:	b1 f7       	brne	.-20     	; 0x8f6 <main+0xa6>
     90a:	e0 e4       	ldi	r30, 0x40	; 64
     90c:	4e 0e       	add	r4, r30
     90e:	51 1c       	adc	r5, r1
     910:	61 1c       	adc	r6, r1
     912:	71 1c       	adc	r7, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     914:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     916:	96 db       	rcall	.-2260   	; 0x44 <USART_Receive>
     918:	e5 cf       	rjmp	.-54     	; 0x8e4 <main+0x94>
			}
		}
		
		// Read and send 0x4000 bytes of data
		else if (receivedChar == READ_ROM_4000H) {
     91a:	91 35       	cpi	r25, 0x51	; 81
     91c:	a1 f4       	brne	.+40     	; 0x946 <main+0xf6>
			gb_mode();
     91e:	bf db       	rcall	.-2178   	; 0x9e <gb_mode>
			PORTD |= (1<<ACTIVITY_LED);
     920:	93 9a       	sbi	0x12, 3	; 18
			for (uint16_t x = 0; x < 0x4000; x++) {
     922:	00 e0       	ldi	r16, 0x00	; 0
     924:	10 e0       	ldi	r17, 0x00	; 0
				USART_Transmit(read_8bit_data(address));
     926:	c8 01       	movw	r24, r16
     928:	84 0d       	add	r24, r4
     92a:	95 1d       	adc	r25, r5
     92c:	c3 db       	rcall	.-2170   	; 0xb4 <read_8bit_data>
     92e:	8e db       	rcall	.-2276   	; 0x4c <USART_Transmit>
		
		// Read and send 0x4000 bytes of data
		else if (receivedChar == READ_ROM_4000H) {
			gb_mode();
			PORTD |= (1<<ACTIVITY_LED);
			for (uint16_t x = 0; x < 0x4000; x++) {
     930:	0f 5f       	subi	r16, 0xFF	; 255
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	01 15       	cp	r16, r1
     936:	f0 e4       	ldi	r31, 0x40	; 64
     938:	1f 07       	cpc	r17, r31
     93a:	a9 f7       	brne	.-22     	; 0x926 <main+0xd6>
     93c:	20 e4       	ldi	r18, 0x40	; 64
     93e:	52 0e       	add	r5, r18
     940:	61 1c       	adc	r6, r1
     942:	71 1c       	adc	r7, r1
     944:	a0 c0       	rjmp	.+320    	; 0xa86 <main+0x236>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     946:	97 35       	cpi	r25, 0x57	; 87
     948:	f1 f4       	brne	.+60     	; 0x986 <main+0x136>
			gb_mode();
     94a:	a9 db       	rcall	.-2222   	; 0x9e <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     94c:	80 e4       	ldi	r24, 0x40	; 64
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	81 db       	rcall	.-2302   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     952:	93 9a       	sbi	0x12, 3	; 18
     954:	e1 e7       	ldi	r30, 0x71	; 113
     956:	ee 2e       	mov	r14, r30
     958:	e0 e0       	ldi	r30, 0x00	; 0
     95a:	fe 2e       	mov	r15, r30
     95c:	00 e0       	ldi	r16, 0x00	; 0
     95e:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     960:	d7 01       	movw	r26, r14
     962:	6d 91       	ld	r22, X+
     964:	7d 01       	movw	r14, r26
     966:	c8 01       	movw	r24, r16
     968:	84 0d       	add	r24, r4
     96a:	95 1d       	adc	r25, r5
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	ab db       	rcall	.-2218   	; 0xc6 <write_8bit_data>
     970:	0f 5f       	subi	r16, 0xFF	; 255
     972:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     974:	00 34       	cpi	r16, 0x40	; 64
     976:	11 05       	cpc	r17, r1
     978:	99 f7       	brne	.-26     	; 0x960 <main+0x110>
     97a:	b0 e4       	ldi	r27, 0x40	; 64
     97c:	4b 0e       	add	r4, r27
     97e:	51 1c       	adc	r5, r1
     980:	61 1c       	adc	r6, r1
     982:	71 1c       	adc	r7, r1
     984:	3f c4       	rjmp	.+2174   	; 0x1204 <main+0x9b4>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     986:	92 34       	cpi	r25, 0x42	; 66
     988:	e1 f4       	brne	.+56     	; 0x9c2 <main+0x172>
			gb_mode();
     98a:	89 db       	rcall	.-2286   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read start address
     98c:	78 db       	rcall	.-2320   	; 0x7e <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     98e:	40 e1       	ldi	r20, 0x10	; 16
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	81 e7       	ldi	r24, 0x71	; 113
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	2d d7       	rcall	.+3674   	; 0x17f6 <strtol>
     99c:	6b 01       	movw	r12, r22
     99e:	7c 01       	movw	r14, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
     9a0:	51 db       	rcall	.-2398   	; 0x44 <USART_Receive>
     9a2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
			if (receivedChar == 'B') {
     9a6:	82 34       	cpi	r24, 0x42	; 66
     9a8:	09 f0       	breq	.+2      	; 0x9ac <main+0x15c>
     9aa:	6a cf       	rjmp	.-300    	; 0x880 <main+0x30>
				usart_read_chars(); // Read data
     9ac:	68 db       	rcall	.-2352   	; 0x7e <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     9ae:	81 e7       	ldi	r24, 0x71	; 113
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	32 d8       	rcall	.-3996   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
     9b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lastBankAccessed>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	68 2f       	mov	r22, r24
     9bc:	c6 01       	movw	r24, r12
     9be:	83 db       	rcall	.-2298   	; 0xc6 <write_8bit_data>
     9c0:	5f cf       	rjmp	.-322    	; 0x880 <main+0x30>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     9c2:	92 37       	cpi	r25, 0x72	; 114
     9c4:	19 f0       	breq	.+6      	; 0x9cc <main+0x17c>
     9c6:	9a 36       	cpi	r25, 0x6A	; 106
     9c8:	09 f0       	breq	.+2      	; 0x9cc <main+0x17c>
     9ca:	3f c0       	rjmp	.+126    	; 0xa4a <main+0x1fa>
			gba_mode();
     9cc:	92 db       	rcall	.-2268   	; 0xf2 <gba_mode>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     9ce:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
     9d2:	8a 36       	cpi	r24, 0x6A	; 106
     9d4:	11 f0       	breq	.+4      	; 0x9da <main+0x18a>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
     9d6:	10 e2       	ldi	r17, 0x20	; 32
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <main+0x18c>
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
     9da:	10 e8       	ldi	r17, 0x80	; 128
			}
			
			receivedChar = '1';
     9dc:	81 e3       	ldi	r24, 0x31	; 49
     9de:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
     9e2:	cc 24       	eor	r12, r12
     9e4:	ca 94       	dec	r12
     9e6:	c1 0e       	add	r12, r17
     9e8:	d1 2c       	mov	r13, r1
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	d7 01       	movw	r26, r14
     9f0:	c6 01       	movw	r24, r12
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	a1 1d       	adc	r26, r1
     9f6:	b1 1d       	adc	r27, r1
     9f8:	89 a3       	std	Y+33, r24	; 0x21
     9fa:	9a a3       	std	Y+34, r25	; 0x22
     9fc:	ab a3       	std	Y+35, r26	; 0x23
     9fe:	bc a3       	std	Y+36, r27	; 0x24
			while (receivedChar == '1') {
     a00:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
     a04:	81 33       	cpi	r24, 0x31	; 49
     a06:	09 f0       	breq	.+2      	; 0xa0a <main+0x1ba>
     a08:	3b cf       	rjmp	.-394    	; 0x880 <main+0x30>
				PORTD |= (1<<ACTIVITY_LED);
     a0a:	93 9a       	sbi	0x12, 3	; 18
     a0c:	73 01       	movw	r14, r6
     a0e:	62 01       	movw	r12, r4
				
				for (uint8_t x = 0; x < readEnd; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	8c db       	rcall	.-2280   	; 0x12e <gba_read_16bit_data>
     a16:	09 2f       	mov	r16, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     a18:	19 db       	rcall	.-2510   	; 0x4c <USART_Transmit>
					USART_Transmit(dataRead >> 8);
     a1a:	80 2f       	mov	r24, r16
     a1c:	17 db       	rcall	.-2514   	; 0x4c <USART_Transmit>
					
					address++;
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
     a20:	c9 1a       	sub	r12, r25
     a22:	d9 0a       	sbc	r13, r25
     a24:	e9 0a       	sbc	r14, r25
     a26:	f9 0a       	sbc	r15, r25
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     a28:	8c 2d       	mov	r24, r12
     a2a:	84 19       	sub	r24, r4
     a2c:	81 17       	cp	r24, r17
     a2e:	80 f3       	brcs	.-32     	; 0xa10 <main+0x1c0>
     a30:	89 a1       	ldd	r24, Y+33	; 0x21
     a32:	9a a1       	ldd	r25, Y+34	; 0x22
     a34:	ab a1       	ldd	r26, Y+35	; 0x23
     a36:	bc a1       	ldd	r27, Y+36	; 0x24
     a38:	48 0e       	add	r4, r24
     a3a:	59 1e       	adc	r5, r25
     a3c:	6a 1e       	adc	r6, r26
     a3e:	7b 1e       	adc	r7, r27
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     a40:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     a42:	00 db       	rcall	.-2560   	; 0x44 <USART_Receive>
     a44:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
     a48:	db cf       	rjmp	.-74     	; 0xa00 <main+0x1b0>
			}
		}
		
		// Read and send 0x10000 bytes of data
		else if (receivedChar == GBA_READ_ROM_8000H) {
     a4a:	9a 35       	cpi	r25, 0x5A	; 90
     a4c:	f1 f4       	brne	.+60     	; 0xa8a <main+0x23a>
			gba_mode();
     a4e:	51 db       	rcall	.-2398   	; 0xf2 <gba_mode>
			
			PORTD |= (1<<ACTIVITY_LED);
     a50:	93 9a       	sbi	0x12, 3	; 18
			gba_set_24bit_address(address);
     a52:	c3 01       	movw	r24, r6
     a54:	b2 01       	movw	r22, r4
     a56:	55 db       	rcall	.-2390   	; 0x102 <gba_set_24bit_address>
			cs_mreqPin_low;
     a58:	94 98       	cbi	0x12, 4	; 18
			
			GBA_PORT_ROM_ADDR15_8 = 0;
     a5a:	1b ba       	out	0x1b, r1	; 27
			GBA_PORT_ROM_ADDR7_0 = 0;
     a5c:	18 ba       	out	0x18, r1	; 24
			GBA_DDR_ROM_ADDR15_8 = 0;
     a5e:	1a ba       	out	0x1a, r1	; 26
			GBA_DDR_ROM_ADDR7_0 = 0;
     a60:	17 ba       	out	0x17, r1	; 23
			
			for (uint16_t x = 0; x < 0x8000; x++) {
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	17 fd       	sbrc	r17, 7
     a68:	0a c0       	rjmp	.+20     	; 0xa7e <main+0x22e>
				rdPin_low;
     a6a:	95 98       	cbi	0x12, 5	; 18
				asm volatile("nop");
     a6c:	00 00       	nop
				
				USART_Transmit(GBA_PIN_ROM_DATA7_0);
     a6e:	86 b3       	in	r24, 0x16	; 22
     a70:	ed da       	rcall	.-2598   	; 0x4c <USART_Transmit>
				USART_Transmit(GBA_PIN_ROM_DATA15_8);
     a72:	89 b3       	in	r24, 0x19	; 25
     a74:	eb da       	rcall	.-2602   	; 0x4c <USART_Transmit>
				rdPin_high;
     a76:	95 9a       	sbi	0x12, 5	; 18
			GBA_PORT_ROM_ADDR15_8 = 0;
			GBA_PORT_ROM_ADDR7_0 = 0;
			GBA_DDR_ROM_ADDR15_8 = 0;
			GBA_DDR_ROM_ADDR7_0 = 0;
			
			for (uint16_t x = 0; x < 0x8000; x++) {
     a78:	0f 5f       	subi	r16, 0xFF	; 255
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
     a7c:	f4 cf       	rjmp	.-24     	; 0xa66 <main+0x216>
				
				USART_Transmit(GBA_PIN_ROM_DATA7_0);
				USART_Transmit(GBA_PIN_ROM_DATA15_8);
				rdPin_high;
			}
			address += 0x8000;
     a7e:	90 e8       	ldi	r25, 0x80	; 128
     a80:	59 0e       	add	r5, r25
     a82:	61 1c       	adc	r6, r1
     a84:	71 1c       	adc	r7, r1
			
			PORTD &= ~(1<<ACTIVITY_LED);
     a86:	93 98       	cbi	0x12, 3	; 18
     a88:	fb ce       	rjmp	.-522    	; 0x880 <main+0x30>
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     a8a:	9d 36       	cpi	r25, 0x6D	; 109
     a8c:	e9 f4       	brne	.+58     	; 0xac8 <main+0x278>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     a8e:	07 db       	rcall	.-2546   	; 0x9e <gb_mode>
			
			receivedChar = '1';
     a90:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
     a92:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
     a96:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
     a9a:	81 33       	cpi	r24, 0x31	; 49
     a9c:	b1 f5       	brne	.+108    	; 0xb0a <main+0x2ba>
				PORTD |= (1<<ACTIVITY_LED);
     a9e:	93 9a       	sbi	0x12, 3	; 18
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     aa4:	c8 01       	movw	r24, r16
     aa6:	84 0d       	add	r24, r4
     aa8:	95 1d       	adc	r25, r5
     aaa:	50 db       	rcall	.-2400   	; 0x14c <gba_read_ram_8bit_data>
     aac:	cf da       	rcall	.-2658   	; 0x4c <USART_Transmit>
     aae:	0f 5f       	subi	r16, 0xFF	; 255
     ab0:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     ab2:	00 34       	cpi	r16, 0x40	; 64
     ab4:	11 05       	cpc	r17, r1
     ab6:	b1 f7       	brne	.-20     	; 0xaa4 <main+0x254>
     ab8:	a0 e4       	ldi	r26, 0x40	; 64
     aba:	4a 0e       	add	r4, r26
     abc:	51 1c       	adc	r5, r1
     abe:	61 1c       	adc	r6, r1
     ac0:	71 1c       	adc	r7, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     ac2:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     ac4:	bf da       	rcall	.-2690   	; 0x44 <USART_Receive>
     ac6:	e5 cf       	rjmp	.-54     	; 0xa92 <main+0x242>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     ac8:	97 37       	cpi	r25, 0x77	; 119
     aca:	09 f5       	brne	.+66     	; 0xb0e <main+0x2be>
			gb_mode();
     acc:	e8 da       	rcall	.-2608   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     ace:	80 e4       	ldi	r24, 0x40	; 64
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	c0 da       	rcall	.-2688   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     ad4:	93 9a       	sbi	0x12, 3	; 18
     ad6:	71 e7       	ldi	r23, 0x71	; 113
     ad8:	e7 2e       	mov	r14, r23
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	f7 2e       	mov	r15, r23
     ade:	00 e0       	ldi	r16, 0x00	; 0
     ae0:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     ae2:	f7 01       	movw	r30, r14
     ae4:	61 91       	ld	r22, Z+
     ae6:	7f 01       	movw	r14, r30
     ae8:	c8 01       	movw	r24, r16
     aea:	84 0d       	add	r24, r4
     aec:	95 1d       	adc	r25, r5
     aee:	37 db       	rcall	.-2450   	; 0x15e <gba_write_ram_8bit_data>
     af0:	0f 5f       	subi	r16, 0xFF	; 255
     af2:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     af4:	00 34       	cpi	r16, 0x40	; 64
     af6:	11 05       	cpc	r17, r1
     af8:	a1 f7       	brne	.-24     	; 0xae2 <main+0x292>
     afa:	f0 e4       	ldi	r31, 0x40	; 64
     afc:	4f 0e       	add	r4, r31
     afe:	51 1c       	adc	r5, r1
     b00:	61 1c       	adc	r6, r1
     b02:	71 1c       	adc	r7, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     b04:	81 e3       	ldi	r24, 0x31	; 49
     b06:	a2 da       	rcall	.-2748   	; 0x4c <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
     b08:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
     b0a:	f3 da       	rcall	.-2586   	; 0xf2 <gba_mode>
     b0c:	b9 ce       	rjmp	.-654    	; 0x880 <main+0x30>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     b0e:	9f 36       	cpi	r25, 0x6F	; 111
     b10:	31 f4       	brne	.+12     	; 0xb1e <main+0x2ce>
			gb_mode();
     b12:	c5 da       	rcall	.-2678   	; 0x9e <gb_mode>
			
			uint8_t data = USART_Receive();
     b14:	97 da       	rcall	.-2770   	; 0x44 <USART_Receive>
			gba_write_ram_8bit_data(address, data);
     b16:	68 2f       	mov	r22, r24
     b18:	c2 01       	movw	r24, r4
     b1a:	21 db       	rcall	.-2494   	; 0x15e <gba_write_ram_8bit_data>
     b1c:	23 c0       	rjmp	.+70     	; 0xb64 <main+0x314>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     b1e:	99 36       	cpi	r25, 0x69	; 105
     b20:	49 f4       	brne	.+18     	; 0xb34 <main+0x2e4>
			gb_mode();
     b22:	bd da       	rcall	.-2694   	; 0x9e <gb_mode>
			
			flash_read_chip_id();
     b24:	cd db       	rcall	.-2150   	; 0x2c0 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
     b26:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <flashChipIdBuffer>
     b2a:	90 da       	rcall	.-2784   	; 0x4c <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
     b2c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <flashChipIdBuffer+0x1>
     b30:	8d da       	rcall	.-2790   	; 0x4c <USART_Transmit>
     b32:	eb cf       	rjmp	.-42     	; 0xb0a <main+0x2ba>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     b34:	9b 36       	cpi	r25, 0x6B	; 107
     b36:	49 f4       	brne	.+18     	; 0xb4a <main+0x2fa>
			usart_read_chars(); // Read data
     b38:	a2 da       	rcall	.-2748   	; 0x7e <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     b3a:	81 e7       	ldi	r24, 0x71	; 113
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	6c d7       	rcall	.+3800   	; 0x1a18 <atoi>
     b40:	18 2f       	mov	r17, r24
			
			gb_mode();
     b42:	ad da       	rcall	.-2726   	; 0x9e <gb_mode>
			flash_switch_bank(bank);
     b44:	81 2f       	mov	r24, r17
     b46:	f1 db       	rcall	.-2078   	; 0x32a <flash_switch_bank>
     b48:	e0 cf       	rjmp	.-64     	; 0xb0a <main+0x2ba>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     b4a:	93 37       	cpi	r25, 0x73	; 115
     b4c:	69 f4       	brne	.+26     	; 0xb68 <main+0x318>
			gb_mode();
     b4e:	a7 da       	rcall	.-2738   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read sector
     b50:	96 da       	rcall	.-2772   	; 0x7e <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     b52:	40 e1       	ldi	r20, 0x10	; 16
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	81 e7       	ldi	r24, 0x71	; 113
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	4b d6       	rcall	.+3222   	; 0x17f6 <strtol>
     b60:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
     b62:	f6 db       	rcall	.-2068   	; 0x350 <flash_erase_4k_sector>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     b64:	81 e3       	ldi	r24, 0x31	; 49
     b66:	e4 cf       	rjmp	.-56     	; 0xb30 <main+0x2e0>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     b68:	92 36       	cpi	r25, 0x62	; 98
     b6a:	e9 f4       	brne	.+58     	; 0xba6 <main+0x356>
			gb_mode();
     b6c:	98 da       	rcall	.-2768   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     b6e:	80 e4       	ldi	r24, 0x40	; 64
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	70 da       	rcall	.-2848   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     b74:	93 9a       	sbi	0x12, 3	; 18
     b76:	61 e7       	ldi	r22, 0x71	; 113
     b78:	e6 2e       	mov	r14, r22
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	f6 2e       	mov	r15, r22
     b7e:	00 e0       	ldi	r16, 0x00	; 0
     b80:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     b82:	d7 01       	movw	r26, r14
     b84:	6d 91       	ld	r22, X+
     b86:	7d 01       	movw	r14, r26
     b88:	c8 01       	movw	r24, r16
     b8a:	84 0d       	add	r24, r4
     b8c:	95 1d       	adc	r25, r5
     b8e:	04 dc       	rcall	.-2040   	; 0x398 <flash_write_byte>
     b90:	0f 5f       	subi	r16, 0xFF	; 255
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     b94:	00 34       	cpi	r16, 0x40	; 64
     b96:	11 05       	cpc	r17, r1
     b98:	a1 f7       	brne	.-24     	; 0xb82 <main+0x332>
     b9a:	b0 e4       	ldi	r27, 0x40	; 64
     b9c:	4b 0e       	add	r4, r27
     b9e:	51 1c       	adc	r5, r1
     ba0:	61 1c       	adc	r6, r1
     ba2:	71 1c       	adc	r7, r1
     ba4:	af cf       	rjmp	.-162    	; 0xb04 <main+0x2b4>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     ba6:	91 36       	cpi	r25, 0x61	; 97
     ba8:	69 f4       	brne	.+26     	; 0xbc4 <main+0x374>
			gb_mode();
     baa:	79 da       	rcall	.-2830   	; 0x9e <gb_mode>
			
			usart_read_bytes(128);
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	51 da       	rcall	.-2910   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     bb2:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
     bb4:	c2 01       	movw	r24, r4
     bb6:	0c dc       	rcall	.-2024   	; 0x3d0 <flash_write_sector>
			address++;
     bb8:	ef ef       	ldi	r30, 0xFF	; 255
     bba:	4e 1a       	sub	r4, r30
     bbc:	5e 0a       	sbc	r5, r30
     bbe:	6e 0a       	sbc	r6, r30
     bc0:	7e 0a       	sbc	r7, r30
     bc2:	a0 cf       	rjmp	.-192    	; 0xb04 <main+0x2b4>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     bc4:	93 35       	cpi	r25, 0x53	; 83
     bc6:	51 f4       	brne	.+20     	; 0xbdc <main+0x38c>
			usart_read_chars(); // Read size
     bc8:	5a da       	rcall	.-2892   	; 0x7e <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     bca:	40 e1       	ldi	r20, 0x10	; 16
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	81 e7       	ldi	r24, 0x71	; 113
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0f d6       	rcall	.+3102   	; 0x17f6 <strtol>
     bd8:	6d a3       	std	Y+37, r22	; 0x25
     bda:	52 ce       	rjmp	.-860    	; 0x880 <main+0x30>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     bdc:	95 36       	cpi	r25, 0x65	; 101
     bde:	01 f5       	brne	.+64     	; 0xc20 <main+0x3d0>
			gba_eeprom_mode();
     be0:	ce da       	rcall	.-2660   	; 0x17e <gba_eeprom_mode>
			
			receivedChar = '1';
     be2:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
     be4:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
			gba_eeprom_mode();
			
			receivedChar = '1';
			while (receivedChar == '1') {
     be8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
     bec:	81 33       	cpi	r24, 0x31	; 49
     bee:	09 f0       	breq	.+2      	; 0xbf2 <main+0x3a2>
     bf0:	8c cf       	rjmp	.-232    	; 0xb0a <main+0x2ba>
				PORTD |= (1<<ACTIVITY_LED);
     bf2:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
     bf4:	6d a1       	ldd	r22, Y+37	; 0x25
     bf6:	c2 01       	movw	r24, r4
     bf8:	ff da       	rcall	.-2562   	; 0x1f8 <gba_eeprom_read>
     bfa:	02 e7       	ldi	r16, 0x72	; 114
     bfc:	11 e0       	ldi	r17, 0x01	; 1
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     bfe:	d8 01       	movw	r26, r16
     c00:	8d 91       	ld	r24, X+
     c02:	8d 01       	movw	r16, r26
     c04:	23 da       	rcall	.-3002   	; 0x4c <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     c06:	ea e7       	ldi	r30, 0x7A	; 122
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	e0 17       	cp	r30, r16
     c0c:	f1 07       	cpc	r31, r17
     c0e:	b9 f7       	brne	.-18     	; 0xbfe <main+0x3ae>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     c10:	ff ef       	ldi	r31, 0xFF	; 255
     c12:	4f 1a       	sub	r4, r31
     c14:	5f 0a       	sbc	r5, r31
     c16:	6f 0a       	sbc	r6, r31
     c18:	7f 0a       	sbc	r7, r31
				
				PORTD &= ~(1<<ACTIVITY_LED);
     c1a:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     c1c:	13 da       	rcall	.-3034   	; 0x44 <USART_Receive>
     c1e:	e2 cf       	rjmp	.-60     	; 0xbe4 <main+0x394>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     c20:	90 37       	cpi	r25, 0x70	; 112
     c22:	e1 f4       	brne	.+56     	; 0xc5c <main+0x40c>
			gba_eeprom_mode();
     c24:	ac da       	rcall	.-2728   	; 0x17e <gba_eeprom_mode>
     c26:	02 e7       	ldi	r16, 0x72	; 114
     c28:	11 e0       	ldi	r17, 0x01	; 1
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     c2a:	0c da       	rcall	.-3048   	; 0x44 <USART_Receive>
     c2c:	d8 01       	movw	r26, r16
     c2e:	8d 93       	st	X+, r24
     c30:	8d 01       	movw	r16, r26
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     c32:	ea e7       	ldi	r30, 0x7A	; 122
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	ea 17       	cp	r30, r26
     c38:	fb 07       	cpc	r31, r27
     c3a:	b9 f7       	brne	.-18     	; 0xc2a <main+0x3da>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
     c3c:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
     c3e:	6d a1       	ldd	r22, Y+37	; 0x25
     c40:	c2 01       	movw	r24, r4
     c42:	07 db       	rcall	.-2546   	; 0x252 <gba_eeprom_write>
			address++;
     c44:	ff ef       	ldi	r31, 0xFF	; 255
     c46:	4f 1a       	sub	r4, r31
     c48:	5f 0a       	sbc	r5, r31
     c4a:	6f 0a       	sbc	r6, r31
     c4c:	7f 0a       	sbc	r7, r31
     c4e:	8f e7       	ldi	r24, 0x7F	; 127
     c50:	9e e3       	ldi	r25, 0x3E	; 62
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <main+0x402>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <main+0x408>
     c58:	00 00       	nop
     c5a:	54 cf       	rjmp	.-344    	; 0xb04 <main+0x2b4>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     c5c:	90 35       	cpi	r25, 0x50	; 80
     c5e:	49 f4       	brne	.+18     	; 0xc72 <main+0x422>
			flashWriteWePin = USART_Receive();
     c60:	f1 d9       	rcall	.-3102   	; 0x44 <USART_Receive>
     c62:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     c66:	81 34       	cpi	r24, 0x41	; 65
     c68:	09 f0       	breq	.+2      	; 0xc6c <main+0x41c>
     c6a:	0a ce       	rjmp	.-1004   	; 0x880 <main+0x30>
				DDRE |= (1<<AUDIO_PIN);
     c6c:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
     c6e:	39 9a       	sbi	0x07, 1	; 7
     c70:	07 ce       	rjmp	.-1010   	; 0x880 <main+0x30>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
     c72:	9e 34       	cpi	r25, 0x4E	; 78
     c74:	21 f4       	brne	.+8      	; 0xc7e <main+0x42e>
			flashBank1CommandWrites = 1;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <flashBank1CommandWrites>
     c7c:	01 ce       	rjmp	.-1022   	; 0x880 <main+0x30>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     c7e:	95 34       	cpi	r25, 0x45	; 69
     c80:	19 f5       	brne	.+70     	; 0xcc8 <main+0x478>
     c82:	03 e6       	ldi	r16, 0x63	; 99
     c84:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     c86:	fb d9       	rcall	.-3082   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     c88:	40 e1       	ldi	r20, 0x10	; 16
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	81 e7       	ldi	r24, 0x71	; 113
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	b0 d5       	rcall	.+2912   	; 0x17f6 <strtol>
     c96:	d8 01       	movw	r26, r16
     c98:	6d 93       	st	X+, r22
     c9a:	7c 93       	st	X, r23
				USART_Transmit(SEND_ACK);
     c9c:	81 e3       	ldi	r24, 0x31	; 49
     c9e:	d6 d9       	rcall	.-3156   	; 0x4c <USART_Transmit>
				
				usart_read_chars(); // Data
     ca0:	ee d9       	rcall	.-3108   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     ca2:	40 e1       	ldi	r20, 0x10	; 16
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	81 e7       	ldi	r24, 0x71	; 113
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	a3 d5       	rcall	.+2886   	; 0x17f6 <strtol>
     cb0:	f8 01       	movw	r30, r16
     cb2:	73 83       	std	Z+3, r23	; 0x03
     cb4:	62 83       	std	Z+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
     cb6:	81 e3       	ldi	r24, 0x31	; 49
     cb8:	c9 d9       	rcall	.-3182   	; 0x4c <USART_Transmit>
     cba:	0c 5f       	subi	r16, 0xFC	; 252
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	0f 36       	cpi	r16, 0x6F	; 111
     cc2:	1f 07       	cpc	r17, r31
     cc4:	01 f7       	brne	.-64     	; 0xc86 <main+0x436>
     cc6:	dc cd       	rjmp	.-1096   	; 0x880 <main+0x30>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     cc8:	96 34       	cpi	r25, 0x46	; 70
     cca:	b1 f4       	brne	.+44     	; 0xcf8 <main+0x4a8>
			usart_read_chars(); // Read address
     ccc:	d8 d9       	rcall	.-3152   	; 0x7e <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     cce:	40 e1       	ldi	r20, 0x10	; 16
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	81 e7       	ldi	r24, 0x71	; 113
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	8d d5       	rcall	.+2842   	; 0x17f6 <strtol>
     cdc:	6b 01       	movw	r12, r22
     cde:	7c 01       	movw	r14, r24
			
			usart_read_chars(); // Read data byte
     ce0:	ce d9       	rcall	.-3172   	; 0x7e <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     ce2:	40 e1       	ldi	r20, 0x10	; 16
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	81 e7       	ldi	r24, 0x71	; 113
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	83 d5       	rcall	.+2822   	; 0x17f6 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     cf0:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     cf2:	c6 01       	movw	r24, r12
     cf4:	b2 db       	rcall	.-2204   	; 0x45a <gb_flash_write_bus_cycle>
     cf6:	86 c2       	rjmp	.+1292   	; 0x1204 <main+0x9b4>
			
			USART_Transmit(SEND_ACK);
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     cf8:	94 35       	cpi	r25, 0x54	; 84
     cfa:	b9 f5       	brne	.+110    	; 0xd6a <main+0x51a>
			usart_read_bytes(64);
     cfc:	80 e4       	ldi	r24, 0x40	; 64
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a9 d9       	rcall	.-3246   	; 0x54 <usart_read_bytes>
			start_timeout_timer();
     d02:	3e dd       	rcall	.-1412   	; 0x780 <start_timeout_timer>
			
			PORTD |= (1<<ACTIVITY_LED);
     d04:	93 9a       	sbi	0x12, 3	; 18
			if (flashBank1CommandWrites == 0) {
     d06:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flashBank1CommandWrites>
     d0a:	51 e7       	ldi	r21, 0x71	; 113
     d0c:	e5 2e       	mov	r14, r21
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	f5 2e       	mov	r15, r21
     d12:	00 e0       	ldi	r16, 0x00	; 0
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	81 11       	cpse	r24, r1
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <main+0x4f2>
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
     d1a:	d7 01       	movw	r26, r14
     d1c:	6d 91       	ld	r22, X+
     d1e:	7d 01       	movw	r14, r26
     d20:	6f 3f       	cpi	r22, 0xFF	; 255
     d22:	21 f0       	breq	.+8      	; 0xd2c <main+0x4dc>
						gb_flash_write_byte(address, receivedBuffer[x]);
     d24:	c8 01       	movw	r24, r16
     d26:	84 0d       	add	r24, r4
     d28:	95 1d       	adc	r25, r5
     d2a:	c3 db       	rcall	.-2170   	; 0x4b2 <gb_flash_write_byte>
     d2c:	0f 5f       	subi	r16, 0xFF	; 255
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
			usart_read_bytes(64);
			start_timeout_timer();
			
			PORTD |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
     d30:	00 34       	cpi	r16, 0x40	; 64
     d32:	11 05       	cpc	r17, r1
     d34:	91 f7       	brne	.-28     	; 0xd1a <main+0x4ca>
     d36:	20 e4       	ldi	r18, 0x40	; 64
     d38:	42 0e       	add	r4, r18
     d3a:	51 1c       	adc	r5, r1
     d3c:	61 1c       	adc	r6, r1
     d3e:	71 1c       	adc	r7, r1
     d40:	25 c5       	rjmp	.+2634   	; 0x178c <main+0xf3c>
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
     d42:	f7 01       	movw	r30, r14
     d44:	61 91       	ld	r22, Z+
     d46:	7f 01       	movw	r14, r30
     d48:	6f 3f       	cpi	r22, 0xFF	; 255
     d4a:	21 f0       	breq	.+8      	; 0xd54 <main+0x504>
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     d4c:	c8 01       	movw	r24, r16
     d4e:	84 0d       	add	r24, r4
     d50:	95 1d       	adc	r25, r5
     d52:	25 dc       	rcall	.-1974   	; 0x59e <gb_flash_write_byte_bank1_commands>
     d54:	0f 5f       	subi	r16, 0xFF	; 255
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
					}
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
     d58:	00 34       	cpi	r16, 0x40	; 64
     d5a:	11 05       	cpc	r17, r1
     d5c:	91 f7       	brne	.-28     	; 0xd42 <main+0x4f2>
     d5e:	f0 e4       	ldi	r31, 0x40	; 64
     d60:	4f 0e       	add	r4, r31
     d62:	51 1c       	adc	r5, r1
     d64:	61 1c       	adc	r6, r1
     d66:	71 1c       	adc	r7, r1
     d68:	11 c5       	rjmp	.+2594   	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
     d6a:	99 35       	cpi	r25, 0x59	; 89
     d6c:	09 f0       	breq	.+2      	; 0xd70 <main+0x520>
     d6e:	4e c0       	rjmp	.+156    	; 0xe0c <main+0x5bc>
			usart_read_bytes(32);
     d70:	80 e2       	ldi	r24, 0x20	; 32
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	6f d9       	rcall	.-3362   	; 0x54 <usart_read_bytes>
			start_timeout_timer();
     d76:	04 dd       	rcall	.-1528   	; 0x780 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
     d78:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
     d7a:	6a ea       	ldi	r22, 0xAA	; 170
     d7c:	8a ea       	ldi	r24, 0xAA	; 170
     d7e:	9a e0       	ldi	r25, 0x0A	; 10
     d80:	6c db       	rcall	.-2344   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
     d82:	65 e5       	ldi	r22, 0x55	; 85
     d84:	85 e5       	ldi	r24, 0x55	; 85
     d86:	95 e0       	ldi	r25, 0x05	; 5
     d88:	68 db       	rcall	.-2352   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
     d8a:	72 01       	movw	r14, r4
     d8c:	65 e2       	ldi	r22, 0x25	; 37
     d8e:	c2 01       	movw	r24, r4
     d90:	64 db       	rcall	.-2360   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
     d92:	6f e1       	ldi	r22, 0x1F	; 31
     d94:	c2 01       	movw	r24, r4
     d96:	61 db       	rcall	.-2366   	; 0x45a <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	8a 95       	dec	r24
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <main+0x54a>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <main+0x550>
     da0:	01 e7       	ldi	r16, 0x71	; 113
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	c1 2c       	mov	r12, r1
     da6:	d1 2c       	mov	r13, r1
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     da8:	d8 01       	movw	r26, r16
     daa:	6d 91       	ld	r22, X+
     dac:	8d 01       	movw	r16, r26
     dae:	c7 01       	movw	r24, r14
     db0:	8c 0d       	add	r24, r12
     db2:	9d 1d       	adc	r25, r13
     db4:	52 db       	rcall	.-2396   	; 0x45a <gb_flash_write_bus_cycle>
     db6:	bf ef       	ldi	r27, 0xFF	; 255
     db8:	cb 1a       	sub	r12, r27
     dba:	db 0a       	sbc	r13, r27
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
     dbc:	e0 e2       	ldi	r30, 0x20	; 32
     dbe:	ce 16       	cp	r12, r30
     dc0:	d1 04       	cpc	r13, r1
     dc2:	91 f7       	brne	.-28     	; 0xda8 <main+0x558>
     dc4:	f0 e2       	ldi	r31, 0x20	; 32
     dc6:	4f 0e       	add	r4, r31
     dc8:	51 1c       	adc	r5, r1
     dca:	61 1c       	adc	r6, r1
     dcc:	71 1c       	adc	r7, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
     dce:	c2 01       	movw	r24, r4
     dd0:	80 97       	sbiw	r24, 0x20	; 32
     dd2:	69 e2       	ldi	r22, 0x29	; 41
     dd4:	42 db       	rcall	.-2428   	; 0x45a <gb_flash_write_bus_cycle>
     dd6:	8f e8       	ldi	r24, 0x8F	; 143
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <main+0x58a>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <main+0x590>
     de0:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     de2:	82 01       	movw	r16, r4
     de4:	01 50       	subi	r16, 0x01	; 1
     de6:	11 09       	sbc	r17, r1
     de8:	c8 01       	movw	r24, r16
     dea:	28 db       	rcall	.-2480   	; 0x43c <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[31]) {
     dec:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <receivedBuffer+0x1f>
     df0:	89 17       	cp	r24, r25
     df2:	09 f4       	brne	.+2      	; 0xdf6 <main+0x5a6>
     df4:	cb c4       	rjmp	.+2454   	; 0x178c <main+0xf3c>
				dataVerify = gb_flash_read_byte(address-1);
     df6:	c8 01       	movw	r24, r16
     df8:	21 db       	rcall	.-2494   	; 0x43c <gb_flash_read_byte>
     dfa:	9d e0       	ldi	r25, 0x0D	; 13
     dfc:	9a 95       	dec	r25
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <main+0x5ac>
     e00:	00 00       	nop
				_delay_us(5);
				if (writingTimedout == 1) {
     e02:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
     e06:	91 30       	cpi	r25, 0x01	; 1
     e08:	89 f7       	brne	.-30     	; 0xdec <main+0x59c>
     e0a:	c0 c4       	rjmp	.+2432   	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_256BYTE) {
     e0c:	95 35       	cpi	r25, 0x55	; 85
     e0e:	09 f0       	breq	.+2      	; 0xe12 <main+0x5c2>
     e10:	62 c0       	rjmp	.+196    	; 0xed6 <main+0x686>
			usart_read_bytes(256);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	1e d9       	rcall	.-3524   	; 0x54 <usart_read_bytes>
			start_timeout_timer();
     e18:	b3 dc       	rcall	.-1690   	; 0x780 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
     e1a:	93 9a       	sbi	0x12, 3	; 18
     e1c:	31 e7       	ldi	r19, 0x71	; 113
     e1e:	e3 2e       	mov	r14, r19
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	f3 2e       	mov	r15, r19
     e24:	48 e0       	ldi	r20, 0x08	; 8
     e26:	84 2e       	mov	r8, r20
     e28:	fe 01       	movw	r30, r28
     e2a:	31 96       	adiw	r30, 0x01	; 1
     e2c:	6f 01       	movw	r12, r30
     e2e:	d7 01       	movw	r26, r14
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
					localBuffer[x] = receivedBuffer[byteCounter];
     e30:	8d 91       	ld	r24, X+
     e32:	81 93       	st	Z+, r24
			
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
     e34:	e2 15       	cp	r30, r2
     e36:	f3 05       	cpc	r31, r3
     e38:	d9 f7       	brne	.-10     	; 0xe30 <main+0x5e0>
					localBuffer[x] = receivedBuffer[byteCounter];
					byteCounter++;
				}
				
				// Setup buffered write
				gb_flash_write_bus_cycle(0xAAA, 0xAA);
     e3a:	6a ea       	ldi	r22, 0xAA	; 170
     e3c:	8a ea       	ldi	r24, 0xAA	; 170
     e3e:	9a e0       	ldi	r25, 0x0A	; 10
     e40:	0c db       	rcall	.-2536   	; 0x45a <gb_flash_write_bus_cycle>
				gb_flash_write_bus_cycle(0x555, 0x55);
     e42:	65 e5       	ldi	r22, 0x55	; 85
     e44:	85 e5       	ldi	r24, 0x55	; 85
     e46:	95 e0       	ldi	r25, 0x05	; 5
     e48:	08 db       	rcall	.-2544   	; 0x45a <gb_flash_write_bus_cycle>
				gb_flash_write_bus_cycle(address, 0x25);
     e4a:	52 01       	movw	r10, r4
     e4c:	65 e2       	ldi	r22, 0x25	; 37
     e4e:	c2 01       	movw	r24, r4
     e50:	04 db       	rcall	.-2552   	; 0x45a <gb_flash_write_bus_cycle>
				gb_flash_write_bus_cycle(address, 0x1F); // Length
     e52:	6f e1       	ldi	r22, 0x1F	; 31
     e54:	c2 01       	movw	r24, r4
     e56:	01 db       	rcall	.-2558   	; 0x45a <gb_flash_write_bus_cycle>
     e58:	a2 e0       	ldi	r26, 0x02	; 2
     e5a:	aa 95       	dec	r26
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <main+0x60a>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <main+0x610>
     e60:	00 e0       	ldi	r16, 0x00	; 0
     e62:	10 e0       	ldi	r17, 0x00	; 0
				_delay_us(1);
				
				// Write data
				for (uint8_t x = 0; x < 32; x++) {
					gb_flash_write_bus_cycle(address, localBuffer[x]);
     e64:	f6 01       	movw	r30, r12
     e66:	61 91       	ld	r22, Z+
     e68:	6f 01       	movw	r12, r30
     e6a:	c5 01       	movw	r24, r10
     e6c:	80 0f       	add	r24, r16
     e6e:	91 1f       	adc	r25, r17
     e70:	f4 da       	rcall	.-2584   	; 0x45a <gb_flash_write_bus_cycle>
     e72:	0f 5f       	subi	r16, 0xFF	; 255
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
				gb_flash_write_bus_cycle(address, 0x25);
				gb_flash_write_bus_cycle(address, 0x1F); // Length
				_delay_us(1);
				
				// Write data
				for (uint8_t x = 0; x < 32; x++) {
     e76:	00 32       	cpi	r16, 0x20	; 32
     e78:	11 05       	cpc	r17, r1
     e7a:	a1 f7       	brne	.-24     	; 0xe64 <main+0x614>
     e7c:	f0 e2       	ldi	r31, 0x20	; 32
     e7e:	4f 0e       	add	r4, r31
     e80:	51 1c       	adc	r5, r1
     e82:	61 1c       	adc	r6, r1
     e84:	71 1c       	adc	r7, r1
					gb_flash_write_bus_cycle(address, localBuffer[x]);
					address++;
				}
				
				// Write buffer to flash
				gb_flash_write_bus_cycle(address-32, 0x29);
     e86:	c2 01       	movw	r24, r4
     e88:	80 97       	sbiw	r24, 0x20	; 32
     e8a:	69 e2       	ldi	r22, 0x29	; 41
     e8c:	e6 da       	rcall	.-2612   	; 0x45a <gb_flash_write_bus_cycle>
     e8e:	8f e8       	ldi	r24, 0x8F	; 143
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <main+0x642>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <main+0x648>
     e98:	00 00       	nop
     e9a:	82 01       	movw	r16, r4
     e9c:	01 50       	subi	r16, 0x01	; 1
     e9e:	11 09       	sbc	r17, r1
				_delay_us(200);
				
				// Verify last byte written
				uint8_t dataVerify = gb_flash_read_byte(address-1);
     ea0:	c8 01       	movw	r24, r16
     ea2:	cc da       	rcall	.-2664   	; 0x43c <gb_flash_read_byte>
				while (dataVerify != localBuffer[31]) {
     ea4:	98 a1       	ldd	r25, Y+32	; 0x20
     ea6:	89 17       	cp	r24, r25
     ea8:	51 f0       	breq	.+20     	; 0xebe <main+0x66e>
					dataVerify = gb_flash_read_byte(address-1);
     eaa:	c8 01       	movw	r24, r16
     eac:	c7 da       	rcall	.-2674   	; 0x43c <gb_flash_read_byte>
     eae:	9d e0       	ldi	r25, 0x0D	; 13
     eb0:	9a 95       	dec	r25
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <main+0x660>
     eb4:	00 00       	nop
					_delay_us(5);
					if (writingTimedout == 1) {
     eb6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
     eba:	91 30       	cpi	r25, 0x01	; 1
     ebc:	99 f7       	brne	.-26     	; 0xea4 <main+0x654>
						break;
					}
				}
				if (writingTimedout == 1) {
     ebe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <main+0x678>
     ec6:	62 c4       	rjmp	.+2244   	; 0x178c <main+0xf3c>
     ec8:	8a 94       	dec	r8
     eca:	a0 e2       	ldi	r26, 0x20	; 32
     ecc:	ea 0e       	add	r14, r26
     ece:	f1 1c       	adc	r15, r1
			usart_read_bytes(256);
			start_timeout_timer();
			PORTD |= (1<<ACTIVITY_LED);
			
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
     ed0:	81 10       	cpse	r8, r1
     ed2:	aa cf       	rjmp	.-172    	; 0xe28 <main+0x5d8>
     ed4:	5b c4       	rjmp	.+2230   	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
     ed6:	9a 34       	cpi	r25, 0x4A	; 74
     ed8:	f9 f4       	brne	.+62     	; 0xf18 <main+0x6c8>
			usart_read_bytes(64);
     eda:	80 e4       	ldi	r24, 0x40	; 64
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	ba d8       	rcall	.-3724   	; 0x54 <usart_read_bytes>
			start_timeout_timer();
     ee0:	4f dc       	rcall	.-1890   	; 0x780 <start_timeout_timer>
			
			PORTD |= (1<<ACTIVITY_LED);
     ee2:	93 9a       	sbi	0x12, 3	; 18
     ee4:	21 e7       	ldi	r18, 0x71	; 113
     ee6:	e2 2e       	mov	r14, r18
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	f2 2e       	mov	r15, r18
     eec:	00 e0       	ldi	r16, 0x00	; 0
     eee:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
     ef0:	d7 01       	movw	r26, r14
     ef2:	6d 91       	ld	r22, X+
     ef4:	7d 01       	movw	r14, r26
     ef6:	6f 3f       	cpi	r22, 0xFF	; 255
     ef8:	21 f0       	breq	.+8      	; 0xf02 <main+0x6b2>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
     efa:	c8 01       	movw	r24, r16
     efc:	84 0d       	add	r24, r4
     efe:	95 1d       	adc	r25, r5
     f00:	0d db       	rcall	.-2534   	; 0x51c <gb_flash_write_byte_special>
     f02:	0f 5f       	subi	r16, 0xFF	; 255
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			start_timeout_timer();
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     f06:	00 34       	cpi	r16, 0x40	; 64
     f08:	11 05       	cpc	r17, r1
     f0a:	91 f7       	brne	.-28     	; 0xef0 <main+0x6a0>
     f0c:	b0 e4       	ldi	r27, 0x40	; 64
     f0e:	4b 0e       	add	r4, r27
     f10:	51 1c       	adc	r5, r1
     f12:	61 1c       	adc	r6, r1
     f14:	71 1c       	adc	r7, r1
     f16:	3a c4       	rjmp	.+2164   	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
     f18:	98 35       	cpi	r25, 0x58	; 88
     f1a:	09 f0       	breq	.+2      	; 0xf1e <main+0x6ce>
     f1c:	47 c0       	rjmp	.+142    	; 0xfac <main+0x75c>
			usart_read_bytes(256);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	98 d8       	rcall	.-3792   	; 0x54 <usart_read_bytes>
			start_timeout_timer();
     f24:	2d dc       	rcall	.-1958   	; 0x780 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
     f26:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
     f28:	69 ea       	ldi	r22, 0xA9	; 169
     f2a:	8a ea       	ldi	r24, 0xAA	; 170
     f2c:	9a e0       	ldi	r25, 0x0A	; 10
     f2e:	95 da       	rcall	.-2774   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
     f30:	66 e5       	ldi	r22, 0x56	; 86
     f32:	85 e5       	ldi	r24, 0x55	; 85
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	91 da       	rcall	.-2782   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
     f38:	72 01       	movw	r14, r4
     f3a:	66 e2       	ldi	r22, 0x26	; 38
     f3c:	c2 01       	movw	r24, r4
     f3e:	8d da       	rcall	.-2790   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
     f40:	6f ef       	ldi	r22, 0xFF	; 255
     f42:	c2 01       	movw	r24, r4
     f44:	8a da       	rcall	.-2796   	; 0x45a <gb_flash_write_bus_cycle>
     f46:	e5 e8       	ldi	r30, 0x85	; 133
     f48:	ea 95       	dec	r30
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <main+0x6f8>
     f4c:	00 00       	nop
     f4e:	01 e7       	ldi	r16, 0x71	; 113
     f50:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     f52:	c1 2c       	mov	r12, r1
     f54:	d1 2c       	mov	r13, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     f56:	d8 01       	movw	r26, r16
     f58:	6d 91       	ld	r22, X+
     f5a:	8d 01       	movw	r16, r26
     f5c:	c6 01       	movw	r24, r12
     f5e:	8e 0d       	add	r24, r14
     f60:	9f 1d       	adc	r25, r15
     f62:	7b da       	rcall	.-2826   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     f64:	bf ef       	ldi	r27, 0xFF	; 255
     f66:	cb 1a       	sub	r12, r27
     f68:	db 0a       	sbc	r13, r27
     f6a:	c1 14       	cp	r12, r1
     f6c:	e1 e0       	ldi	r30, 0x01	; 1
     f6e:	de 06       	cpc	r13, r30
     f70:	91 f7       	brne	.-28     	; 0xf56 <main+0x706>
     f72:	ff ef       	ldi	r31, 0xFF	; 255
     f74:	5f 1a       	sub	r5, r31
     f76:	6f 0a       	sbc	r6, r31
     f78:	7f 0a       	sbc	r7, r31
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
     f7a:	c2 01       	movw	r24, r4
     f7c:	9a 95       	dec	r25
     f7e:	6a e2       	ldi	r22, 0x2A	; 42
     f80:	6c da       	rcall	.-2856   	; 0x45a <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     f82:	82 01       	movw	r16, r4
     f84:	01 50       	subi	r16, 0x01	; 1
     f86:	11 09       	sbc	r17, r1
     f88:	c8 01       	movw	r24, r16
     f8a:	58 da       	rcall	.-2896   	; 0x43c <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
     f8c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <receivedBuffer+0xff>
     f90:	89 17       	cp	r24, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <main+0x746>
     f94:	fb c3       	rjmp	.+2038   	; 0x178c <main+0xf3c>
				dataVerify = gb_flash_read_byte(address-1);
     f96:	c8 01       	movw	r24, r16
     f98:	51 da       	rcall	.-2910   	; 0x43c <gb_flash_read_byte>
     f9a:	2d e0       	ldi	r18, 0x0D	; 13
     f9c:	2a 95       	dec	r18
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <main+0x74c>
     fa0:	00 00       	nop
				_delay_us(5);
				if (writingTimedout == 1) {
     fa2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
     fa6:	91 30       	cpi	r25, 0x01	; 1
     fa8:	89 f7       	brne	.-30     	; 0xf8c <main+0x73c>
     faa:	f0 c3       	rjmp	.+2016   	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
     fac:	9a 37       	cpi	r25, 0x7A	; 122
     fae:	09 f0       	breq	.+2      	; 0xfb2 <main+0x762>
     fb0:	bc c0       	rjmp	.+376    	; 0x112a <main+0x8da>
			usart_read_bytes(128);
     fb2:	80 e8       	ldi	r24, 0x80	; 128
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	4e d8       	rcall	.-3940   	; 0x54 <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     fb8:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
     fba:	69 e0       	ldi	r22, 0x09	; 9
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	4c da       	rcall	.-2920   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
     fc2:	6a ea       	ldi	r22, 0xAA	; 170
     fc4:	81 e2       	ldi	r24, 0x21	; 33
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	48 da       	rcall	.-2928   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
     fca:	65 e5       	ldi	r22, 0x55	; 85
     fcc:	82 e2       	ldi	r24, 0x22	; 34
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	44 da       	rcall	.-2936   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     fd2:	65 ea       	ldi	r22, 0xA5	; 165
     fd4:	8f e3       	ldi	r24, 0x3F	; 63
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	40 da       	rcall	.-2944   	; 0x45a <gb_flash_write_bus_cycle>
     fda:	8d e0       	ldi	r24, 0x0D	; 13
     fdc:	8a 95       	dec	r24
     fde:	f1 f7       	brne	.-4      	; 0xfdc <main+0x78c>
     fe0:	00 00       	nop
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
     fe2:	61 e1       	ldi	r22, 0x11	; 17
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	38 da       	rcall	.-2960   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     fea:	65 ea       	ldi	r22, 0xA5	; 165
     fec:	8f e3       	ldi	r24, 0x3F	; 63
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	34 da       	rcall	.-2968   	; 0x45a <gb_flash_write_bus_cycle>
     ff2:	9d e0       	ldi	r25, 0x0D	; 13
     ff4:	9a 95       	dec	r25
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <main+0x7a4>
     ff8:	00 00       	nop
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	91 e2       	ldi	r25, 0x21	; 33
    1000:	2c da       	rcall	.-2984   	; 0x45a <gb_flash_write_bus_cycle>
    1002:	ad e0       	ldi	r26, 0x0D	; 13
    1004:	aa 95       	dec	r26
    1006:	f1 f7       	brne	.-4      	; 0x1004 <main+0x7b4>
    1008:	00 00       	nop
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
    100a:	6f e0       	ldi	r22, 0x0F	; 15
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	24 da       	rcall	.-3000   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
    1012:	65 e5       	ldi	r22, 0x55	; 85
    1014:	85 e2       	ldi	r24, 0x25	; 37
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	20 da       	rcall	.-3008   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
    101a:	65 e5       	ldi	r22, 0x55	; 85
    101c:	86 e2       	ldi	r24, 0x26	; 38
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	1c da       	rcall	.-3016   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
    1022:	6a ea       	ldi	r22, 0xAA	; 170
    1024:	87 e2       	ldi	r24, 0x27	; 39
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	18 da       	rcall	.-3024   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    102a:	65 ea       	ldi	r22, 0xA5	; 165
    102c:	8f e3       	ldi	r24, 0x3F	; 63
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	14 da       	rcall	.-3032   	; 0x45a <gb_flash_write_bus_cycle>
    1032:	bd e0       	ldi	r27, 0x0D	; 13
    1034:	ba 95       	dec	r27
    1036:	f1 f7       	brne	.-4      	; 0x1034 <main+0x7e4>
    1038:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
    103a:	6f e0       	ldi	r22, 0x0F	; 15
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0c da       	rcall	.-3048   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
    1042:	6a e2       	ldi	r22, 0x2A	; 42
    1044:	85 e2       	ldi	r24, 0x25	; 37
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	08 da       	rcall	.-3056   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
    104a:	6a ea       	ldi	r22, 0xAA	; 170
    104c:	86 e2       	ldi	r24, 0x26	; 38
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	04 da       	rcall	.-3064   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
    1052:	65 e5       	ldi	r22, 0x55	; 85
    1054:	87 e2       	ldi	r24, 0x27	; 39
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	00 da       	rcall	.-3072   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    105a:	65 ea       	ldi	r22, 0xA5	; 165
    105c:	8f e3       	ldi	r24, 0x3F	; 63
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	fc d9       	rcall	.-3080   	; 0x45a <gb_flash_write_bus_cycle>
    1062:	ed e0       	ldi	r30, 0x0D	; 13
    1064:	ea 95       	dec	r30
    1066:	f1 f7       	brne	.-4      	; 0x1064 <main+0x814>
    1068:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
    106a:	6f e0       	ldi	r22, 0x0F	; 15
    106c:	80 e2       	ldi	r24, 0x20	; 32
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	f4 d9       	rcall	.-3096   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
    1072:	65 e5       	ldi	r22, 0x55	; 85
    1074:	85 e2       	ldi	r24, 0x25	; 37
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	f0 d9       	rcall	.-3104   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
    107a:	65 e5       	ldi	r22, 0x55	; 85
    107c:	86 e2       	ldi	r24, 0x26	; 38
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	ec d9       	rcall	.-3112   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
    1082:	60 ea       	ldi	r22, 0xA0	; 160
    1084:	87 e2       	ldi	r24, 0x27	; 39
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	e8 d9       	rcall	.-3120   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    108a:	65 ea       	ldi	r22, 0xA5	; 165
    108c:	8f e3       	ldi	r24, 0x3F	; 63
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	e4 d9       	rcall	.-3128   	; 0x45a <gb_flash_write_bus_cycle>
    1092:	fd e0       	ldi	r31, 0x0D	; 13
    1094:	fa 95       	dec	r31
    1096:	f1 f7       	brne	.-4      	; 0x1094 <main+0x844>
    1098:	00 00       	nop
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <lastBankAccessed>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	91 e2       	ldi	r25, 0x21	; 33
    10a4:	10 d8       	rcall	.-4064   	; 0xc6 <write_8bit_data>
    10a6:	2d e0       	ldi	r18, 0x0D	; 13
    10a8:	2a 95       	dec	r18
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <main+0x858>
    10ac:	00 00       	nop
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
    10ae:	60 e1       	ldi	r22, 0x10	; 16
    10b0:	80 e2       	ldi	r24, 0x20	; 32
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	d2 d9       	rcall	.-3164   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    10b6:	65 ea       	ldi	r22, 0xA5	; 165
    10b8:	8f e3       	ldi	r24, 0x3F	; 63
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	ce d9       	rcall	.-3172   	; 0x45a <gb_flash_write_bus_cycle>
    10be:	8d e0       	ldi	r24, 0x0D	; 13
    10c0:	8a 95       	dec	r24
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <main+0x870>
    10c4:	00 00       	nop
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
    10c6:	68 e0       	ldi	r22, 0x08	; 8
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	c6 d9       	rcall	.-3188   	; 0x45a <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    10ce:	65 ea       	ldi	r22, 0xA5	; 165
    10d0:	8f e3       	ldi	r24, 0x3F	; 63
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	c2 d9       	rcall	.-3196   	; 0x45a <gb_flash_write_bus_cycle>
    10d6:	9d e0       	ldi	r25, 0x0D	; 13
    10d8:	9a 95       	dec	r25
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <main+0x888>
    10dc:	00 00       	nop
    10de:	01 e7       	ldi	r16, 0x71	; 113
    10e0:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
    10e2:	81 ef       	ldi	r24, 0xF1	; 241
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	80 17       	cp	r24, r16
    10e8:	91 07       	cpc	r25, r17
    10ea:	79 f0       	breq	.+30     	; 0x110a <main+0x8ba>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
    10ec:	d8 01       	movw	r26, r16
    10ee:	6d 91       	ld	r22, X+
    10f0:	8d 01       	movw	r16, r26
    10f2:	c2 01       	movw	r24, r4
    10f4:	b2 d9       	rcall	.-3228   	; 0x45a <gb_flash_write_bus_cycle>
    10f6:	bd e0       	ldi	r27, 0x0D	; 13
    10f8:	ba 95       	dec	r27
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <main+0x8a8>
    10fc:	00 00       	nop
				_delay_us(5);
				address++;
    10fe:	ef ef       	ldi	r30, 0xFF	; 255
    1100:	4e 1a       	sub	r4, r30
    1102:	5e 0a       	sbc	r5, r30
    1104:	6e 0a       	sbc	r6, r30
    1106:	7e 0a       	sbc	r7, r30
    1108:	ec cf       	rjmp	.-40     	; 0x10e2 <main+0x892>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
    110a:	6f ef       	ldi	r22, 0xFF	; 255
    110c:	d3 01       	movw	r26, r6
    110e:	c2 01       	movw	r24, r4
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	a1 09       	sbc	r26, r1
    1114:	b1 09       	sbc	r27, r1
    1116:	a1 d9       	rcall	.-3262   	; 0x45a <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1118:	af e1       	ldi	r26, 0x1F	; 31
    111a:	be e4       	ldi	r27, 0x4E	; 78
    111c:	11 97       	sbiw	r26, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <main+0x8cc>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <main+0x8d2>
    1122:	00 00       	nop
			address++;
			_delay_ms(10);
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    1124:	81 e3       	ldi	r24, 0x31	; 49
    1126:	92 d7       	rcall	.+3876   	; 0x204c <__TEXT_REGION_LENGTH__+0x4c>
    1128:	ae cc       	rjmp	.-1700   	; 0xa86 <main+0x236>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		// Intel chips such as 28F640J5 (Thanks to lesserkuma for adding support)
		else if (receivedChar == GB_FLASH_WRITE_INTEL_BUFFERED_32BYTE) {
    112a:	99 37       	cpi	r25, 0x79	; 121
    112c:	09 f0       	breq	.+2      	; 0x1130 <main+0x8e0>
    112e:	48 c0       	rjmp	.+144    	; 0x11c0 <main+0x970>
			usart_read_bytes(32);
    1130:	80 e2       	ldi	r24, 0x20	; 32
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	8f d7       	rcall	.+3870   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			PORTD |= (1<<ACTIVITY_LED);
    1136:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(address, 0xE8);
    1138:	82 01       	movw	r16, r4
    113a:	68 ee       	ldi	r22, 0xE8	; 232
    113c:	c2 01       	movw	r24, r4
    113e:	8d d9       	rcall	.-3302   	; 0x45a <gb_flash_write_bus_cycle>
			
			// Wait until ready
			//do { status = gb_flash_read_byte(address); } while(status != 0x80);
			start_timeout_timer();
    1140:	1f db       	rcall	.-2498   	; 0x780 <start_timeout_timer>
			while (gb_flash_read_byte(address) != 0x80) {
    1142:	c8 01       	movw	r24, r16
    1144:	7b d9       	rcall	.-3338   	; 0x43c <gb_flash_read_byte>
    1146:	80 38       	cpi	r24, 0x80	; 128
    1148:	21 f0       	breq	.+8      	; 0x1152 <main+0x902>
				if (writingTimedout == 1) {
    114a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	c1 f7       	brne	.-16     	; 0x1142 <main+0x8f2>
					break;
				}
			}
			
			if (writingTimedout == 0) {
    1152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1156:	81 11       	cpse	r24, r1
    1158:	93 cb       	rjmp	.-2266   	; 0x880 <main+0x30>
				start_timeout_timer();
    115a:	12 db       	rcall	.-2524   	; 0x780 <start_timeout_timer>
				
				// Set buffer size
				gb_flash_write_bus_cycle(address, 0x1F);
    115c:	6f e1       	ldi	r22, 0x1F	; 31
    115e:	c8 01       	movw	r24, r16
    1160:	7c d9       	rcall	.-3336   	; 0x45a <gb_flash_write_bus_cycle>
    1162:	91 e7       	ldi	r25, 0x71	; 113
    1164:	e9 2e       	mov	r14, r25
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	f9 2e       	mov	r15, r25
    116a:	c1 2c       	mov	r12, r1
    116c:	d1 2c       	mov	r13, r1
				
				// Write data to buffer
				for (uint8_t x = 0; x < 32; x++) {
					gb_flash_write_bus_cycle(address, receivedBuffer[x]);
    116e:	f7 01       	movw	r30, r14
    1170:	61 91       	ld	r22, Z+
    1172:	7f 01       	movw	r14, r30
    1174:	c6 01       	movw	r24, r12
    1176:	80 0f       	add	r24, r16
    1178:	91 1f       	adc	r25, r17
    117a:	6f d9       	rcall	.-3362   	; 0x45a <gb_flash_write_bus_cycle>
    117c:	ff ef       	ldi	r31, 0xFF	; 255
    117e:	cf 1a       	sub	r12, r31
    1180:	df 0a       	sbc	r13, r31
				
				// Set buffer size
				gb_flash_write_bus_cycle(address, 0x1F);
				
				// Write data to buffer
				for (uint8_t x = 0; x < 32; x++) {
    1182:	20 e2       	ldi	r18, 0x20	; 32
    1184:	c2 16       	cp	r12, r18
    1186:	d1 04       	cpc	r13, r1
    1188:	91 f7       	brne	.-28     	; 0x116e <main+0x91e>
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	48 0e       	add	r4, r24
    118e:	51 1c       	adc	r5, r1
    1190:	61 1c       	adc	r6, r1
    1192:	71 1c       	adc	r7, r1
					gb_flash_write_bus_cycle(address, receivedBuffer[x]);
					address++;
				}
				
				// Write buffer to flash
				gb_flash_write_bus_cycle(address-32, 0xD0);
    1194:	82 01       	movw	r16, r4
    1196:	00 52       	subi	r16, 0x20	; 32
    1198:	11 09       	sbc	r17, r1
    119a:	60 ed       	ldi	r22, 0xD0	; 208
    119c:	c8 01       	movw	r24, r16
    119e:	5d d9       	rcall	.-3398   	; 0x45a <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a0:	a7 e8       	ldi	r26, 0x87	; 135
    11a2:	b1 e0       	ldi	r27, 0x01	; 1
    11a4:	11 97       	sbiw	r26, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <main+0x954>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <main+0x95a>
    11aa:	00 00       	nop
				_delay_us(196);
				
				// Wait until ready
				//do { status = gb_flash_read_byte(address-32); } while(status != 0x80);
				while (gb_flash_read_byte(address-32) != 0x80) {
    11ac:	c8 01       	movw	r24, r16
    11ae:	46 d9       	rcall	.-3444   	; 0x43c <gb_flash_read_byte>
    11b0:	80 38       	cpi	r24, 0x80	; 128
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <main+0x966>
    11b4:	eb c2       	rjmp	.+1494   	; 0x178c <main+0xf3c>
					if (writingTimedout == 1) {
    11b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	b9 f7       	brne	.-18     	; 0x11ac <main+0x95c>
    11be:	e6 c2       	rjmp	.+1484   	; 0x178c <main+0xf3c>
		}
		
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
    11c0:	9e 36       	cpi	r25, 0x6E	; 110
    11c2:	19 f5       	brne	.+70     	; 0x120a <main+0x9ba>
			usart_read_chars(); // Read address
    11c4:	5c d7       	rcall	.+3768   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
    11c6:	40 e1       	ldi	r20, 0x10	; 16
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	81 e7       	ldi	r24, 0x71	; 113
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	11 d3       	rcall	.+1570   	; 0x17f6 <strtol>
    11d4:	6b 01       	movw	r12, r22
    11d6:	7c 01       	movw	r14, r24
			
			receivedChar = USART_Receive(); // Wait for byte
    11d8:	35 d7       	rcall	.+3690   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
    11da:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
    11de:	8e 36       	cpi	r24, 0x6E	; 110
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <main+0x994>
    11e2:	4e cb       	rjmp	.-2404   	; 0x880 <main+0x30>
				usart_read_chars(); // Read data
    11e4:	4c d7       	rcall	.+3736   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
    11e6:	40 e1       	ldi	r20, 0x10	; 16
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	81 e7       	ldi	r24, 0x71	; 113
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	01 d3       	rcall	.+1538   	; 0x17f6 <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
    11f4:	93 9a       	sbi	0x12, 3	; 18
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    11f6:	94 ba       	out	0x14, r9	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    11f8:	9a ba       	out	0x1a, r9	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    11fa:	97 ba       	out	0x17, r9	; 23
				gba_flash_write_bus_cycle(flashAddress, flashByte);
    11fc:	ab 01       	movw	r20, r22
    11fe:	c7 01       	movw	r24, r14
    1200:	b6 01       	movw	r22, r12
    1202:	1a da       	rcall	.-3020   	; 0x638 <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
    1204:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
    1206:	81 e3       	ldi	r24, 0x31	; 49
    1208:	d7 c2       	rjmp	.+1454   	; 0x17b8 <main+0xf68>
			}
		}
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
    120a:	91 37       	cpi	r25, 0x71	; 113
    120c:	11 f0       	breq	.+4      	; 0x1212 <main+0x9c2>
    120e:	94 37       	cpi	r25, 0x74	; 116
    1210:	f1 f5       	brne	.+124    	; 0x128e <main+0xa3e>
			PORTD |= (1<<ACTIVITY_LED);
    1212:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
    1214:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <receivedChar>
    1218:	84 37       	cpi	r24, 0x74	; 116
    121a:	19 f0       	breq	.+6      	; 0x1222 <main+0x9d2>
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
    121c:	00 e4       	ldi	r16, 0x40	; 64
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <main+0x9d6>
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	11 e0       	ldi	r17, 0x01	; 1
			}
			usart_read_bytes(readLength);
    1226:	c8 01       	movw	r24, r16
    1228:	15 d7       	rcall	.+3626   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			start_timeout_timer();
    122a:	aa da       	rcall	.-2732   	; 0x780 <start_timeout_timer>
    122c:	81 e7       	ldi	r24, 0x71	; 113
    122e:	e8 2e       	mov	r14, r24
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	f8 2e       	mov	r15, r24
    1234:	63 01       	movw	r12, r6
    1236:	52 01       	movw	r10, r4
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    1238:	f7 01       	movw	r30, r14
    123a:	41 81       	ldd	r20, Z+1	; 0x01
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	54 2f       	mov	r21, r20
    1240:	44 27       	eor	r20, r20
    1242:	80 81       	ld	r24, Z
    1244:	48 2b       	or	r20, r24
				if (combinedBytes != 0xFFFF) {
    1246:	4f 3f       	cpi	r20, 0xFF	; 255
    1248:	ff ef       	ldi	r31, 0xFF	; 255
    124a:	5f 07       	cpc	r21, r31
    124c:	21 f0       	breq	.+8      	; 0x1256 <main+0xa06>
					gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	c6 01       	movw	r24, r12
    1252:	b5 01       	movw	r22, r10
    1254:	67 da       	rcall	.-2866   	; 0x724 <gba_flash_write_byte>
				}
				address++;
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	a2 1a       	sub	r10, r18
    125a:	b2 0a       	sbc	r11, r18
    125c:	c2 0a       	sbc	r12, r18
    125e:	d2 0a       	sbc	r13, r18
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	e8 0e       	add	r14, r24
    1264:	f1 1c       	adc	r15, r1
				readLength = 256;
			}
			usart_read_bytes(readLength);
			start_timeout_timer();
			
			for (int x = 0; x < readLength; x += 2) {
    1266:	c7 01       	movw	r24, r14
    1268:	81 57       	subi	r24, 0x71	; 113
    126a:	90 40       	sbci	r25, 0x00	; 0
    126c:	80 17       	cp	r24, r16
    126e:	91 07       	cpc	r25, r17
    1270:	1c f3       	brlt	.-58     	; 0x1238 <main+0x9e8>
    1272:	9f ef       	ldi	r25, 0xFF	; 255
    1274:	49 1a       	sub	r4, r25
    1276:	59 0a       	sbc	r5, r25
    1278:	69 0a       	sbc	r6, r25
    127a:	79 0a       	sbc	r7, r25
    127c:	01 50       	subi	r16, 0x01	; 1
    127e:	11 09       	sbc	r17, r1
    1280:	16 95       	lsr	r17
    1282:	07 95       	ror	r16
    1284:	40 0e       	add	r4, r16
    1286:	51 1e       	adc	r5, r17
    1288:	61 1c       	adc	r6, r1
    128a:	71 1c       	adc	r7, r1
    128c:	7f c2       	rjmp	.+1278   	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
    128e:	96 36       	cpi	r25, 0x66	; 102
    1290:	59 f5       	brne	.+86     	; 0x12e8 <main+0xa98>
			PORTD |= (1<<ACTIVITY_LED);
    1292:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 256;
			usart_read_bytes(readLength);
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	dd d6       	rcall	.+3514   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			start_timeout_timer();
    129a:	72 da       	rcall	.-2844   	; 0x780 <start_timeout_timer>
    129c:	01 e7       	ldi	r16, 0x71	; 113
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	73 01       	movw	r14, r6
    12a2:	62 01       	movw	r12, r4
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    12a4:	d8 01       	movw	r26, r16
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	4c 91       	ld	r20, X
    12aa:	11 97       	sbiw	r26, 0x01	; 1
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	54 2f       	mov	r21, r20
    12b0:	44 27       	eor	r20, r20
    12b2:	8c 91       	ld	r24, X
    12b4:	48 2b       	or	r20, r24
				if (combinedBytes != 0xFFFF) {
    12b6:	4f 3f       	cpi	r20, 0xFF	; 255
    12b8:	bf ef       	ldi	r27, 0xFF	; 255
    12ba:	5b 07       	cpc	r21, r27
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <main+0xa76>
					gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	c7 01       	movw	r24, r14
    12c2:	b6 01       	movw	r22, r12
    12c4:	2f da       	rcall	.-2978   	; 0x724 <gba_flash_write_byte>
				}
				address++;
    12c6:	ef ef       	ldi	r30, 0xFF	; 255
    12c8:	ce 1a       	sub	r12, r30
    12ca:	de 0a       	sbc	r13, r30
    12cc:	ee 0a       	sbc	r14, r30
    12ce:	fe 0a       	sbc	r15, r30
    12d0:	0e 5f       	subi	r16, 0xFE	; 254
    12d2:	1f 4f       	sbci	r17, 0xFF	; 255
			
			int readLength = 256;
			usart_read_bytes(readLength);
			start_timeout_timer();
			
			for (int x = 0; x < readLength; x += 2) {
    12d4:	f1 e0       	ldi	r31, 0x01	; 1
    12d6:	01 37       	cpi	r16, 0x71	; 113
    12d8:	1f 07       	cpc	r17, r31
    12da:	21 f7       	brne	.-56     	; 0x12a4 <main+0xa54>
    12dc:	20 e8       	ldi	r18, 0x80	; 128
    12de:	42 0e       	add	r4, r18
    12e0:	51 1c       	adc	r5, r1
    12e2:	61 1c       	adc	r6, r1
    12e4:	71 1c       	adc	r7, r1
    12e6:	52 c2       	rjmp	.+1188   	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GBA_FLASH_WRITE_BUFFERED_256BYTE) {
    12e8:	93 36       	cpi	r25, 0x63	; 99
    12ea:	09 f0       	breq	.+2      	; 0x12ee <main+0xa9e>
    12ec:	99 c0       	rjmp	.+306    	; 0x1420 <main+0xbd0>
			usart_read_bytes(256);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	b0 d6       	rcall	.+3424   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			PORTD |= (1<<ACTIVITY_LED);
    12f4:	93 9a       	sbi	0x12, 3	; 18
    12f6:	01 e7       	ldi	r16, 0x71	; 113
    12f8:	10 e0       	ldi	r17, 0x00	; 0
			
			// Setup buffered write
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
				start_timeout_timer();
    12fa:	42 da       	rcall	.-2940   	; 0x780 <start_timeout_timer>
				
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    12fc:	94 ba       	out	0x14, r9	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    12fe:	9a ba       	out	0x1a, r9	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1300:	97 ba       	out	0x17, r9	; 23
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	7c 01       	movw	r14, r24
    1308:	fc 01       	movw	r30, r24
    130a:	d8 01       	movw	r26, r16
				
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
					localBuffer[x] = receivedBuffer[byteCounter];
    130c:	8d 91       	ld	r24, X+
    130e:	81 93       	st	Z+, r24
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
				
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
    1310:	2e 16       	cp	r2, r30
    1312:	3f 06       	cpc	r3, r31
    1314:	d9 f7       	brne	.-10     	; 0x130c <main+0xabc>
					localBuffer[x] = receivedBuffer[byteCounter];
					byteCounter++;
				}
				
				gba_flash_write_bus_cycle(0x555, 0xAA);
    1316:	4a ea       	ldi	r20, 0xAA	; 170
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	65 e5       	ldi	r22, 0x55	; 85
    131c:	75 e0       	ldi	r23, 0x05	; 5
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	8a d9       	rcall	.-3308   	; 0x638 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(0x2AA, 0x55);
    1324:	45 e5       	ldi	r20, 0x55	; 85
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	6a ea       	ldi	r22, 0xAA	; 170
    132a:	72 e0       	ldi	r23, 0x02	; 2
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	83 d9       	rcall	.-3322   	; 0x638 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, 0x25);
    1332:	45 e2       	ldi	r20, 0x25	; 37
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	c3 01       	movw	r24, r6
    1338:	b2 01       	movw	r22, r4
    133a:	7e d9       	rcall	.-3332   	; 0x638 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, 0x0F); // Length
    133c:	4f e0       	ldi	r20, 0x0F	; 15
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	c3 01       	movw	r24, r6
    1342:	b2 01       	movw	r22, r4
    1344:	79 d9       	rcall	.-3342   	; 0x638 <gba_flash_write_bus_cycle>
    1346:	92 e0       	ldi	r25, 0x02	; 2
    1348:	9a 95       	dec	r25
    134a:	f1 f7       	brne	.-4      	; 0x1348 <main+0xaf8>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <main+0xafe>
				_delay_us(1);
				
				// Set address
				GBA_PORT_ROM_ADDR23_16 = (address >> 16);
    134e:	c3 01       	movw	r24, r6
    1350:	aa 27       	eor	r26, r26
    1352:	bb 27       	eor	r27, r27
    1354:	85 bb       	out	0x15, r24	; 21
				GBA_PORT_ROM_ADDR15_8 = (address >> 8);
    1356:	bb 27       	eor	r27, r27
    1358:	a7 2d       	mov	r26, r7
    135a:	96 2d       	mov	r25, r6
    135c:	85 2d       	mov	r24, r5
    135e:	8b bb       	out	0x1b, r24	; 27
				GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
    1360:	48 ba       	out	0x18, r4	; 24
				cs_mreqPin_low;
    1362:	94 98       	cbi	0x12, 4	; 18
				
				// Write data
				for (uint8_t x = 0; x < 32; x += 2) {
					GBA_PORT_ROM_DATA15_8 = localBuffer[x+1];
    1364:	d7 01       	movw	r26, r14
    1366:	11 96       	adiw	r26, 0x01	; 1
    1368:	8c 91       	ld	r24, X
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	8b bb       	out	0x1b, r24	; 27
					GBA_PORT_ROM_DATA7_0 = localBuffer[x];
    136e:	8c 91       	ld	r24, X
    1370:	88 bb       	out	0x18, r24	; 24
					
					wrPin_low;
    1372:	96 98       	cbi	0x12, 6	; 18
					asm volatile("nop");
    1374:	00 00       	nop
					asm volatile("nop");
    1376:	00 00       	nop
					asm volatile("nop");
    1378:	00 00       	nop
					wrPin_high;
    137a:	96 9a       	sbi	0x12, 6	; 18
					
					// Increment address
					rdPin_low;
    137c:	95 98       	cbi	0x12, 5	; 18
					asm volatile("nop");
    137e:	00 00       	nop
					rdPin_high;
    1380:	95 9a       	sbi	0x12, 5	; 18
    1382:	b2 e0       	ldi	r27, 0x02	; 2
    1384:	eb 0e       	add	r14, r27
    1386:	f1 1c       	adc	r15, r1
				GBA_PORT_ROM_ADDR15_8 = (address >> 8);
				GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
				cs_mreqPin_low;
				
				// Write data
				for (uint8_t x = 0; x < 32; x += 2) {
    1388:	2e 14       	cp	r2, r14
    138a:	3f 04       	cpc	r3, r15
    138c:	59 f7       	brne	.-42     	; 0x1364 <main+0xb14>
    138e:	73 01       	movw	r14, r6
    1390:	62 01       	movw	r12, r4
    1392:	e0 e1       	ldi	r30, 0x10	; 16
    1394:	ce 0e       	add	r12, r30
    1396:	d1 1c       	adc	r13, r1
    1398:	e1 1c       	adc	r14, r1
    139a:	f1 1c       	adc	r15, r1
    139c:	d3 01       	movw	r26, r6
    139e:	c2 01       	movw	r24, r4
    13a0:	0f 96       	adiw	r24, 0x0f	; 15
    13a2:	a1 1d       	adc	r26, r1
    13a4:	b1 1d       	adc	r27, r1
    13a6:	89 a3       	std	Y+33, r24	; 0x21
    13a8:	9a a3       	std	Y+34, r25	; 0x22
    13aa:	ab a3       	std	Y+35, r26	; 0x23
    13ac:	bc a3       	std	Y+36, r27	; 0x24
					rdPin_low;
					asm volatile("nop");
					rdPin_high;
					address++;
				}
				cs_mreqPin_high;
    13ae:	94 9a       	sbi	0x12, 4	; 18
				
				// Write buffer to flash
				gba_flash_write_bus_cycle(address-15, 0x29);
    13b0:	c3 01       	movw	r24, r6
    13b2:	b2 01       	movw	r22, r4
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	49 e2       	ldi	r20, 0x29	; 41
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	3b d9       	rcall	.-3466   	; 0x638 <gba_flash_write_bus_cycle>
    13c2:	af e8       	ldi	r26, 0x8F	; 143
    13c4:	b1 e0       	ldi	r27, 0x01	; 1
    13c6:	11 97       	sbiw	r26, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <main+0xb76>
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <main+0xb7c>
    13cc:	00 00       	nop
				_delay_us(200);
				
				// Verify last byte written
				uint16_t combinedBytes = (uint16_t) localBuffer[31] << 8 | (uint16_t) localBuffer[30];
    13ce:	af 8c       	ldd	r10, Y+31	; 0x1f
    13d0:	b8 a0       	ldd	r11, Y+32	; 0x20
				uint16_t dataVerify = gba_read_16bit_data(address-1);
    13d2:	69 a1       	ldd	r22, Y+33	; 0x21
    13d4:	7a a1       	ldd	r23, Y+34	; 0x22
    13d6:	8b a1       	ldd	r24, Y+35	; 0x23
    13d8:	9c a1       	ldd	r25, Y+36	; 0x24
    13da:	a9 d6       	rcall	.+3410   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
				while (dataVerify != combinedBytes) {
    13dc:	8a 15       	cp	r24, r10
    13de:	9b 05       	cpc	r25, r11
    13e0:	69 f0       	breq	.+26     	; 0x13fc <main+0xbac>
					dataVerify = gba_read_16bit_data(address-1);
    13e2:	69 a1       	ldd	r22, Y+33	; 0x21
    13e4:	7a a1       	ldd	r23, Y+34	; 0x22
    13e6:	8b a1       	ldd	r24, Y+35	; 0x23
    13e8:	9c a1       	ldd	r25, Y+36	; 0x24
    13ea:	a1 d6       	rcall	.+3394   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    13ec:	b2 e0       	ldi	r27, 0x02	; 2
    13ee:	ba 95       	dec	r27
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <main+0xb9e>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <main+0xba4>
					_delay_us(1);
					if (writingTimedout == 1) {
    13f4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
    13f8:	21 30       	cpi	r18, 0x01	; 1
    13fa:	81 f7       	brne	.-32     	; 0x13dc <main+0xb8c>
						break;
					}
				}
				if (writingTimedout == 1) {
    13fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	51 f0       	breq	.+20     	; 0x1418 <main+0xbc8>
    1404:	00 5e       	subi	r16, 0xE0	; 224
    1406:	1f 4f       	sbci	r17, 0xFF	; 255
			usart_read_bytes(256);
			PORTD |= (1<<ACTIVITY_LED);
			
			// Setup buffered write
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
    1408:	e1 e7       	ldi	r30, 0x71	; 113
    140a:	f1 e0       	ldi	r31, 0x01	; 1
    140c:	e0 17       	cp	r30, r16
    140e:	f1 07       	cpc	r31, r17
    1410:	19 f0       	breq	.+6      	; 0x1418 <main+0xbc8>
    1412:	26 01       	movw	r4, r12
    1414:	37 01       	movw	r6, r14
    1416:	71 cf       	rjmp	.-286    	; 0x12fa <main+0xaaa>
				}
				if (writingTimedout == 1) {
					break;
				}
			}
			check_if_timed_out(); // Send ACK if successful write
    1418:	c2 d9       	rcall	.-3196   	; 0x79e <check_if_timed_out>
    141a:	26 01       	movw	r4, r12
    141c:	37 01       	movw	r6, r14
    141e:	30 ca       	rjmp	.-2976   	; 0x880 <main+0x30>
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
    1420:	9c 36       	cpi	r25, 0x6C	; 108
    1422:	09 f0       	breq	.+2      	; 0x1426 <main+0xbd6>
    1424:	7a c0       	rjmp	.+244    	; 0x151a <main+0xcca>
			PORTD |= (1<<ACTIVITY_LED);
    1426:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    1428:	80 e4       	ldi	r24, 0x40	; 64
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	13 d6       	rcall	.+3110   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			start_timeout_timer();
    142e:	a8 d9       	rcall	.-3248   	; 0x780 <start_timeout_timer>
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1430:	94 ba       	out	0x14, r9	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1432:	9a ba       	out	0x1a, r9	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1434:	97 ba       	out	0x17, r9	; 23
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
    1436:	40 e6       	ldi	r20, 0x60	; 96
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	c3 01       	movw	r24, r6
    143c:	b2 01       	movw	r22, r4
    143e:	fc d8       	rcall	.-3592   	; 0x638 <gba_flash_write_bus_cycle>
			gba_flash_write_bus_cycle(address, 0xD0);
    1440:	40 ed       	ldi	r20, 0xD0	; 208
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	c3 01       	movw	r24, r6
    1446:	b2 01       	movw	r22, r4
    1448:	f7 d8       	rcall	.-3602   	; 0x638 <gba_flash_write_bus_cycle>
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
    144a:	48 ee       	ldi	r20, 0xE8	; 232
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	c3 01       	movw	r24, r6
    1450:	b2 01       	movw	r22, r4
    1452:	f2 d8       	rcall	.-3612   	; 0x638 <gba_flash_write_bus_cycle>
    1454:	f5 e8       	ldi	r31, 0x85	; 133
    1456:	fa 95       	dec	r31
    1458:	f1 f7       	brne	.-4      	; 0x1456 <main+0xc06>
    145a:	00 00       	nop
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
    145c:	c3 01       	movw	r24, r6
    145e:	b2 01       	movw	r22, r4
    1460:	66 d6       	rcall	.+3276   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
			while (dataVerify != 0x0080) {
    1462:	80 38       	cpi	r24, 0x80	; 128
    1464:	91 05       	cpc	r25, r1
    1466:	59 f0       	breq	.+22     	; 0x147e <main+0xc2e>
				dataVerify = gba_read_16bit_data(address);
    1468:	c3 01       	movw	r24, r6
    146a:	b2 01       	movw	r22, r4
    146c:	60 d6       	rcall	.+3264   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    146e:	25 e8       	ldi	r18, 0x85	; 133
    1470:	2a 95       	dec	r18
    1472:	f1 f7       	brne	.-4      	; 0x1470 <main+0xc20>
    1474:	00 00       	nop
				_delay_us(50);
				if (writingTimedout == 1) {
    1476:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
    147a:	21 30       	cpi	r18, 0x01	; 1
    147c:	91 f7       	brne	.-28     	; 0x1462 <main+0xc12>
				}
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    147e:	94 ba       	out	0x14, r9	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1480:	9a ba       	out	0x1a, r9	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1482:	97 ba       	out	0x17, r9	; 23
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
    1484:	4f e1       	ldi	r20, 0x1F	; 31
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	c3 01       	movw	r24, r6
    148a:	b2 01       	movw	r22, r4
    148c:	d5 d8       	rcall	.-3670   	; 0x638 <gba_flash_write_bus_cycle>
    148e:	01 e7       	ldi	r16, 0x71	; 113
    1490:	10 e0       	ldi	r17, 0x00	; 0
    1492:	73 01       	movw	r14, r6
    1494:	62 01       	movw	r12, r4
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
    1496:	d8 01       	movw	r26, r16
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	4c 91       	ld	r20, X
    149c:	11 97       	sbiw	r26, 0x01	; 1
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	54 2f       	mov	r21, r20
    14a2:	44 27       	eor	r20, r20
    14a4:	8c 91       	ld	r24, X
    14a6:	48 2b       	or	r20, r24
    14a8:	c7 01       	movw	r24, r14
    14aa:	b6 01       	movw	r22, r12
    14ac:	c5 d8       	rcall	.-3702   	; 0x638 <gba_flash_write_bus_cycle>
				address++;
    14ae:	bf ef       	ldi	r27, 0xFF	; 255
    14b0:	cb 1a       	sub	r12, r27
    14b2:	db 0a       	sbc	r13, r27
    14b4:	eb 0a       	sbc	r14, r27
    14b6:	fb 0a       	sbc	r15, r27
    14b8:	0e 5f       	subi	r16, 0xFE	; 254
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
    14bc:	e1 eb       	ldi	r30, 0xB1	; 177
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	e0 17       	cp	r30, r16
    14c2:	f1 07       	cpc	r31, r17
    14c4:	41 f7       	brne	.-48     	; 0x1496 <main+0xc46>
    14c6:	f0 e2       	ldi	r31, 0x20	; 32
    14c8:	4f 0e       	add	r4, r31
    14ca:	51 1c       	adc	r5, r1
    14cc:	61 1c       	adc	r6, r1
    14ce:	71 1c       	adc	r7, r1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
    14d0:	40 ed       	ldi	r20, 0xD0	; 208
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	c3 01       	movw	r24, r6
    14d6:	b2 01       	movw	r22, r4
    14d8:	af d8       	rcall	.-3746   	; 0x638 <gba_flash_write_bus_cycle>
    14da:	8f e6       	ldi	r24, 0x6F	; 111
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <main+0xc8e>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <main+0xc94>
    14e4:	00 00       	nop
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
    14e6:	c3 01       	movw	r24, r6
    14e8:	b2 01       	movw	r22, r4
    14ea:	21 d6       	rcall	.+3138   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
			while (dataVerify != 0x0080) {
    14ec:	80 38       	cpi	r24, 0x80	; 128
    14ee:	91 05       	cpc	r25, r1
    14f0:	59 f0       	breq	.+22     	; 0x1508 <main+0xcb8>
				dataVerify = gba_read_16bit_data(address);
    14f2:	c3 01       	movw	r24, r6
    14f4:	b2 01       	movw	r22, r4
    14f6:	1b d6       	rcall	.+3126   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    14f8:	a5 e8       	ldi	r26, 0x85	; 133
    14fa:	aa 95       	dec	r26
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <main+0xcaa>
    14fe:	00 00       	nop
				_delay_us(50);
				if (writingTimedout == 1) {
    1500:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
    1504:	21 30       	cpi	r18, 0x01	; 1
    1506:	91 f7       	brne	.-28     	; 0x14ec <main+0xc9c>
				}
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1508:	94 ba       	out	0x14, r9	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    150a:	9a ba       	out	0x1a, r9	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    150c:	97 ba       	out	0x17, r9	; 23
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
    150e:	4f ef       	ldi	r20, 0xFF	; 255
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	c3 01       	movw	r24, r6
    1514:	b2 01       	movw	r22, r4
    1516:	90 d8       	rcall	.-3808   	; 0x638 <gba_flash_write_bus_cycle>
    1518:	39 c1       	rjmp	.+626    	; 0x178c <main+0xf3c>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Intel word programming
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
    151a:	95 37       	cpi	r25, 0x75	; 117
    151c:	e1 f5       	brne	.+120    	; 0x1596 <main+0xd46>
			PORTD |= (1<<ACTIVITY_LED);
    151e:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    1520:	80 e4       	ldi	r24, 0x40	; 64
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	97 d5       	rcall	.+2862   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			start_timeout_timer();
    1526:	2c d9       	rcall	.-3496   	; 0x780 <start_timeout_timer>
    1528:	41 e7       	ldi	r20, 0x71	; 113
    152a:	e4 2e       	mov	r14, r20
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	f4 2e       	mov	r15, r20
    1530:	63 01       	movw	r12, r6
    1532:	52 01       	movw	r10, r4
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1534:	94 ba       	out	0x14, r9	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1536:	9a ba       	out	0x1a, r9	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1538:	97 ba       	out	0x17, r9	; 23
				
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    153a:	f7 01       	movw	r30, r14
    153c:	01 81       	ldd	r16, Z+1	; 0x01
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	10 2f       	mov	r17, r16
    1542:	00 27       	eor	r16, r16
    1544:	80 81       	ld	r24, Z
    1546:	08 2b       	or	r16, r24
				gba_flash_write_bus_cycle(address, 0x40);
    1548:	40 e4       	ldi	r20, 0x40	; 64
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	c6 01       	movw	r24, r12
    154e:	b5 01       	movw	r22, r10
    1550:	73 d8       	rcall	.-3866   	; 0x638 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, combinedBytes);
    1552:	a8 01       	movw	r20, r16
    1554:	c6 01       	movw	r24, r12
    1556:	b5 01       	movw	r22, r10
    1558:	6f d8       	rcall	.-3874   	; 0x638 <gba_flash_write_bus_cycle>
				
				// Verify status ok
				uint16_t status = gba_read_16bit_data(address);
    155a:	c6 01       	movw	r24, r12
    155c:	b5 01       	movw	r22, r10
    155e:	e7 d5       	rcall	.+3022   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
				while ((status & 0x80) == 0) {
    1560:	87 fd       	sbrc	r24, 7
    1562:	0b c0       	rjmp	.+22     	; 0x157a <main+0xd2a>
					status = gba_read_16bit_data(address);
    1564:	c6 01       	movw	r24, r12
    1566:	b5 01       	movw	r22, r10
    1568:	e2 d5       	rcall	.+3012   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    156a:	f5 e0       	ldi	r31, 0x05	; 5
    156c:	fa 95       	dec	r31
    156e:	f1 f7       	brne	.-4      	; 0x156c <main+0xd1c>
    1570:	00 00       	nop
					_delay_us(2);
					if (writingTimedout == 1) {
    1572:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
    1576:	91 30       	cpi	r25, 0x01	; 1
    1578:	99 f7       	brne	.-26     	; 0x1560 <main+0xd10>
						break;
					}
				}
				address++;
    157a:	2f ef       	ldi	r18, 0xFF	; 255
    157c:	a2 1a       	sub	r10, r18
    157e:	b2 0a       	sbc	r11, r18
    1580:	c2 0a       	sbc	r12, r18
    1582:	d2 0a       	sbc	r13, r18
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	e8 0e       	add	r14, r24
    1588:	f1 1c       	adc	r15, r1
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			start_timeout_timer();
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    158a:	a1 eb       	ldi	r26, 0xB1	; 177
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ae 15       	cp	r26, r14
    1590:	bf 05       	cpc	r27, r15
    1592:	81 f6       	brne	.-96     	; 0x1534 <main+0xce4>
    1594:	f6 c0       	rjmp	.+492    	; 0x1782 <main+0xf32>
		}
		
		// Intel flash command based chips, two chips interleaved (Flash2Advance 256M cart)
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		// Thanks to lesserkuma for adding support
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_INTERLEAVED_256BYTE) {
    1596:	96 37       	cpi	r25, 0x76	; 118
    1598:	09 f0       	breq	.+2      	; 0x159c <main+0xd4c>
    159a:	b4 c0       	rjmp	.+360    	; 0x1704 <main+0xeb4>
			PORTD |= (1<<ACTIVITY_LED);
    159c:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(256);
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	58 d5       	rcall	.+2736   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			start_timeout_timer();
    15a4:	ed d8       	rcall	.-3622   	; 0x780 <start_timeout_timer>
    15a6:	01 e7       	ldi	r16, 0x71	; 113
    15a8:	10 e0       	ldi	r17, 0x00	; 0
			
			// Loop four times, transferring 256 bytes over USB at once is faster than doing four transfers
			for (int c = 0; c < 4; c++) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    15aa:	94 ba       	out	0x14, r9	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    15ac:	9a ba       	out	0x1a, r9	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    15ae:	97 ba       	out	0x17, r9	; 23
				
				// Setup buffered write
				gba_flash_write_bus_cycle(address, 0xE8);
    15b0:	48 ee       	ldi	r20, 0xE8	; 232
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	c3 01       	movw	r24, r6
    15b6:	b2 01       	movw	r22, r4
    15b8:	3f d8       	rcall	.-3970   	; 0x638 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address+1, 0xE8);
    15ba:	73 01       	movw	r14, r6
    15bc:	62 01       	movw	r12, r4
    15be:	ef ef       	ldi	r30, 0xFF	; 255
    15c0:	ce 1a       	sub	r12, r30
    15c2:	de 0a       	sbc	r13, r30
    15c4:	ee 0a       	sbc	r14, r30
    15c6:	fe 0a       	sbc	r15, r30
    15c8:	48 ee       	ldi	r20, 0xE8	; 232
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	c7 01       	movw	r24, r14
    15ce:	b6 01       	movw	r22, r12
    15d0:	33 d8       	rcall	.-3994   	; 0x638 <gba_flash_write_bus_cycle>
				
				// Wait until both chips are ready
				while (gba_read_16bit_data(address) != 0x80) {
    15d2:	c3 01       	movw	r24, r6
    15d4:	b2 01       	movw	r22, r4
    15d6:	ab d5       	rcall	.+2902   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    15d8:	80 38       	cpi	r24, 0x80	; 128
    15da:	91 05       	cpc	r25, r1
    15dc:	49 f0       	breq	.+18     	; 0x15f0 <main+0xda0>
					if (writingTimedout == 1) {
    15de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	b1 f7       	brne	.-20     	; 0x15d2 <main+0xd82>
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <main+0xda0>
						break;
					}
				}
				while (gba_read_16bit_data(address+1) != 0x80) {
					if (writingTimedout == 1) {
    15e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	31 f0       	breq	.+12     	; 0x15fc <main+0xdac>
				while (gba_read_16bit_data(address) != 0x80) {
					if (writingTimedout == 1) {
						break;
					}
				}
				while (gba_read_16bit_data(address+1) != 0x80) {
    15f0:	c7 01       	movw	r24, r14
    15f2:	b6 01       	movw	r22, r12
    15f4:	9c d5       	rcall	.+2872   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    15f6:	80 38       	cpi	r24, 0x80	; 128
    15f8:	91 05       	cpc	r25, r1
    15fa:	b1 f7       	brne	.-20     	; 0x15e8 <main+0xd98>
				}
				
				//do { status = gba_read_16bit_data(address); } while (status != 0x80);
				//do { status = gba_read_16bit_data(address+1); } while (status != 0x80);
				
				if (writingTimedout == 0) {
    15fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1600:	81 11       	cpse	r24, r1
    1602:	6b c0       	rjmp	.+214    	; 0x16da <main+0xe8a>
					start_timeout_timer();
    1604:	bd d8       	rcall	.-3718   	; 0x780 <start_timeout_timer>
					
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1606:	94 ba       	out	0x14, r9	; 20
					GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1608:	9a ba       	out	0x1a, r9	; 26
					GBA_DDR_ROM_ADDR7_0 = 0xFF;
    160a:	97 ba       	out	0x17, r9	; 23
					
					// Set length (number of words+1 to write)
					gba_flash_write_bus_cycle(address, 0x0F); // 16 words
    160c:	4f e0       	ldi	r20, 0x0F	; 15
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	c3 01       	movw	r24, r6
    1612:	b2 01       	movw	r22, r4
    1614:	11 d8       	rcall	.-4062   	; 0x638 <gba_flash_write_bus_cycle>
					gba_flash_write_bus_cycle(address+1, 0x0F); // 16 words
    1616:	4f e0       	ldi	r20, 0x0F	; 15
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	c7 01       	movw	r24, r14
    161c:	b6 01       	movw	r22, r12
    161e:	0c d8       	rcall	.-4072   	; 0x638 <gba_flash_write_bus_cycle>
    1620:	1a a3       	std	Y+34, r17	; 0x22
    1622:	09 a3       	std	Y+33, r16	; 0x21
    1624:	4f a2       	std	Y+39, r4	; 0x27
    1626:	58 a6       	std	Y+40, r5	; 0x28
    1628:	69 a6       	std	Y+41, r6	; 0x29
    162a:	7a a6       	std	Y+42, r7	; 0x2a
					
					// Write data (32 words total)
					uint16_t combinedBytes;
					for (int x = 0; x < 64; x += 2) {
    162c:	a1 2c       	mov	r10, r1
    162e:	b1 2c       	mov	r11, r1
						combinedBytes = (uint16_t) receivedBuffer[c*64+x+1] << 8 | (uint16_t) receivedBuffer[c*64+x];
						gba_flash_write_bus_cycle(address, combinedBytes);
    1630:	a9 a1       	ldd	r26, Y+33	; 0x21
    1632:	ba a1       	ldd	r27, Y+34	; 0x22
    1634:	11 96       	adiw	r26, 0x01	; 1
    1636:	4c 91       	ld	r20, X
    1638:	11 97       	sbiw	r26, 0x01	; 1
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	54 2f       	mov	r21, r20
    163e:	44 27       	eor	r20, r20
    1640:	8c 91       	ld	r24, X
    1642:	48 2b       	or	r20, r24
    1644:	6f a1       	ldd	r22, Y+39	; 0x27
    1646:	78 a5       	ldd	r23, Y+40	; 0x28
    1648:	89 a5       	ldd	r24, Y+41	; 0x29
    164a:	9a a5       	ldd	r25, Y+42	; 0x2a
    164c:	f5 d7       	rcall	.+4074   	; 0x2638 <__TEXT_REGION_LENGTH__+0x638>
						address++;
    164e:	8f a1       	ldd	r24, Y+39	; 0x27
    1650:	98 a5       	ldd	r25, Y+40	; 0x28
    1652:	a9 a5       	ldd	r26, Y+41	; 0x29
    1654:	ba a5       	ldd	r27, Y+42	; 0x2a
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	a1 1d       	adc	r26, r1
    165a:	b1 1d       	adc	r27, r1
    165c:	8f a3       	std	Y+39, r24	; 0x27
    165e:	98 a7       	std	Y+40, r25	; 0x28
    1660:	a9 a7       	std	Y+41, r26	; 0x29
    1662:	ba a7       	std	Y+42, r27	; 0x2a
					gba_flash_write_bus_cycle(address, 0x0F); // 16 words
					gba_flash_write_bus_cycle(address+1, 0x0F); // 16 words
					
					// Write data (32 words total)
					uint16_t combinedBytes;
					for (int x = 0; x < 64; x += 2) {
    1664:	92 e0       	ldi	r25, 0x02	; 2
    1666:	a9 0e       	add	r10, r25
    1668:	b1 1c       	adc	r11, r1
    166a:	a9 a1       	ldd	r26, Y+33	; 0x21
    166c:	ba a1       	ldd	r27, Y+34	; 0x22
    166e:	12 96       	adiw	r26, 0x02	; 2
    1670:	ba a3       	std	Y+34, r27	; 0x22
    1672:	a9 a3       	std	Y+33, r26	; 0x21
    1674:	b0 e4       	ldi	r27, 0x40	; 64
    1676:	ab 16       	cp	r10, r27
    1678:	b1 04       	cpc	r11, r1
    167a:	d1 f6       	brne	.-76     	; 0x1630 <main+0xde0>
    167c:	d3 01       	movw	r26, r6
    167e:	c2 01       	movw	r24, r4
    1680:	80 96       	adiw	r24, 0x20	; 32
    1682:	a1 1d       	adc	r26, r1
    1684:	b1 1d       	adc	r27, r1
    1686:	89 a3       	std	Y+33, r24	; 0x21
    1688:	9a a3       	std	Y+34, r25	; 0x22
    168a:	ab a3       	std	Y+35, r26	; 0x23
    168c:	bc a3       	std	Y+36, r27	; 0x24
						gba_flash_write_bus_cycle(address, combinedBytes);
						address++;
					}
					
					// Write buffer to flash
					gba_flash_write_bus_cycle(address-32, 0xD0);
    168e:	40 ed       	ldi	r20, 0xD0	; 208
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	c3 01       	movw	r24, r6
    1694:	b2 01       	movw	r22, r4
    1696:	d0 d7       	rcall	.+4000   	; 0x2638 <__TEXT_REGION_LENGTH__+0x638>
					gba_flash_write_bus_cycle(address-32+1, 0xD0);
    1698:	40 ed       	ldi	r20, 0xD0	; 208
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	c7 01       	movw	r24, r14
    169e:	b6 01       	movw	r22, r12
    16a0:	cb d7       	rcall	.+3990   	; 0x2638 <__TEXT_REGION_LENGTH__+0x638>
					
					// Wait until ready
					while (gba_read_16bit_data(address) != 0x80) {
    16a2:	69 a1       	ldd	r22, Y+33	; 0x21
    16a4:	7a a1       	ldd	r23, Y+34	; 0x22
    16a6:	8b a1       	ldd	r24, Y+35	; 0x23
    16a8:	9c a1       	ldd	r25, Y+36	; 0x24
    16aa:	41 d5       	rcall	.+2690   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    16ac:	80 38       	cpi	r24, 0x80	; 128
    16ae:	91 05       	cpc	r25, r1
    16b0:	21 f0       	breq	.+8      	; 0x16ba <main+0xe6a>
						if (writingTimedout == 1) {
    16b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f7       	brne	.-24     	; 0x16a2 <main+0xe52>
							break;
						}
					}
					while (gba_read_16bit_data(address+1) != 0x80) {
    16ba:	91 e2       	ldi	r25, 0x21	; 33
    16bc:	49 0e       	add	r4, r25
    16be:	51 1c       	adc	r5, r1
    16c0:	61 1c       	adc	r6, r1
    16c2:	71 1c       	adc	r7, r1
    16c4:	c3 01       	movw	r24, r6
    16c6:	b2 01       	movw	r22, r4
    16c8:	32 d5       	rcall	.+2660   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    16ca:	80 38       	cpi	r24, 0x80	; 128
    16cc:	91 05       	cpc	r25, r1
    16ce:	49 f0       	breq	.+18     	; 0x16e2 <main+0xe92>
						if (writingTimedout == 1) {
    16d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	b1 f7       	brne	.-20     	; 0x16c4 <main+0xe74>
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <main+0xe92>
    16da:	49 a2       	std	Y+33, r4	; 0x21
    16dc:	5a a2       	std	Y+34, r5	; 0x22
    16de:	6b a2       	std	Y+35, r6	; 0x23
    16e0:	7c a2       	std	Y+36, r7	; 0x24
    16e2:	00 5c       	subi	r16, 0xC0	; 192
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(256);
			start_timeout_timer();
			
			// Loop four times, transferring 256 bytes over USB at once is faster than doing four transfers
			for (int c = 0; c < 4; c++) {
    16e6:	a1 e0       	ldi	r26, 0x01	; 1
    16e8:	01 37       	cpi	r16, 0x71	; 113
    16ea:	1a 07       	cpc	r17, r26
    16ec:	29 f0       	breq	.+10     	; 0x16f8 <main+0xea8>
    16ee:	49 a0       	ldd	r4, Y+33	; 0x21
    16f0:	5a a0       	ldd	r5, Y+34	; 0x22
    16f2:	6b a0       	ldd	r6, Y+35	; 0x23
    16f4:	7c a0       	ldd	r7, Y+36	; 0x24
    16f6:	59 cf       	rjmp	.-334    	; 0x15aa <main+0xd5a>
				}
				//do { status = gba_read_16bit_data(address); } while (status != 0x80);
				//do { status = gba_read_16bit_data(address+1); } while (status != 0x80);
			}
			
			check_if_timed_out(); // Send ACK if successful write
    16f8:	52 d8       	rcall	.-3932   	; 0x79e <check_if_timed_out>
    16fa:	49 a0       	ldd	r4, Y+33	; 0x21
    16fc:	5a a0       	ldd	r5, Y+34	; 0x22
    16fe:	6b a0       	ldd	r6, Y+35	; 0x23
    1700:	7c a0       	ldd	r7, Y+36	; 0x24
    1702:	be c8       	rjmp	.-3716   	; 0x880 <main+0x30>
		}

		// Sharp LH28F320BJE programming (Thanks to lesserkuma for adding support)
		else if (receivedChar == GBA_FLASH_WRITE_SHARP_64BYTE) {
    1704:	98 37       	cpi	r25, 0x78	; 120
    1706:	09 f0       	breq	.+2      	; 0x170a <main+0xeba>
    1708:	43 c0       	rjmp	.+134    	; 0x1790 <main+0xf40>
			uint16_t status = 0;
			
			PORTD |= (1<<ACTIVITY_LED);
    170a:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    170c:	80 e4       	ldi	r24, 0x40	; 64
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a1 d4       	rcall	.+2370   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
			start_timeout_timer();
    1712:	36 d8       	rcall	.-3988   	; 0x780 <start_timeout_timer>
    1714:	91 e7       	ldi	r25, 0x71	; 113
    1716:	e9 2e       	mov	r14, r25
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	f9 2e       	mov	r15, r25
    171c:	63 01       	movw	r12, r6
    171e:	52 01       	movw	r10, r4
			check_if_timed_out(); // Send ACK if successful write
		}

		// Sharp LH28F320BJE programming (Thanks to lesserkuma for adding support)
		else if (receivedChar == GBA_FLASH_WRITE_SHARP_64BYTE) {
			uint16_t status = 0;
    1720:	81 2c       	mov	r8, r1
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Wait until ready
				while ((status & 0x80) != 0x80) {
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1722:	94 ba       	out	0x14, r9	; 20
					GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1724:	9a ba       	out	0x1a, r9	; 26
					GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1726:	97 ba       	out	0x17, r9	; 23
			start_timeout_timer();
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Wait until ready
				while ((status & 0x80) != 0x80) {
    1728:	87 fc       	sbrc	r8, 7
    172a:	0a c0       	rjmp	.+20     	; 0x1740 <main+0xef0>
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
					GBA_DDR_ROM_ADDR15_8 = 0xFF;
					GBA_DDR_ROM_ADDR7_0 = 0xFF;
					
					gba_flash_write_bus_cycle(address, 0x70); // Query status register
    172c:	40 e7       	ldi	r20, 0x70	; 112
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	c6 01       	movw	r24, r12
    1732:	b5 01       	movw	r22, r10
    1734:	81 d7       	rcall	.+3842   	; 0x2638 <__TEXT_REGION_LENGTH__+0x638>
					status = gba_read_16bit_data(address);
    1736:	c6 01       	movw	r24, r12
    1738:	b5 01       	movw	r22, r10
    173a:	f9 d4       	rcall	.+2546   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    173c:	88 2e       	mov	r8, r24
    173e:	f1 cf       	rjmp	.-30     	; 0x1722 <main+0xed2>
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
				
				// Write one word to flash
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    1740:	f7 01       	movw	r30, r14
    1742:	01 81       	ldd	r16, Z+1	; 0x01
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	10 2f       	mov	r17, r16
    1748:	00 27       	eor	r16, r16
    174a:	80 81       	ld	r24, Z
    174c:	08 2b       	or	r16, r24
				gba_flash_write_bus_cycle(address, 0x10);
    174e:	40 e1       	ldi	r20, 0x10	; 16
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	c6 01       	movw	r24, r12
    1754:	b5 01       	movw	r22, r10
    1756:	70 d7       	rcall	.+3808   	; 0x2638 <__TEXT_REGION_LENGTH__+0x638>
				gba_flash_write_bus_cycle(address, combinedBytes);
    1758:	a8 01       	movw	r20, r16
    175a:	c6 01       	movw	r24, r12
    175c:	b5 01       	movw	r22, r10
    175e:	6c d7       	rcall	.+3800   	; 0x2638 <__TEXT_REGION_LENGTH__+0x638>
    1760:	fa e6       	ldi	r31, 0x6A	; 106
    1762:	fa 95       	dec	r31
    1764:	f1 f7       	brne	.-4      	; 0x1762 <main+0xf12>
    1766:	00 c0       	rjmp	.+0      	; 0x1768 <main+0xf18>
				_delay_us(40);
				
				address++;
    1768:	2f ef       	ldi	r18, 0xFF	; 255
    176a:	a2 1a       	sub	r10, r18
    176c:	b2 0a       	sbc	r11, r18
    176e:	c2 0a       	sbc	r12, r18
    1770:	d2 0a       	sbc	r13, r18
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	e8 0e       	add	r14, r24
    1776:	f1 1c       	adc	r15, r1
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			start_timeout_timer();
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    1778:	a1 eb       	ldi	r26, 0xB1	; 177
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	ae 15       	cp	r26, r14
    177e:	bf 05       	cpc	r27, r15
    1780:	81 f6       	brne	.-96     	; 0x1722 <main+0xed2>
    1782:	b0 e2       	ldi	r27, 0x20	; 32
    1784:	4b 0e       	add	r4, r27
    1786:	51 1c       	adc	r5, r1
    1788:	61 1c       	adc	r6, r1
    178a:	71 1c       	adc	r7, r1
				_delay_us(40);
				
				address++;
			}
			
			check_if_timed_out(); // Send ACK if successful write
    178c:	08 d8       	rcall	.-4080   	; 0x79e <check_if_timed_out>
    178e:	78 c8       	rjmp	.-3856   	; 0x880 <main+0x30>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}*/
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
    1790:	9d 34       	cpi	r25, 0x4D	; 77
    1792:	59 f4       	brne	.+22     	; 0x17aa <main+0xf5a>
			char commonChar = USART_Receive();
    1794:	57 d4       	rcall	.+2222   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
			if (commonChar == '1') {
    1796:	81 33       	cpi	r24, 0x31	; 49
    1798:	19 f4       	brne	.+6      	; 0x17a0 <main+0xf50>
				resetCommonLines = 1;
    179a:	a1 e0       	ldi	r26, 0x01	; 1
    179c:	ae a3       	std	Y+38, r26	; 0x26
    179e:	73 c8       	rjmp	.-3866   	; 0x886 <main+0x36>
			}
			else if (commonChar == '0') {
    17a0:	80 33       	cpi	r24, 0x30	; 48
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <main+0xf56>
    17a4:	6d c8       	rjmp	.-3878   	; 0x880 <main+0x30>
				resetCommonLines = 0;
    17a6:	1e a2       	std	Y+38, r1	; 0x26
    17a8:	6f c8       	rjmp	.-3874   	; 0x888 <main+0x38>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
    17aa:	98 36       	cpi	r25, 0x68	; 104
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <main+0xf62>
			USART_Transmit(PCB_VERSION);
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <main+0xf68>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
    17b2:	96 35       	cpi	r25, 0x56	; 86
    17b4:	19 f4       	brne	.+6      	; 0x17bc <main+0xf6c>
			USART_Transmit(FIRMWARE_VERSION);
    17b6:	86 e1       	ldi	r24, 0x16	; 22
    17b8:	49 d4       	rcall	.+2194   	; 0x204c <__TEXT_REGION_LENGTH__+0x4c>
    17ba:	62 c8       	rjmp	.-3900   	; 0x880 <main+0x30>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
    17bc:	9a 32       	cpi	r25, 0x2A	; 42
    17be:	09 f0       	breq	.+2      	; 0x17c2 <main+0xf72>
    17c0:	5f c8       	rjmp	.-3906   	; 0x880 <main+0x30>
			usart_read_chars();
    17c2:	5d d4       	rcall	.+2234   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
    17c4:	40 e1       	ldi	r20, 0x10	; 16
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	81 e7       	ldi	r24, 0x71	; 113
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	12 d0       	rcall	.+36     	; 0x17f6 <strtol>
			if (resetValue == RESET_VALUE) {
    17d2:	61 3e       	cpi	r22, 0xE1	; 225
    17d4:	75 4e       	sbci	r23, 0xE5	; 229
    17d6:	87 40       	sbci	r24, 0x07	; 7
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f0       	breq	.+2      	; 0x17de <main+0xf8e>
    17dc:	51 c8       	rjmp	.-3934   	; 0x880 <main+0x30>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
    17de:	84 b7       	in	r24, 0x34	; 52
    17e0:	87 7f       	andi	r24, 0xF7	; 247
    17e2:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
    17e4:	88 e1       	ldi	r24, 0x18	; 24
    17e6:	81 bd       	out	0x21, r24	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
    17e8:	8c e0       	ldi	r24, 0x0C	; 12
    17ea:	81 bd       	out	0x21, r24	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	9f ef       	ldi	r25, 0xFF	; 255
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <main+0xfa0>
    17f4:	45 c8       	rjmp	.-3958   	; 0x880 <main+0x30>

000017f6 <strtol>:
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e0 e0       	ldi	r30, 0x00	; 0
    17fc:	fc e0       	ldi	r31, 0x0C	; 12
    17fe:	78 c1       	rjmp	.+752    	; 0x1af0 <__prologue_saves__+0x2>
    1800:	5c 01       	movw	r10, r24
    1802:	6b 01       	movw	r12, r22
    1804:	7a 01       	movw	r14, r20
    1806:	61 15       	cp	r22, r1
    1808:	71 05       	cpc	r23, r1
    180a:	19 f0       	breq	.+6      	; 0x1812 <strtol+0x1c>
    180c:	fb 01       	movw	r30, r22
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
    1812:	e1 14       	cp	r14, r1
    1814:	f1 04       	cpc	r15, r1
    1816:	29 f0       	breq	.+10     	; 0x1822 <strtol+0x2c>
    1818:	c7 01       	movw	r24, r14
    181a:	02 97       	sbiw	r24, 0x02	; 2
    181c:	83 97       	sbiw	r24, 0x23	; 35
    181e:	08 f0       	brcs	.+2      	; 0x1822 <strtol+0x2c>
    1820:	e2 c0       	rjmp	.+452    	; 0x19e6 <strtol+0x1f0>
    1822:	e5 01       	movw	r28, r10
    1824:	21 96       	adiw	r28, 0x01	; 1
    1826:	f5 01       	movw	r30, r10
    1828:	10 81       	ld	r17, Z
    182a:	81 2f       	mov	r24, r17
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	11 d1       	rcall	.+546    	; 0x1a52 <isspace>
    1830:	89 2b       	or	r24, r25
    1832:	11 f0       	breq	.+4      	; 0x1838 <strtol+0x42>
    1834:	5e 01       	movw	r10, r28
    1836:	f5 cf       	rjmp	.-22     	; 0x1822 <strtol+0x2c>
    1838:	1d 32       	cpi	r17, 0x2D	; 45
    183a:	29 f4       	brne	.+10     	; 0x1846 <strtol+0x50>
    183c:	21 96       	adiw	r28, 0x01	; 1
    183e:	f5 01       	movw	r30, r10
    1840:	11 81       	ldd	r17, Z+1	; 0x01
    1842:	01 e0       	ldi	r16, 0x01	; 1
    1844:	07 c0       	rjmp	.+14     	; 0x1854 <strtol+0x5e>
    1846:	1b 32       	cpi	r17, 0x2B	; 43
    1848:	21 f4       	brne	.+8      	; 0x1852 <strtol+0x5c>
    184a:	e5 01       	movw	r28, r10
    184c:	22 96       	adiw	r28, 0x02	; 2
    184e:	f5 01       	movw	r30, r10
    1850:	11 81       	ldd	r17, Z+1	; 0x01
    1852:	00 e0       	ldi	r16, 0x00	; 0
    1854:	e1 14       	cp	r14, r1
    1856:	f1 04       	cpc	r15, r1
    1858:	09 f1       	breq	.+66     	; 0x189c <strtol+0xa6>
    185a:	f0 e1       	ldi	r31, 0x10	; 16
    185c:	ef 16       	cp	r14, r31
    185e:	f1 04       	cpc	r15, r1
    1860:	29 f4       	brne	.+10     	; 0x186c <strtol+0x76>
    1862:	3e c0       	rjmp	.+124    	; 0x18e0 <strtol+0xea>
    1864:	10 e3       	ldi	r17, 0x30	; 48
    1866:	e1 14       	cp	r14, r1
    1868:	f1 04       	cpc	r15, r1
    186a:	21 f1       	breq	.+72     	; 0x18b4 <strtol+0xbe>
    186c:	28 e0       	ldi	r18, 0x08	; 8
    186e:	e2 16       	cp	r14, r18
    1870:	f1 04       	cpc	r15, r1
    1872:	01 f1       	breq	.+64     	; 0x18b4 <strtol+0xbe>
    1874:	54 f4       	brge	.+20     	; 0x188a <strtol+0x94>
    1876:	e2 e0       	ldi	r30, 0x02	; 2
    1878:	ee 16       	cp	r14, r30
    187a:	f1 04       	cpc	r15, r1
    187c:	21 f5       	brne	.+72     	; 0x18c6 <strtol+0xd0>
    187e:	81 2c       	mov	r8, r1
    1880:	91 2c       	mov	r9, r1
    1882:	a1 2c       	mov	r10, r1
    1884:	b0 e4       	ldi	r27, 0x40	; 64
    1886:	bb 2e       	mov	r11, r27
    1888:	3d c0       	rjmp	.+122    	; 0x1904 <strtol+0x10e>
    188a:	fa e0       	ldi	r31, 0x0A	; 10
    188c:	ef 16       	cp	r14, r31
    188e:	f1 04       	cpc	r15, r1
    1890:	39 f0       	breq	.+14     	; 0x18a0 <strtol+0xaa>
    1892:	20 e1       	ldi	r18, 0x10	; 16
    1894:	e2 16       	cp	r14, r18
    1896:	f1 04       	cpc	r15, r1
    1898:	b1 f4       	brne	.+44     	; 0x18c6 <strtol+0xd0>
    189a:	2f c0       	rjmp	.+94     	; 0x18fa <strtol+0x104>
    189c:	10 33       	cpi	r17, 0x30	; 48
    189e:	11 f1       	breq	.+68     	; 0x18e4 <strtol+0xee>
    18a0:	fa e0       	ldi	r31, 0x0A	; 10
    18a2:	ef 2e       	mov	r14, r31
    18a4:	f1 2c       	mov	r15, r1
    18a6:	ac ec       	ldi	r26, 0xCC	; 204
    18a8:	8a 2e       	mov	r8, r26
    18aa:	98 2c       	mov	r9, r8
    18ac:	a8 2c       	mov	r10, r8
    18ae:	ac e0       	ldi	r26, 0x0C	; 12
    18b0:	ba 2e       	mov	r11, r26
    18b2:	28 c0       	rjmp	.+80     	; 0x1904 <strtol+0x10e>
    18b4:	78 e0       	ldi	r23, 0x08	; 8
    18b6:	e7 2e       	mov	r14, r23
    18b8:	f1 2c       	mov	r15, r1
    18ba:	81 2c       	mov	r8, r1
    18bc:	91 2c       	mov	r9, r1
    18be:	a1 2c       	mov	r10, r1
    18c0:	e0 e1       	ldi	r30, 0x10	; 16
    18c2:	be 2e       	mov	r11, r30
    18c4:	1f c0       	rjmp	.+62     	; 0x1904 <strtol+0x10e>
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e8       	ldi	r25, 0x80	; 128
    18ce:	97 01       	movw	r18, r14
    18d0:	0f 2c       	mov	r0, r15
    18d2:	00 0c       	add	r0, r0
    18d4:	44 0b       	sbc	r20, r20
    18d6:	55 0b       	sbc	r21, r21
    18d8:	de d0       	rcall	.+444    	; 0x1a96 <__udivmodsi4>
    18da:	49 01       	movw	r8, r18
    18dc:	5a 01       	movw	r10, r20
    18de:	12 c0       	rjmp	.+36     	; 0x1904 <strtol+0x10e>
    18e0:	10 33       	cpi	r17, 0x30	; 48
    18e2:	59 f4       	brne	.+22     	; 0x18fa <strtol+0x104>
    18e4:	88 81       	ld	r24, Y
    18e6:	8f 7d       	andi	r24, 0xDF	; 223
    18e8:	88 35       	cpi	r24, 0x58	; 88
    18ea:	09 f0       	breq	.+2      	; 0x18ee <strtol+0xf8>
    18ec:	bb cf       	rjmp	.-138    	; 0x1864 <strtol+0x6e>
    18ee:	19 81       	ldd	r17, Y+1	; 0x01
    18f0:	22 96       	adiw	r28, 0x02	; 2
    18f2:	02 60       	ori	r16, 0x02	; 2
    18f4:	80 e1       	ldi	r24, 0x10	; 16
    18f6:	e8 2e       	mov	r14, r24
    18f8:	f1 2c       	mov	r15, r1
    18fa:	81 2c       	mov	r8, r1
    18fc:	91 2c       	mov	r9, r1
    18fe:	a1 2c       	mov	r10, r1
    1900:	68 e0       	ldi	r22, 0x08	; 8
    1902:	b6 2e       	mov	r11, r22
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	cb 01       	movw	r24, r22
    190c:	27 01       	movw	r4, r14
    190e:	0f 2c       	mov	r0, r15
    1910:	00 0c       	add	r0, r0
    1912:	66 08       	sbc	r6, r6
    1914:	77 08       	sbc	r7, r7
    1916:	fe 01       	movw	r30, r28
    1918:	50 ed       	ldi	r21, 0xD0	; 208
    191a:	35 2e       	mov	r3, r21
    191c:	31 0e       	add	r3, r17
    191e:	29 e0       	ldi	r18, 0x09	; 9
    1920:	23 15       	cp	r18, r3
    1922:	70 f4       	brcc	.+28     	; 0x1940 <strtol+0x14a>
    1924:	2f eb       	ldi	r18, 0xBF	; 191
    1926:	21 0f       	add	r18, r17
    1928:	2a 31       	cpi	r18, 0x1A	; 26
    192a:	18 f4       	brcc	.+6      	; 0x1932 <strtol+0x13c>
    192c:	39 ec       	ldi	r19, 0xC9	; 201
    192e:	33 2e       	mov	r3, r19
    1930:	06 c0       	rjmp	.+12     	; 0x193e <strtol+0x148>
    1932:	2f e9       	ldi	r18, 0x9F	; 159
    1934:	21 0f       	add	r18, r17
    1936:	2a 31       	cpi	r18, 0x1A	; 26
    1938:	10 f5       	brcc	.+68     	; 0x197e <strtol+0x188>
    193a:	29 ea       	ldi	r18, 0xA9	; 169
    193c:	32 2e       	mov	r3, r18
    193e:	31 0e       	add	r3, r17
    1940:	23 2d       	mov	r18, r3
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	2e 15       	cp	r18, r14
    1946:	3f 05       	cpc	r19, r15
    1948:	d4 f4       	brge	.+52     	; 0x197e <strtol+0x188>
    194a:	47 fd       	sbrc	r20, 7
    194c:	15 c0       	rjmp	.+42     	; 0x1978 <strtol+0x182>
    194e:	86 16       	cp	r8, r22
    1950:	97 06       	cpc	r9, r23
    1952:	a8 06       	cpc	r10, r24
    1954:	b9 06       	cpc	r11, r25
    1956:	68 f0       	brcs	.+26     	; 0x1972 <strtol+0x17c>
    1958:	a3 01       	movw	r20, r6
    195a:	92 01       	movw	r18, r4
    195c:	8d d0       	rcall	.+282    	; 0x1a78 <__mulsi3>
    195e:	63 0d       	add	r22, r3
    1960:	71 1d       	adc	r23, r1
    1962:	81 1d       	adc	r24, r1
    1964:	91 1d       	adc	r25, r1
    1966:	61 30       	cpi	r22, 0x01	; 1
    1968:	71 05       	cpc	r23, r1
    196a:	81 05       	cpc	r24, r1
    196c:	20 e8       	ldi	r18, 0x80	; 128
    196e:	92 07       	cpc	r25, r18
    1970:	10 f0       	brcs	.+4      	; 0x1976 <strtol+0x180>
    1972:	4f ef       	ldi	r20, 0xFF	; 255
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <strtol+0x182>
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	21 96       	adiw	r28, 0x01	; 1
    197a:	10 81       	ld	r17, Z
    197c:	cc cf       	rjmp	.-104    	; 0x1916 <strtol+0x120>
    197e:	20 2f       	mov	r18, r16
    1980:	21 70       	andi	r18, 0x01	; 1
    1982:	c1 14       	cp	r12, r1
    1984:	d1 04       	cpc	r13, r1
    1986:	71 f0       	breq	.+28     	; 0x19a4 <strtol+0x1ae>
    1988:	44 23       	and	r20, r20
    198a:	29 f0       	breq	.+10     	; 0x1996 <strtol+0x1a0>
    198c:	21 97       	sbiw	r28, 0x01	; 1
    198e:	f6 01       	movw	r30, r12
    1990:	d1 83       	std	Z+1, r29	; 0x01
    1992:	c0 83       	st	Z, r28
    1994:	07 c0       	rjmp	.+14     	; 0x19a4 <strtol+0x1ae>
    1996:	01 ff       	sbrs	r16, 1
    1998:	19 c0       	rjmp	.+50     	; 0x19cc <strtol+0x1d6>
    199a:	22 97       	sbiw	r28, 0x02	; 2
    199c:	f6 01       	movw	r30, r12
    199e:	d1 83       	std	Z+1, r29	; 0x01
    19a0:	c0 83       	st	Z, r28
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <strtol+0x1d6>
    19a4:	47 ff       	sbrs	r20, 7
    19a6:	12 c0       	rjmp	.+36     	; 0x19cc <strtol+0x1d6>
    19a8:	22 23       	and	r18, r18
    19aa:	29 f0       	breq	.+10     	; 0x19b6 <strtol+0x1c0>
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e8       	ldi	r25, 0x80	; 128
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <strtol+0x1c8>
    19b6:	6f ef       	ldi	r22, 0xFF	; 255
    19b8:	7f ef       	ldi	r23, 0xFF	; 255
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	9f e7       	ldi	r25, 0x7F	; 127
    19be:	22 e2       	ldi	r18, 0x22	; 34
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <errno+0x1>
    19c6:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <errno>
    19ca:	09 c0       	rjmp	.+18     	; 0x19de <strtol+0x1e8>
    19cc:	22 23       	and	r18, r18
    19ce:	81 f0       	breq	.+32     	; 0x19f0 <strtol+0x1fa>
    19d0:	90 95       	com	r25
    19d2:	80 95       	com	r24
    19d4:	70 95       	com	r23
    19d6:	61 95       	neg	r22
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	8f 4f       	sbci	r24, 0xFF	; 255
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	46 2f       	mov	r20, r22
    19e0:	37 2f       	mov	r19, r23
    19e2:	28 2f       	mov	r18, r24
    19e4:	12 c0       	rjmp	.+36     	; 0x1a0a <strtol+0x214>
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0d c0       	rjmp	.+26     	; 0x1a0a <strtol+0x214>
    19f0:	97 ff       	sbrs	r25, 7
    19f2:	f5 cf       	rjmp	.-22     	; 0x19de <strtol+0x1e8>
    19f4:	82 e2       	ldi	r24, 0x22	; 34
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <errno+0x1>
    19fc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <errno>
    1a00:	6f ef       	ldi	r22, 0xFF	; 255
    1a02:	7f ef       	ldi	r23, 0xFF	; 255
    1a04:	8f ef       	ldi	r24, 0xFF	; 255
    1a06:	9f e7       	ldi	r25, 0x7F	; 127
    1a08:	ea cf       	rjmp	.-44     	; 0x19de <strtol+0x1e8>
    1a0a:	64 2f       	mov	r22, r20
    1a0c:	73 2f       	mov	r23, r19
    1a0e:	82 2f       	mov	r24, r18
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	e1 e1       	ldi	r30, 0x11	; 17
    1a16:	88 c0       	rjmp	.+272    	; 0x1b28 <__epilogue_restores__+0x2>

00001a18 <atoi>:
    1a18:	fc 01       	movw	r30, r24
    1a1a:	88 27       	eor	r24, r24
    1a1c:	99 27       	eor	r25, r25
    1a1e:	e8 94       	clt
    1a20:	21 91       	ld	r18, Z+
    1a22:	20 32       	cpi	r18, 0x20	; 32
    1a24:	e9 f3       	breq	.-6      	; 0x1a20 <atoi+0x8>
    1a26:	29 30       	cpi	r18, 0x09	; 9
    1a28:	10 f0       	brcs	.+4      	; 0x1a2e <atoi+0x16>
    1a2a:	2e 30       	cpi	r18, 0x0E	; 14
    1a2c:	c8 f3       	brcs	.-14     	; 0x1a20 <atoi+0x8>
    1a2e:	2b 32       	cpi	r18, 0x2B	; 43
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <atoi+0x28>
    1a32:	2d 32       	cpi	r18, 0x2D	; 45
    1a34:	31 f4       	brne	.+12     	; 0x1a42 <atoi+0x2a>
    1a36:	68 94       	set
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <atoi+0x28>
    1a3a:	13 d0       	rcall	.+38     	; 0x1a62 <__mulhi_const_10>
    1a3c:	82 0f       	add	r24, r18
    1a3e:	91 1d       	adc	r25, r1
    1a40:	21 91       	ld	r18, Z+
    1a42:	20 53       	subi	r18, 0x30	; 48
    1a44:	2a 30       	cpi	r18, 0x0A	; 10
    1a46:	c8 f3       	brcs	.-14     	; 0x1a3a <atoi+0x22>
    1a48:	1e f4       	brtc	.+6      	; 0x1a50 <atoi+0x38>
    1a4a:	90 95       	com	r25
    1a4c:	81 95       	neg	r24
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	08 95       	ret

00001a52 <isspace>:
    1a52:	91 11       	cpse	r25, r1
    1a54:	0e c0       	rjmp	.+28     	; 0x1a72 <__ctype_isfalse>
    1a56:	80 32       	cpi	r24, 0x20	; 32
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <isspace+0xe>
    1a5a:	89 50       	subi	r24, 0x09	; 9
    1a5c:	85 50       	subi	r24, 0x05	; 5
    1a5e:	d0 f7       	brcc	.-12     	; 0x1a54 <isspace+0x2>
    1a60:	08 95       	ret

00001a62 <__mulhi_const_10>:
    1a62:	7a e0       	ldi	r23, 0x0A	; 10
    1a64:	97 9f       	mul	r25, r23
    1a66:	90 2d       	mov	r25, r0
    1a68:	87 9f       	mul	r24, r23
    1a6a:	80 2d       	mov	r24, r0
    1a6c:	91 0d       	add	r25, r1
    1a6e:	11 24       	eor	r1, r1
    1a70:	08 95       	ret

00001a72 <__ctype_isfalse>:
    1a72:	99 27       	eor	r25, r25
    1a74:	88 27       	eor	r24, r24

00001a76 <__ctype_istrue>:
    1a76:	08 95       	ret

00001a78 <__mulsi3>:
    1a78:	db 01       	movw	r26, r22
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	2d d0       	rcall	.+90     	; 0x1ada <__muluhisi3>
    1a80:	bf 91       	pop	r27
    1a82:	af 91       	pop	r26
    1a84:	a2 9f       	mul	r26, r18
    1a86:	80 0d       	add	r24, r0
    1a88:	91 1d       	adc	r25, r1
    1a8a:	a3 9f       	mul	r26, r19
    1a8c:	90 0d       	add	r25, r0
    1a8e:	b2 9f       	mul	r27, r18
    1a90:	90 0d       	add	r25, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	08 95       	ret

00001a96 <__udivmodsi4>:
    1a96:	a1 e2       	ldi	r26, 0x21	; 33
    1a98:	1a 2e       	mov	r1, r26
    1a9a:	aa 1b       	sub	r26, r26
    1a9c:	bb 1b       	sub	r27, r27
    1a9e:	fd 01       	movw	r30, r26
    1aa0:	0d c0       	rjmp	.+26     	; 0x1abc <__udivmodsi4_ep>

00001aa2 <__udivmodsi4_loop>:
    1aa2:	aa 1f       	adc	r26, r26
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	ee 1f       	adc	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	a2 17       	cp	r26, r18
    1aac:	b3 07       	cpc	r27, r19
    1aae:	e4 07       	cpc	r30, r20
    1ab0:	f5 07       	cpc	r31, r21
    1ab2:	20 f0       	brcs	.+8      	; 0x1abc <__udivmodsi4_ep>
    1ab4:	a2 1b       	sub	r26, r18
    1ab6:	b3 0b       	sbc	r27, r19
    1ab8:	e4 0b       	sbc	r30, r20
    1aba:	f5 0b       	sbc	r31, r21

00001abc <__udivmodsi4_ep>:
    1abc:	66 1f       	adc	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	1a 94       	dec	r1
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <__udivmodsi4_loop>
    1ac8:	60 95       	com	r22
    1aca:	70 95       	com	r23
    1acc:	80 95       	com	r24
    1ace:	90 95       	com	r25
    1ad0:	9b 01       	movw	r18, r22
    1ad2:	ac 01       	movw	r20, r24
    1ad4:	bd 01       	movw	r22, r26
    1ad6:	cf 01       	movw	r24, r30
    1ad8:	08 95       	ret

00001ada <__muluhisi3>:
    1ada:	40 d0       	rcall	.+128    	; 0x1b5c <__umulhisi3>
    1adc:	a5 9f       	mul	r26, r21
    1ade:	90 0d       	add	r25, r0
    1ae0:	b4 9f       	mul	r27, r20
    1ae2:	90 0d       	add	r25, r0
    1ae4:	a4 9f       	mul	r26, r20
    1ae6:	80 0d       	add	r24, r0
    1ae8:	91 1d       	adc	r25, r1
    1aea:	11 24       	eor	r1, r1
    1aec:	08 95       	ret

00001aee <__prologue_saves__>:
    1aee:	2f 92       	push	r2
    1af0:	3f 92       	push	r3
    1af2:	4f 92       	push	r4
    1af4:	5f 92       	push	r5
    1af6:	6f 92       	push	r6
    1af8:	7f 92       	push	r7
    1afa:	8f 92       	push	r8
    1afc:	9f 92       	push	r9
    1afe:	af 92       	push	r10
    1b00:	bf 92       	push	r11
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	ca 1b       	sub	r28, r26
    1b18:	db 0b       	sbc	r29, r27
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	09 94       	ijmp

00001b26 <__epilogue_restores__>:
    1b26:	2a 88       	ldd	r2, Y+18	; 0x12
    1b28:	39 88       	ldd	r3, Y+17	; 0x11
    1b2a:	48 88       	ldd	r4, Y+16	; 0x10
    1b2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b30:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b32:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b34:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b36:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b38:	b9 84       	ldd	r11, Y+9	; 0x09
    1b3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1b3c:	df 80       	ldd	r13, Y+7	; 0x07
    1b3e:	ee 80       	ldd	r14, Y+6	; 0x06
    1b40:	fd 80       	ldd	r15, Y+5	; 0x05
    1b42:	0c 81       	ldd	r16, Y+4	; 0x04
    1b44:	1b 81       	ldd	r17, Y+3	; 0x03
    1b46:	aa 81       	ldd	r26, Y+2	; 0x02
    1b48:	b9 81       	ldd	r27, Y+1	; 0x01
    1b4a:	ce 0f       	add	r28, r30
    1b4c:	d1 1d       	adc	r29, r1
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	ed 01       	movw	r28, r26
    1b5a:	08 95       	ret

00001b5c <__umulhisi3>:
    1b5c:	a2 9f       	mul	r26, r18
    1b5e:	b0 01       	movw	r22, r0
    1b60:	b3 9f       	mul	r27, r19
    1b62:	c0 01       	movw	r24, r0
    1b64:	a3 9f       	mul	r26, r19
    1b66:	01 d0       	rcall	.+2      	; 0x1b6a <__umulhisi3+0xe>
    1b68:	b2 9f       	mul	r27, r18
    1b6a:	70 0d       	add	r23, r0
    1b6c:	81 1d       	adc	r24, r1
    1b6e:	11 24       	eor	r1, r1
    1b70:	91 1d       	adc	r25, r1
    1b72:	08 95       	ret

00001b74 <_exit>:
    1b74:	f8 94       	cli

00001b76 <__stop_program>:
    1b76:	ff cf       	rjmp	.-2      	; 0x1b76 <__stop_program>
