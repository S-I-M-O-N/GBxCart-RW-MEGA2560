
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000016f2  00001786  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  00800060  00800060  00001786  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001786  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003214  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00004a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e0  00000000  00000000  0000514d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00006930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a1  00000000  00000000  00006c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000249a  00000000  00000000  00007335  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000097cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
       4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
       6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
       8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
       a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
       c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
       e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
      10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
      12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
      14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
      16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
      18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
      1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
      1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
      1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
      20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
      2e:	21 e0       	ldi	r18, 0x01	; 1
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
      36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
      38:	ac 37       	cpi	r26, 0x7C	; 124
      3a:	b2 07       	cpc	r27, r18
      3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
      3e:	b4 d3       	rcall	.+1896   	; 0x7a8 <main>
      40:	56 cb       	rjmp	.-2388   	; 0xfffff6ee <__eeprom_end+0xff7ef6ee>

00000042 <__bad_interrupt>:
      42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <USART_Receive>:
uint8_t lastBankAccessed = 0;


// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
      44:	5f 9b       	sbis	0x0b, 7	; 11
      46:	fe cf       	rjmp	.-4      	; 0x44 <USART_Receive>
	return UDR; // Get and return received data from buffer
      48:	8c b1       	in	r24, 0x0c	; 12
}
      4a:	08 95       	ret

0000004c <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
      4c:	5d 9b       	sbis	0x0b, 5	; 11
      4e:	fe cf       	rjmp	.-4      	; 0x4c <USART_Transmit>
	UDR = data;
      50:	8c b9       	out	0x0c, r24	; 12
      52:	08 95       	ret

00000054 <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
      54:	0f 93       	push	r16
      56:	1f 93       	push	r17
      58:	cf 93       	push	r28
      5a:	df 93       	push	r29
      5c:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
      5e:	c0 e7       	ldi	r28, 0x70	; 112
      60:	d0 e0       	ldi	r29, 0x00	; 0
      62:	ce 01       	movw	r24, r28
      64:	80 57       	subi	r24, 0x70	; 112
      66:	90 40       	sbci	r25, 0x00	; 0
      68:	80 17       	cp	r24, r16
      6a:	91 07       	cpc	r25, r17
      6c:	1c f4       	brge	.+6      	; 0x74 <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
      6e:	ea df       	rcall	.-44     	; 0x44 <USART_Receive>
      70:	89 93       	st	Y+, r24
      72:	f7 cf       	rjmp	.-18     	; 0x62 <usart_read_bytes+0xe>
	}
}
      74:	df 91       	pop	r29
      76:	cf 91       	pop	r28
      78:	1f 91       	pop	r17
      7a:	0f 91       	pop	r16
      7c:	08 95       	ret

0000007e <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	c0 e7       	ldi	r28, 0x70	; 112
      84:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
      86:	de df       	rcall	.-68     	; 0x44 <USART_Receive>
      88:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
      8a:	81 11       	cpse	r24, r1
      8c:	fc cf       	rjmp	.-8      	; 0x86 <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
      8e:	df 91       	pop	r29
      90:	cf 91       	pop	r28
      92:	08 95       	ret

00000094 <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
      94:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
      96:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
      98:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
      9a:	96 9a       	sbi	0x12, 6	; 18
      9c:	08 95       	ret

0000009e <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
      9e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      a0:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
      a2:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
      a4:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
      aa:	8a bb       	out	0x1a, r24	; 26
      ac:	08 95       	ret

000000ae <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
      ae:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
      b0:	88 bb       	out	0x18, r24	; 24
      b2:	08 95       	ret

000000b4 <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
      b4:	fc df       	rcall	.-8      	; 0xae <set_16bit_address>
	
	cs_mreqPin_low;
      b6:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
      b8:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
      ba:	00 00       	nop
	asm volatile("nop");
      bc:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
      be:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
      c0:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
      c2:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
      c4:	08 95       	ret

000000c6 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	d6 2f       	mov	r29, r22
      cc:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
      ce:	ef df       	rcall	.-34     	; 0xae <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
      d4:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
      d6:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
      d8:	c1 30       	cpi	r28, 0x01	; 1
      da:	09 f4       	brne	.+2      	; 0xde <write_8bit_data+0x18>
		cs_mreqPin_low;
      dc:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
      de:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
      e0:	c1 30       	cpi	r28, 0x01	; 1
      e2:	09 f4       	brne	.+2      	; 0xe6 <write_8bit_data+0x20>
		cs_mreqPin_high;
      e4:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
      e6:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
      e8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      ea:	14 ba       	out	0x14, r1	; 20
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
      f2:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
      f4:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
      f6:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
      f8:	8f ef       	ldi	r24, 0xFF	; 255
      fa:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
      fc:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
      fe:	84 bb       	out	0x14, r24	; 20
     100:	08 95       	ret

00000102 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
     106:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
     108:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     10a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     10c:	2f ef       	ldi	r18, 0xFF	; 255
     10e:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     110:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     112:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     114:	8c 01       	movw	r16, r24
     116:	22 27       	eor	r18, r18
     118:	33 27       	eor	r19, r19
     11a:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     11c:	07 2f       	mov	r16, r23
     11e:	18 2f       	mov	r17, r24
     120:	29 2f       	mov	r18, r25
     122:	33 27       	eor	r19, r19
     124:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     126:	68 bb       	out	0x18, r22	; 24
}
     128:	1f 91       	pop	r17
     12a:	0f 91       	pop	r16
     12c:	08 95       	ret

0000012e <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
     12e:	e9 df       	rcall	.-46     	; 0x102 <gba_set_24bit_address>
	
	cs_mreqPin_low;
     130:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be read out
     132:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     134:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
     136:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
     138:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
     13a:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
     13c:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
     13e:	29 b3       	in	r18, 0x19	; 25
     140:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
     142:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
     144:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
     146:	90 e0       	ldi	r25, 0x00	; 0
}
     148:	92 2b       	or	r25, r18
     14a:	08 95       	ret

0000014c <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
     14c:	b0 df       	rcall	.-160    	; 0xae <set_16bit_address>
	
	rdPin_low;
     14e:	95 98       	cbi	0x12, 5	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     150:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
     152:	00 00       	nop
	asm volatile("nop");
     154:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
     156:	83 b3       	in	r24, 0x13	; 19
	
	cs2Pin_high;
     158:	3a 9a       	sbi	0x07, 2	; 7
	rdPin_high;
     15a:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     15c:	08 95       	ret

0000015e <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
     15e:	cf 93       	push	r28
     160:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
     162:	a5 df       	rcall	.-182    	; 0xae <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
     168:	c5 bb       	out	0x15, r28	; 21
	
	// Pulse WR
	wrPin_low;
     16a:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     16c:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop");
     16e:	00 00       	nop
	asm volatile("nop");
     170:	00 00       	nop
	
	cs2Pin_high;
     172:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
     174:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     176:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     178:	14 ba       	out	0x14, r1	; 20
}
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     182:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     184:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
     186:	90 e8       	ldi	r25, 0x80	; 128
     188:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
     18a:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
     18c:	85 bb       	out	0x15, r24	; 21
     18e:	08 95       	ret

00000190 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
     190:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
     192:	62 30       	cpi	r22, 0x02	; 2
     194:	49 f4       	brne	.+18     	; 0x1a8 <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
     196:	41 11       	cpse	r20, r1
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
     19a:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
     19c:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
     19e:	e1 e0       	ldi	r30, 0x01	; 1
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
     1a4:	90 68       	ori	r25, 0x80	; 128
     1a6:	fa cf       	rjmp	.-12     	; 0x19c <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
     1a8:	41 11       	cpse	r20, r1
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
     1ac:	80 6c       	ori	r24, 0xC0	; 192
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
     1b0:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
     1b2:	27 e0       	ldi	r18, 0x07	; 7
     1b4:	f4 cf       	rjmp	.-24     	; 0x19e <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
     1b6:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
     1b8:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ba:	00 00       	nop
		asm ("nop");
     1bc:	00 00       	nop
		wrPin_high; 
     1be:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
     1c0:	00 00       	nop
		asm ("nop");
     1c2:	00 00       	nop
     1c4:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
     1c6:	27 fd       	sbrc	r18, 7
     1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
     1ca:	bf 01       	movw	r22, r30
     1cc:	02 2e       	mov	r0, r18
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <gba_eeprom_set_address+0x44>
     1d0:	66 0f       	add	r22, r22
     1d2:	77 1f       	adc	r23, r23
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <gba_eeprom_set_address+0x40>
     1d8:	68 23       	and	r22, r24
     1da:	79 23       	and	r23, r25
     1dc:	67 2b       	or	r22, r23
     1de:	59 f3       	breq	.-42     	; 0x1b6 <gba_eeprom_set_address+0x26>
			ad0Pin_high;
     1e0:	c0 9a       	sbi	0x18, 0	; 24
     1e2:	ea cf       	rjmp	.-44     	; 0x1b8 <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
     1e4:	41 11       	cpse	r20, r1
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <gba_eeprom_set_address+0x66>
		ad0Pin_low;
     1e8:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
     1ea:	00 00       	nop
		wrPin_low;
     1ec:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ee:	00 00       	nop
		asm ("nop");
     1f0:	00 00       	nop
		
		wrPin_high;
     1f2:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
     1f4:	94 9a       	sbi	0x12, 4	; 18
     1f6:	08 95       	ret

000001f8 <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	ca df       	rcall	.-108    	; 0x190 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fc:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fe:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
     200:	94 98       	cbi	0x12, 4	; 18
     202:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
     204:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
     206:	00 00       	nop
		asm ("nop");
     208:	00 00       	nop
		rdPin_high; 
     20a:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
     20c:	00 00       	nop
		asm ("nop");
     20e:	00 00       	nop
     210:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
     212:	c1 f7       	brne	.-16     	; 0x204 <gba_eeprom_read+0xc>
     214:	e1 e7       	ldi	r30, 0x71	; 113
     216:	f1 e0       	ldi	r31, 0x01	; 1
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
     21c:	87 e0       	ldi	r24, 0x07	; 7
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
     222:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
     224:	00 00       	nop
			asm ("nop");
     226:	00 00       	nop
			rdPin_high;
     228:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
     22a:	b0 9b       	sbis	0x16, 0	; 22
     22c:	07 c0       	rjmp	.+14     	; 0x23c <gba_eeprom_read+0x44>
				data |= (1<<x);
     22e:	ba 01       	movw	r22, r20
     230:	08 2e       	mov	r0, r24
     232:	01 c0       	rjmp	.+2      	; 0x236 <gba_eeprom_read+0x3e>
     234:	66 0f       	add	r22, r22
     236:	0a 94       	dec	r0
     238:	ea f7       	brpl	.-6      	; 0x234 <gba_eeprom_read+0x3c>
     23a:	26 2b       	or	r18, r22
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	88 f7       	brcc	.-30     	; 0x222 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
     240:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	e9 37       	cpi	r30, 0x79	; 121
     246:	f8 07       	cpc	r31, r24
     248:	49 f7       	brne	.-46     	; 0x21c <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
     24a:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
     24c:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
     24e:	b8 9a       	sbi	0x17, 0	; 23
     250:	08 95       	ret

00000252 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	9d df       	rcall	.-198    	; 0x190 <gba_eeprom_set_address>
     256:	e1 e7       	ldi	r30, 0x71	; 113
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
     25c:	27 e0       	ldi	r18, 0x07	; 7
     25e:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
     260:	80 81       	ld	r24, Z
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 2e       	mov	r0, r18
     266:	02 c0       	rjmp	.+4      	; 0x26c <__stack+0xd>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <__stack+0x9>
     270:	80 ff       	sbrs	r24, 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <__stack+0x19>
				ad0Pin_high;
     274:	c0 9a       	sbi	0x18, 0	; 24
     276:	01 c0       	rjmp	.+2      	; 0x27a <__stack+0x1b>
			}
			else {
				ad0Pin_low;
     278:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
     27a:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
     27c:	00 00       	nop
			asm ("nop");
     27e:	00 00       	nop
			wrPin_high; 
     280:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
     282:	00 00       	nop
			asm ("nop");
     284:	00 00       	nop
     286:	21 50       	subi	r18, 0x01	; 1
     288:	31 09       	sbc	r19, r1
     28a:	50 f7       	brcc	.-44     	; 0x260 <__stack+0x1>
     28c:	41 50       	subi	r20, 0x01	; 1
     28e:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     290:	41 11       	cpse	r20, r1
     292:	e4 cf       	rjmp	.-56     	; 0x25c <gba_eeprom_write+0xa>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
     294:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
     296:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
     298:	00 00       	nop
	asm ("nop");
     29a:	00 00       	nop
	wrPin_high; 
     29c:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
     29e:	00 00       	nop
	asm ("nop");
     2a0:	00 00       	nop
	
	cs_mreqPin_high;
     2a2:	94 9a       	sbi	0x12, 4	; 18
     2a4:	08 95       	ret

000002a6 <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
     2a6:	cf 93       	push	r28
     2a8:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     2aa:	2f ef       	ldi	r18, 0xFF	; 255
     2ac:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     2ae:	ff de       	rcall	.-514    	; 0xae <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
     2b0:	c5 bb       	out	0x15, r28	; 21
	
	wrPin_low;
     2b2:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low;
     2b4:	3a 98       	cbi	0x07, 2	; 7
	asm volatile("nop");
     2b6:	00 00       	nop
	wrPin_high;
     2b8:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
     2ba:	3a 9a       	sbi	0x07, 2	; 7
}
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
     2c4:	6a ea       	ldi	r22, 0xAA	; 170
     2c6:	85 e5       	ldi	r24, 0x55	; 85
     2c8:	95 e5       	ldi	r25, 0x55	; 85
     2ca:	ed df       	rcall	.-38     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     2cc:	65 e5       	ldi	r22, 0x55	; 85
     2ce:	8a ea       	ldi	r24, 0xAA	; 170
     2d0:	9a e2       	ldi	r25, 0x2A	; 42
     2d2:	e9 df       	rcall	.-46     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
     2d4:	60 e9       	ldi	r22, 0x90	; 144
     2d6:	85 e5       	ldi	r24, 0x55	; 85
     2d8:	95 e5       	ldi	r25, 0x55	; 85
     2da:	e5 df       	rcall	.-54     	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	8f e3       	ldi	r24, 0x3F	; 63
     2de:	9c e9       	ldi	r25, 0x9C	; 156
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <flash_read_chip_id+0x20>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <flash_read_chip_id+0x26>
     2e6:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     2e8:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     2ea:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2d df       	rcall	.-422    	; 0x14c <gba_read_ram_8bit_data>
     2f2:	ce e6       	ldi	r28, 0x6E	; 110
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
     2f6:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	27 df       	rcall	.-434    	; 0x14c <gba_read_ram_8bit_data>
     2fe:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
     300:	6a ea       	ldi	r22, 0xAA	; 170
     302:	85 e5       	ldi	r24, 0x55	; 85
     304:	95 e5       	ldi	r25, 0x55	; 85
     306:	cf df       	rcall	.-98     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     308:	65 e5       	ldi	r22, 0x55	; 85
     30a:	8a ea       	ldi	r24, 0xAA	; 170
     30c:	9a e2       	ldi	r25, 0x2A	; 42
     30e:	cb df       	rcall	.-106    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
     310:	60 ef       	ldi	r22, 0xF0	; 240
     312:	85 e5       	ldi	r24, 0x55	; 85
     314:	95 e5       	ldi	r25, 0x55	; 85
     316:	c7 df       	rcall	.-114    	; 0x2a6 <flash_write_bus_cycle>
     318:	8f e3       	ldi	r24, 0x3F	; 63
     31a:	9c e9       	ldi	r25, 0x9C	; 156
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <flash_read_chip_id+0x5c>
     320:	00 c0       	rjmp	.+0      	; 0x322 <flash_read_chip_id+0x62>
     322:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
     32a:	cf 93       	push	r28
     32c:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     32e:	6a ea       	ldi	r22, 0xAA	; 170
     330:	85 e5       	ldi	r24, 0x55	; 85
     332:	95 e5       	ldi	r25, 0x55	; 85
     334:	b8 df       	rcall	.-144    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     336:	65 e5       	ldi	r22, 0x55	; 85
     338:	8a ea       	ldi	r24, 0xAA	; 170
     33a:	9a e2       	ldi	r25, 0x2A	; 42
     33c:	b4 df       	rcall	.-152    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
     33e:	60 eb       	ldi	r22, 0xB0	; 176
     340:	85 e5       	ldi	r24, 0x55	; 85
     342:	95 e5       	ldi	r25, 0x55	; 85
     344:	b0 df       	rcall	.-160    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
     346:	6c 2f       	mov	r22, r28
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
}
     34c:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
     34e:	ab cf       	rjmp	.-170    	; 0x2a6 <flash_write_bus_cycle>

00000350 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
     350:	cf 93       	push	r28
     352:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     354:	6a ea       	ldi	r22, 0xAA	; 170
     356:	85 e5       	ldi	r24, 0x55	; 85
     358:	95 e5       	ldi	r25, 0x55	; 85
     35a:	a5 df       	rcall	.-182    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     35c:	65 e5       	ldi	r22, 0x55	; 85
     35e:	8a ea       	ldi	r24, 0xAA	; 170
     360:	9a e2       	ldi	r25, 0x2A	; 42
     362:	a1 df       	rcall	.-190    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
     364:	60 e8       	ldi	r22, 0x80	; 128
     366:	85 e5       	ldi	r24, 0x55	; 85
     368:	95 e5       	ldi	r25, 0x55	; 85
     36a:	9d df       	rcall	.-198    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
     36c:	6a ea       	ldi	r22, 0xAA	; 170
     36e:	85 e5       	ldi	r24, 0x55	; 85
     370:	95 e5       	ldi	r25, 0x55	; 85
     372:	99 df       	rcall	.-206    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     374:	65 e5       	ldi	r22, 0x55	; 85
     376:	8a ea       	ldi	r24, 0xAA	; 170
     378:	9a e2       	ldi	r25, 0x2A	; 42
     37a:	95 df       	rcall	.-214    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
     37c:	60 e3       	ldi	r22, 0x30	; 48
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	9c 2f       	mov	r25, r28
     382:	92 95       	swap	r25
     384:	90 7f       	andi	r25, 0xF0	; 240
     386:	8f df       	rcall	.-226    	; 0x2a6 <flash_write_bus_cycle>
     388:	8f e4       	ldi	r24, 0x4F	; 79
     38a:	93 ec       	ldi	r25, 0xC3	; 195
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <flash_erase_4k_sector+0x3c>
     390:	00 c0       	rjmp	.+0      	; 0x392 <flash_erase_4k_sector+0x42>
     392:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
     3a0:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
     3a2:	6a ea       	ldi	r22, 0xAA	; 170
     3a4:	85 e5       	ldi	r24, 0x55	; 85
     3a6:	95 e5       	ldi	r25, 0x55	; 85
     3a8:	7e df       	rcall	.-260    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3aa:	65 e5       	ldi	r22, 0x55	; 85
     3ac:	8a ea       	ldi	r24, 0xAA	; 170
     3ae:	9a e2       	ldi	r25, 0x2A	; 42
     3b0:	7a df       	rcall	.-268    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3b2:	60 ea       	ldi	r22, 0xA0	; 160
     3b4:	85 e5       	ldi	r24, 0x55	; 85
     3b6:	95 e5       	ldi	r25, 0x55	; 85
     3b8:	76 df       	rcall	.-276    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	73 df       	rcall	.-282    	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c0:	85 e3       	ldi	r24, 0x35	; 53
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <flash_write_byte+0x2a>
     3c6:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     3de:	6a ea       	ldi	r22, 0xAA	; 170
     3e0:	85 e5       	ldi	r24, 0x55	; 85
     3e2:	95 e5       	ldi	r25, 0x55	; 85
     3e4:	60 df       	rcall	.-320    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3e6:	65 e5       	ldi	r22, 0x55	; 85
     3e8:	8a ea       	ldi	r24, 0xAA	; 170
     3ea:	9a e2       	ldi	r25, 0x2A	; 42
     3ec:	5c df       	rcall	.-328    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3ee:	60 ea       	ldi	r22, 0xA0	; 160
     3f0:	85 e5       	ldi	r24, 0x55	; 85
     3f2:	95 e5       	ldi	r25, 0x55	; 85
     3f4:	58 df       	rcall	.-336    	; 0x2a6 <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
     3f6:	16 95       	lsr	r17
     3f8:	10 2f       	mov	r17, r16
     3fa:	00 27       	eor	r16, r16
     3fc:	17 95       	ror	r17
     3fe:	07 95       	ror	r16
     400:	90 e7       	ldi	r25, 0x70	; 112
     402:	e9 2e       	mov	r14, r25
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	f9 2e       	mov	r15, r25
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	f7 01       	movw	r30, r14
     40e:	61 91       	ld	r22, Z+
     410:	7f 01       	movw	r14, r30
     412:	ce 01       	movw	r24, r28
     414:	80 2b       	or	r24, r16
     416:	91 2b       	or	r25, r17
     418:	46 df       	rcall	.-372    	; 0x2a6 <flash_write_bus_cycle>
     41a:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
     41c:	c0 38       	cpi	r28, 0x80	; 128
     41e:	d1 05       	cpc	r29, r1
     420:	a9 f7       	brne	.-22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     422:	8f e3       	ldi	r24, 0x3F	; 63
     424:	9c e9       	ldi	r25, 0x9C	; 156
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	08 95       	ret

0000043c <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
     43c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     43e:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
     440:	36 de       	rcall	.-916    	; 0xae <set_16bit_address>
	
	rdPin_low;
     442:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     444:	00 00       	nop
	asm volatile("nop");
     446:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     448:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     44a:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     44c:	08 95       	ret

0000044e <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
     44e:	cf 93       	push	r28
     450:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     456:	2b de       	rcall	.-938    	; 0xae <set_16bit_address>
	PORT_DATA7_0 = data;
     458:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     45a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <flashWriteWePin>
     45e:	81 34       	cpi	r24, 0x41	; 65
     460:	31 f4       	brne	.+12     	; 0x46e <gb_flash_write_bus_cycle+0x20>
		audioPin_low; // WE low
     462:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     464:	00 00       	nop
		asm volatile("nop");
     466:	00 00       	nop
		asm volatile("nop");
     468:	00 00       	nop
		audioPin_high; // WE high
     46a:	39 9a       	sbi	0x07, 1	; 7
     46c:	05 c0       	rjmp	.+10     	; 0x478 <gb_flash_write_bus_cycle+0x2a>
	}
	else { // WR pin
		wrPin_low; // WE low
     46e:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     470:	00 00       	nop
		asm volatile("nop");
     472:	00 00       	nop
		asm volatile("nop");
     474:	00 00       	nop
		wrPin_high; // WE high
     476:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
     478:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     47a:	14 ba       	out	0x14, r1	; 20
}
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
     488:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     48a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <flashWriteCycle+0x2>
     48e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flashWriteCycle>
     492:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <flashWriteCycle+0x1>
     496:	db df       	rcall	.-74     	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     498:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <flashWriteCycle+0x6>
     49c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flashWriteCycle+0x4>
     4a0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <flashWriteCycle+0x5>
     4a4:	d4 df       	rcall	.-88     	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     4a6:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <flashWriteCycle+0xa>
     4aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <flashWriteCycle+0x8>
     4ae:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <flashWriteCycle+0x9>
     4b2:	cd df       	rcall	.-102    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     4b4:	61 2f       	mov	r22, r17
     4b6:	ce 01       	movw	r24, r28
     4b8:	ca df       	rcall	.-108    	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ba:	8a e1       	ldi	r24, 0x1A	; 26
     4bc:	8a 95       	dec	r24
     4be:	f1 f7       	brne	.-4      	; 0x4bc <gb_flash_write_byte+0x3c>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <gb_flash_write_byte+0x42>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     4c2:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     4c4:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     4c6:	ce 01       	movw	r24, r28
     4c8:	b9 df       	rcall	.-142    	; 0x43c <gb_flash_read_byte>
	while (data != dataVerify) {
     4ca:	81 17       	cp	r24, r17
     4cc:	39 f0       	breq	.+14     	; 0x4dc <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
     4ce:	ce 01       	movw	r24, r28
     4d0:	b5 df       	rcall	.-150    	; 0x43c <gb_flash_read_byte>
     4d2:	9d e0       	ldi	r25, 0x0D	; 13
     4d4:	9a 95       	dec	r25
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <gb_flash_write_byte+0x54>
     4d8:	00 00       	nop
     4da:	f7 cf       	rjmp	.-18     	; 0x4ca <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <gb_flash_write_byte_special>:

// Set the bank, write a single byte to the Flash address and pulse the reset pin
void gb_flash_write_byte_special(uint16_t address, uint8_t data) {
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	ec 01       	movw	r28, r24
     4ec:	16 2f       	mov	r17, r22
	// Set bank back
	if (flashBank1CommandWrites == 1) {
     4ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flashBank1CommandWrites>
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	51 f4       	brne	.+20     	; 0x50a <gb_flash_write_byte_special+0x26>
		write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	91 e2       	ldi	r25, 0x21	; 33
     500:	e2 dd       	rcall	.-1084   	; 0xc6 <write_8bit_data>
     502:	85 e8       	ldi	r24, 0x85	; 133
     504:	8a 95       	dec	r24
     506:	f1 f7       	brne	.-4      	; 0x504 <gb_flash_write_byte_special+0x20>
     508:	00 00       	nop
		_delay_us(50);
	}
	
	// Write
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     50a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <flashWriteCycle+0x2>
     50e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flashWriteCycle>
     512:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <flashWriteCycle+0x1>
     516:	9b df       	rcall	.-202    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     518:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <flashWriteCycle+0x6>
     51c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flashWriteCycle+0x4>
     520:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <flashWriteCycle+0x5>
     524:	94 df       	rcall	.-216    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     526:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <flashWriteCycle+0xa>
     52a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <flashWriteCycle+0x8>
     52e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <flashWriteCycle+0x9>
     532:	8d df       	rcall	.-230    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     534:	61 2f       	mov	r22, r17
     536:	ce 01       	movw	r24, r28
     538:	8a df       	rcall	.-236    	; 0x44e <gb_flash_write_bus_cycle>
     53a:	83 ef       	ldi	r24, 0xF3	; 243
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <gb_flash_write_byte_special+0x5a>
     542:	00 c0       	rjmp	.+0      	; 0x544 <gb_flash_write_byte_special+0x60>
     544:	00 00       	nop
	_delay_us(250); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     546:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     548:	14 ba       	out	0x14, r1	; 20
	
	// Pulse reset
	PORTE &= ~(1<<CS2_PIN);
     54a:	3a 98       	cbi	0x07, 2	; 7
     54c:	95 e8       	ldi	r25, 0x85	; 133
     54e:	9a 95       	dec	r25
     550:	f1 f7       	brne	.-4      	; 0x54e <gb_flash_write_byte_special+0x6a>
     552:	00 00       	nop
	_delay_us(50);
	PORTE |= (1<<CS2_PIN);
     554:	3a 9a       	sbi	0x07, 2	; 7
     556:	85 e8       	ldi	r24, 0x85	; 133
     558:	8a 95       	dec	r24
     55a:	f1 f7       	brne	.-4      	; 0x558 <gb_flash_write_byte_special+0x74>
     55c:	00 00       	nop
	_delay_us(50);
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	08 95       	ret

00000566 <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
     572:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
     574:	ff 24       	eor	r15, r15
     576:	fa 94       	dec	r15
     578:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     57a:	01 e2       	ldi	r16, 0x21	; 33
     57c:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     57e:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     584:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     586:	00 00       	nop
	wrPin_high;
     588:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     58a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <flashWriteCycle+0x2>
     58e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flashWriteCycle>
     592:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <flashWriteCycle+0x1>
     596:	5b df       	rcall	.-330    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     598:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <flashWriteCycle+0x6>
     59c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flashWriteCycle+0x4>
     5a0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <flashWriteCycle+0x5>
     5a4:	54 df       	rcall	.-344    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     5a6:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <flashWriteCycle+0xa>
     5aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <flashWriteCycle+0x8>
     5ae:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <flashWriteCycle+0x9>
     5b2:	4d df       	rcall	.-358    	; 0x44e <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
     5b4:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     5b6:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     5b8:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
     5ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     5be:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     5c0:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5c2:	00 00       	nop
	wrPin_high;
     5c4:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
     5c6:	61 2f       	mov	r22, r17
     5c8:	ce 01       	movw	r24, r28
     5ca:	41 df       	rcall	.-382    	; 0x44e <gb_flash_write_bus_cycle>
     5cc:	8a e1       	ldi	r24, 0x1A	; 26
     5ce:	8a 95       	dec	r24
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <gb_flash_write_byte_bank1_commands+0x68>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <gb_flash_write_byte_bank1_commands+0x6e>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     5d4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     5d6:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     5d8:	ce 01       	movw	r24, r28
     5da:	30 df       	rcall	.-416    	; 0x43c <gb_flash_read_byte>
	while (data != dataVerify) {
     5dc:	81 17       	cp	r24, r17
     5de:	39 f0       	breq	.+14     	; 0x5ee <gb_flash_write_byte_bank1_commands+0x88>
		dataVerify = gb_flash_read_byte(address);
     5e0:	ce 01       	movw	r24, r28
     5e2:	2c df       	rcall	.-424    	; 0x43c <gb_flash_read_byte>
     5e4:	9d e0       	ldi	r25, 0x0D	; 13
     5e6:	9a 95       	dec	r25
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <gb_flash_write_byte_bank1_commands+0x80>
     5ea:	00 00       	nop
     5ec:	f7 cf       	rjmp	.-18     	; 0x5dc <gb_flash_write_byte_bank1_commands+0x76>
		_delay_us(5);
	}
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	08 95       	ret

000005fa <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     5fe:	8c 01       	movw	r16, r24
     600:	22 27       	eor	r18, r18
     602:	33 27       	eor	r19, r19
     604:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     606:	07 2f       	mov	r16, r23
     608:	18 2f       	mov	r17, r24
     60a:	29 2f       	mov	r18, r25
     60c:	33 27       	eor	r19, r19
     60e:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     610:	68 bb       	out	0x18, r22	; 24
	
	cs_mreqPin_low;
     612:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
     614:	5b bb       	out	0x1b, r21	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
     616:	48 bb       	out	0x18, r20	; 24
	
	wrPin_low;
     618:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     61a:	00 00       	nop
	asm volatile("nop");
     61c:	00 00       	nop
	asm volatile("nop");
     61e:	00 00       	nop
	wrPin_high;
     620:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     622:	94 9a       	sbi	0x12, 4	; 18
}
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <gba_flash_write_cycle_start_swapped>:

// Send the first 3 write cycles to the flash (swapped D0/D1)
void gba_flash_write_cycle_start_swapped(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     62e:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     630:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xA9
	GBA_PORT_ROM_ADDR23_16 = 0;
     632:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     634:	95 e0       	ldi	r25, 0x05	; 5
     636:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     638:	85 e5       	ldi	r24, 0x55	; 85
     63a:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     63c:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     63e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA9;
     640:	29 ea       	ldi	r18, 0xA9	; 169
     642:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     644:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     646:	00 00       	nop
	asm volatile("nop");
     648:	00 00       	nop
	asm volatile("nop");
     64a:	00 00       	nop
	wrPin_high;
     64c:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     64e:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x56
	GBA_PORT_ROM_ADDR23_16 = 0;
     650:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     652:	22 e0       	ldi	r18, 0x02	; 2
     654:	2b bb       	out	0x1b, r18	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     656:	2a ea       	ldi	r18, 0xAA	; 170
     658:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     65a:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     65c:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x56;
     65e:	26 e5       	ldi	r18, 0x56	; 86
     660:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     662:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     664:	00 00       	nop
	asm volatile("nop");
     666:	00 00       	nop
	asm volatile("nop");
     668:	00 00       	nop
	wrPin_high;
     66a:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     66c:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     66e:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     670:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     672:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     674:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     676:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     678:	80 ea       	ldi	r24, 0xA0	; 160
     67a:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     67c:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     67e:	00 00       	nop
	asm volatile("nop");
     680:	00 00       	nop
	asm volatile("nop");
     682:	00 00       	nop
	wrPin_high;
     684:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     686:	94 9a       	sbi	0x12, 4	; 18
     688:	08 95       	ret

0000068a <gba_flash_write_cycle_start>:


// Send the first 3 write cycles to the flash
void gba_flash_write_cycle_start(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     68e:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     690:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xAA
	GBA_PORT_ROM_ADDR23_16 = 0;
     692:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     694:	95 e0       	ldi	r25, 0x05	; 5
     696:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     698:	85 e5       	ldi	r24, 0x55	; 85
     69a:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     69c:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     69e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xAA;
     6a0:	2a ea       	ldi	r18, 0xAA	; 170
     6a2:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     6a4:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6a6:	00 00       	nop
	asm volatile("nop");
     6a8:	00 00       	nop
	asm volatile("nop");
     6aa:	00 00       	nop
	wrPin_high;
     6ac:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6ae:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x55
	GBA_PORT_ROM_ADDR23_16 = 0;
     6b0:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     6b2:	32 e0       	ldi	r19, 0x02	; 2
     6b4:	3b bb       	out	0x1b, r19	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     6b6:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     6b8:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6ba:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x55;
     6bc:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     6be:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6c0:	00 00       	nop
	asm volatile("nop");
     6c2:	00 00       	nop
	asm volatile("nop");
     6c4:	00 00       	nop
	wrPin_high;
     6c6:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6c8:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     6ca:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     6cc:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     6ce:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     6d0:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6d2:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     6d4:	80 ea       	ldi	r24, 0xA0	; 160
     6d6:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     6d8:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6da:	00 00       	nop
	asm volatile("nop");
     6dc:	00 00       	nop
	asm volatile("nop");
     6de:	00 00       	nop
	wrPin_high;
     6e0:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6e2:	94 9a       	sbi	0x12, 4	; 18
     6e4:	08 95       	ret

000006e6 <gba_flash_write_byte>:
}	


// Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify the correct data has been written.
// Address is divided by 2 as we are in GBA mode. 
void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	6b 01       	movw	r12, r22
     6f4:	7c 01       	movw	r14, r24
     6f6:	ea 01       	movw	r28, r20
	if (isD0D1Swapped == 0) {
     6f8:	21 11       	cpse	r18, r1
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <gba_flash_write_byte+0x1a>
		gba_flash_write_cycle_start();
     6fc:	c6 df       	rcall	.-116    	; 0x68a <gba_flash_write_cycle_start>
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <gba_flash_write_byte+0x1c>
	}
	else {
		gba_flash_write_cycle_start_swapped();
     700:	94 df       	rcall	.-216    	; 0x62a <gba_flash_write_cycle_start_swapped>
	}
	gba_flash_write_bus_cycle(address, data);
     702:	ae 01       	movw	r20, r28
     704:	c7 01       	movw	r24, r14
     706:	b6 01       	movw	r22, r12
     708:	78 df       	rcall	.-272    	; 0x5fa <gba_flash_write_bus_cycle>
     70a:	25 e0       	ldi	r18, 0x05	; 5
     70c:	2a 95       	dec	r18
     70e:	f1 f7       	brne	.-4      	; 0x70c <gba_flash_write_byte+0x26>
     710:	00 00       	nop
	_delay_us(2); // Wait byte program time
	
	// Verify data
	uint16_t dataVerify = gba_read_16bit_data(address);
     712:	c7 01       	movw	r24, r14
     714:	b6 01       	movw	r22, r12
     716:	0b dd       	rcall	.-1514   	; 0x12e <gba_read_16bit_data>
	while (data != dataVerify) {
     718:	8c 17       	cp	r24, r28
     71a:	9d 07       	cpc	r25, r29
     71c:	41 f0       	breq	.+16     	; 0x72e <gba_flash_write_byte+0x48>
		dataVerify = gba_read_16bit_data(address);
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	05 dd       	rcall	.-1526   	; 0x12e <gba_read_16bit_data>
     724:	25 e0       	ldi	r18, 0x05	; 5
     726:	2a 95       	dec	r18
     728:	f1 f7       	brne	.-4      	; 0x726 <gba_flash_write_byte+0x40>
     72a:	00 00       	nop
     72c:	f5 cf       	rjmp	.-22     	; 0x718 <gba_flash_write_byte+0x32>
		_delay_us(2);
	}
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
     73c:	84 b7       	in	r24, 0x34	; 52
     73e:	87 7f       	andi	r24, 0xF7	; 247
     740:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
     742:	88 e1       	ldi	r24, 0x18	; 24
     744:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
     746:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
     748:	a5 dc       	rcall	.-1718   	; 0x94 <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V);
     74a:	81 b3       	in	r24, 0x11	; 17
     74c:	88 6f       	ori	r24, 0xF8	; 248
     74e:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
     750:	86 b1       	in	r24, 0x06	; 6
     752:	85 60       	ori	r24, 0x05	; 5
     754:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
     756:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     758:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
     75a:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
     75c:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
     75e:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
     760:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (PIND & (1<<SWITCH_DETECT)) {
     762:	82 9b       	sbis	0x10, 2	; 16
     764:	0e c0       	rjmp	.+28     	; 0x782 <setup+0x46>
		PORTD |= (1<<LED_5V);
     766:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
     768:	38 98       	cbi	0x07, 0	; 7
		
		// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
		cs2Pin_low;
     76a:	3a 98       	cbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76c:	2f e7       	ldi	r18, 0x7F	; 127
     76e:	88 e3       	ldi	r24, 0x38	; 56
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	21 50       	subi	r18, 0x01	; 1
     774:	80 40       	sbci	r24, 0x00	; 0
     776:	90 40       	sbci	r25, 0x00	; 0
     778:	e1 f7       	brne	.-8      	; 0x772 <setup+0x36>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <setup+0x40>
     77c:	00 00       	nop
		_delay_ms(50);
		cs2Pin_high;
     77e:	3a 9a       	sbi	0x07, 2	; 7
     780:	02 c0       	rjmp	.+4      	; 0x786 <setup+0x4a>
	}
	else {
		PORTE |= (1<<LED_3V);
     782:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
     784:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
     786:	93 9a       	sbi	0x12, 3	; 18
     788:	2f ef       	ldi	r18, 0xFF	; 255
     78a:	84 e3       	ldi	r24, 0x34	; 52
     78c:	9c e0       	ldi	r25, 0x0C	; 12
     78e:	21 50       	subi	r18, 0x01	; 1
     790:	80 40       	sbci	r24, 0x00	; 0
     792:	90 40       	sbci	r25, 0x00	; 0
     794:	e1 f7       	brne	.-8      	; 0x78e <setup+0x52>
     796:	00 c0       	rjmp	.+0      	; 0x798 <setup+0x5c>
     798:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
     79a:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
     79c:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
     79e:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
     7a0:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
     7a2:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
     7a4:	78 94       	sei
     7a6:	08 95       	ret

000007a8 <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
     7a8:	c9 df       	rcall	.-110    	; 0x73c <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
     7aa:	22 24       	eor	r2, r2
     7ac:	23 94       	inc	r2

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     7ae:	d1 e0       	ldi	r29, 0x01	; 1


int main(void) {
	setup();
	
	uint32_t address = 0;
     7b0:	c1 2c       	mov	r12, r1
     7b2:	d1 2c       	mov	r13, r1
     7b4:	76 01       	movw	r14, r12
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     7b6:	81 e3       	ldi	r24, 0x31	; 49
     7b8:	38 2e       	mov	r3, r24
			usart_read_bytes(64);
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     7ba:	cf ef       	ldi	r28, 0xFF	; 255
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
     7bc:	21 e0       	ldi	r18, 0x01	; 1
     7be:	22 12       	cpse	r2, r18
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <main+0x1c>
			rd_wr_csmreq_cs2_reset();
     7c2:	68 dc       	rcall	.-1840   	; 0x94 <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     7c4:	3f dc       	rcall	.-1922   	; 0x44 <USART_Receive>
     7c6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
     7ca:	82 9b       	sbis	0x10, 2	; 16
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <main+0x2e>
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
     7ce:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
     7d0:	38 98       	cbi	0x07, 0	; 7
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
			cartMode = GB_MODE;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <main+0x34>
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
			PORTE |= (1<<LED_3V);
     7d6:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
     7d8:	97 98       	cbi	0x12, 7	; 18
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
     7da:	82 e0       	ldi	r24, 0x02	; 2
			PORTE |= (1<<LED_3V);
			PORTD &= ~(1<<LED_5V);
		}
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     7dc:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <receivedChar>
     7e0:	93 34       	cpi	r25, 0x43	; 67
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x3e>
     7e4:	a6 c5       	rjmp	.+2892   	; 0x1332 <main+0xb8a>
			USART_Transmit(cartMode);
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     7e6:	97 34       	cpi	r25, 0x47	; 71
     7e8:	11 f4       	brne	.+4      	; 0x7ee <main+0x46>
			gb_mode();
     7ea:	59 dc       	rcall	.-1870   	; 0x9e <gb_mode>
     7ec:	e7 cf       	rjmp	.-50     	; 0x7bc <main+0x14>
		}
		else if (receivedChar == GBA_CART_MODE) {
     7ee:	97 36       	cpi	r25, 0x67	; 103
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <main+0x4c>
     7f2:	e6 c0       	rjmp	.+460    	; 0x9c0 <main+0x218>
			gba_mode();
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     7f4:	91 34       	cpi	r25, 0x41	; 65
     7f6:	59 f4       	brne	.+22     	; 0x80e <main+0x66>
			usart_read_chars(); // Read start address
     7f8:	42 dc       	rcall	.-1916   	; 0x7e <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     7fa:	40 e1       	ldi	r20, 0x10	; 16
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	80 e7       	ldi	r24, 0x70	; 112
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	b4 d5       	rcall	.+2920   	; 0x1370 <strtol>
     808:	6b 01       	movw	r12, r22
     80a:	7c 01       	movw	r14, r24
     80c:	d7 cf       	rjmp	.-82     	; 0x7bc <main+0x14>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     80e:	92 35       	cpi	r25, 0x52	; 82
     810:	f1 f4       	brne	.+60     	; 0x84e <main+0xa6>
			gb_mode();
     812:	45 dc       	rcall	.-1910   	; 0x9e <gb_mode>
			receivedChar = '1';
     814:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
			while (receivedChar == '1') {
     818:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     81c:	81 33       	cpi	r24, 0x31	; 49
     81e:	71 f6       	brne	.-100    	; 0x7bc <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     820:	93 9a       	sbi	0x12, 3	; 18
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     826:	c8 01       	movw	r24, r16
     828:	8c 0d       	add	r24, r12
     82a:	9d 1d       	adc	r25, r13
     82c:	43 dc       	rcall	.-1914   	; 0xb4 <read_8bit_data>
     82e:	0e dc       	rcall	.-2020   	; 0x4c <USART_Transmit>
     830:	0f 5f       	subi	r16, 0xFF	; 255
     832:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     834:	00 34       	cpi	r16, 0x40	; 64
     836:	11 05       	cpc	r17, r1
     838:	b1 f7       	brne	.-20     	; 0x826 <main+0x7e>
     83a:	80 e4       	ldi	r24, 0x40	; 64
     83c:	c8 0e       	add	r12, r24
     83e:	d1 1c       	adc	r13, r1
     840:	e1 1c       	adc	r14, r1
     842:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     844:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     846:	fe db       	rcall	.-2052   	; 0x44 <USART_Receive>
     848:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     84c:	e5 cf       	rjmp	.-54     	; 0x818 <main+0x70>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     84e:	97 35       	cpi	r25, 0x57	; 87
     850:	f1 f4       	brne	.+60     	; 0x88e <main+0xe6>
			gb_mode();
     852:	25 dc       	rcall	.-1974   	; 0x9e <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     854:	80 e4       	ldi	r24, 0x40	; 64
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	fd db       	rcall	.-2054   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     85a:	93 9a       	sbi	0x12, 3	; 18
     85c:	00 e7       	ldi	r16, 0x70	; 112
     85e:	a0 2e       	mov	r10, r16
     860:	00 e0       	ldi	r16, 0x00	; 0
     862:	b0 2e       	mov	r11, r16
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     868:	f5 01       	movw	r30, r10
     86a:	61 91       	ld	r22, Z+
     86c:	5f 01       	movw	r10, r30
     86e:	c8 01       	movw	r24, r16
     870:	8c 0d       	add	r24, r12
     872:	9d 1d       	adc	r25, r13
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	27 dc       	rcall	.-1970   	; 0xc6 <write_8bit_data>
     878:	0f 5f       	subi	r16, 0xFF	; 255
     87a:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     87c:	00 34       	cpi	r16, 0x40	; 64
     87e:	11 05       	cpc	r17, r1
     880:	99 f7       	brne	.-26     	; 0x868 <main+0xc0>
     882:	f0 e4       	ldi	r31, 0x40	; 64
     884:	cf 0e       	add	r12, r31
     886:	d1 1c       	adc	r13, r1
     888:	e1 1c       	adc	r14, r1
     88a:	f1 1c       	adc	r15, r1
     88c:	57 c3       	rjmp	.+1710   	; 0xf3c <main+0x794>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     88e:	92 34       	cpi	r25, 0x42	; 66
     890:	e1 f4       	brne	.+56     	; 0x8ca <main+0x122>
			gb_mode();
     892:	05 dc       	rcall	.-2038   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read start address
     894:	f4 db       	rcall	.-2072   	; 0x7e <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     896:	40 e1       	ldi	r20, 0x10	; 16
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	80 e7       	ldi	r24, 0x70	; 112
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	66 d5       	rcall	.+2764   	; 0x1370 <strtol>
     8a4:	4b 01       	movw	r8, r22
     8a6:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
     8a8:	cd db       	rcall	.-2150   	; 0x44 <USART_Receive>
     8aa:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
			if (receivedChar == 'B') {
     8ae:	82 34       	cpi	r24, 0x42	; 66
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <main+0x10c>
     8b2:	84 cf       	rjmp	.-248    	; 0x7bc <main+0x14>
				usart_read_chars(); // Read data
     8b4:	e4 db       	rcall	.-2104   	; 0x7e <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     8b6:	80 e7       	ldi	r24, 0x70	; 112
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	6b d6       	rcall	.+3286   	; 0x1592 <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
     8bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	68 2f       	mov	r22, r24
     8c4:	c4 01       	movw	r24, r8
     8c6:	ff db       	rcall	.-2050   	; 0xc6 <write_8bit_data>
     8c8:	79 cf       	rjmp	.-270    	; 0x7bc <main+0x14>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     8ca:	92 37       	cpi	r25, 0x72	; 114
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <main+0x12a>
     8ce:	9a 36       	cpi	r25, 0x6A	; 106
     8d0:	b1 f5       	brne	.+108    	; 0x93e <main+0x196>
			gba_mode();
     8d2:	0f dc       	rcall	.-2018   	; 0xf2 <gba_mode>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     8d4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     8d8:	8a 36       	cpi	r24, 0x6A	; 106
     8da:	11 f4       	brne	.+4      	; 0x8e0 <main+0x138>
				readEnd = 128;
     8dc:	10 e8       	ldi	r17, 0x80	; 128
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <main+0x13a>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
     8e0:	10 e2       	ldi	r17, 0x20	; 32
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     8e2:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
     8e6:	88 24       	eor	r8, r8
     8e8:	8a 94       	dec	r8
     8ea:	81 0e       	add	r8, r17
     8ec:	91 2c       	mov	r9, r1
     8ee:	a1 2c       	mov	r10, r1
     8f0:	b1 2c       	mov	r11, r1
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	82 1a       	sub	r8, r18
     8f6:	92 0a       	sbc	r9, r18
     8f8:	a2 0a       	sbc	r10, r18
     8fa:	b2 0a       	sbc	r11, r18
			while (receivedChar == '1') {
     8fc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     900:	81 33       	cpi	r24, 0x31	; 49
     902:	09 f0       	breq	.+2      	; 0x906 <main+0x15e>
     904:	5b cf       	rjmp	.-330    	; 0x7bc <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     906:	93 9a       	sbi	0x12, 3	; 18
     908:	26 01       	movw	r4, r12
     90a:	37 01       	movw	r6, r14
				
				for (uint8_t x = 0; x < readEnd; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
     90c:	c3 01       	movw	r24, r6
     90e:	b2 01       	movw	r22, r4
     910:	0e dc       	rcall	.-2020   	; 0x12e <gba_read_16bit_data>
     912:	09 2f       	mov	r16, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     914:	9b db       	rcall	.-2250   	; 0x4c <USART_Transmit>
					USART_Transmit(dataRead >> 8);
     916:	80 2f       	mov	r24, r16
     918:	99 db       	rcall	.-2254   	; 0x4c <USART_Transmit>
					
					address++;
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	48 1a       	sub	r4, r24
     91e:	58 0a       	sbc	r5, r24
     920:	68 0a       	sbc	r6, r24
     922:	78 0a       	sbc	r7, r24
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     924:	84 2d       	mov	r24, r4
     926:	8c 19       	sub	r24, r12
     928:	81 17       	cp	r24, r17
     92a:	80 f3       	brcs	.-32     	; 0x90c <main+0x164>
     92c:	c8 0c       	add	r12, r8
     92e:	d9 1c       	adc	r13, r9
     930:	ea 1c       	adc	r14, r10
     932:	fb 1c       	adc	r15, r11
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     934:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     936:	86 db       	rcall	.-2292   	; 0x44 <USART_Receive>
     938:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     93c:	df cf       	rjmp	.-66     	; 0x8fc <main+0x154>
			}
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     93e:	9d 36       	cpi	r25, 0x6D	; 109
     940:	f1 f4       	brne	.+60     	; 0x97e <main+0x1d6>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     942:	ad db       	rcall	.-2214   	; 0x9e <gb_mode>
			
			receivedChar = '1';
     944:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
			while (receivedChar == '1') {
     948:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     94c:	81 33       	cpi	r24, 0x31	; 49
     94e:	c1 f5       	brne	.+112    	; 0x9c0 <main+0x218>
				PORTD |= (1<<ACTIVITY_LED);
     950:	93 9a       	sbi	0x12, 3	; 18
     952:	00 e0       	ldi	r16, 0x00	; 0
     954:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     956:	c8 01       	movw	r24, r16
     958:	8c 0d       	add	r24, r12
     95a:	9d 1d       	adc	r25, r13
     95c:	f7 db       	rcall	.-2066   	; 0x14c <gba_read_ram_8bit_data>
     95e:	76 db       	rcall	.-2324   	; 0x4c <USART_Transmit>
     960:	0f 5f       	subi	r16, 0xFF	; 255
     962:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     964:	00 34       	cpi	r16, 0x40	; 64
     966:	11 05       	cpc	r17, r1
     968:	b1 f7       	brne	.-20     	; 0x956 <main+0x1ae>
     96a:	90 e4       	ldi	r25, 0x40	; 64
     96c:	c9 0e       	add	r12, r25
     96e:	d1 1c       	adc	r13, r1
     970:	e1 1c       	adc	r14, r1
     972:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     974:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     976:	66 db       	rcall	.-2356   	; 0x44 <USART_Receive>
     978:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     97c:	e5 cf       	rjmp	.-54     	; 0x948 <main+0x1a0>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     97e:	97 37       	cpi	r25, 0x77	; 119
     980:	09 f5       	brne	.+66     	; 0x9c4 <main+0x21c>
			gb_mode();
     982:	8d db       	rcall	.-2278   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     984:	80 e4       	ldi	r24, 0x40	; 64
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	65 db       	rcall	.-2358   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     98a:	93 9a       	sbi	0x12, 3	; 18
     98c:	10 e7       	ldi	r17, 0x70	; 112
     98e:	a1 2e       	mov	r10, r17
     990:	10 e0       	ldi	r17, 0x00	; 0
     992:	b1 2e       	mov	r11, r17
     994:	00 e0       	ldi	r16, 0x00	; 0
     996:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     998:	f5 01       	movw	r30, r10
     99a:	61 91       	ld	r22, Z+
     99c:	5f 01       	movw	r10, r30
     99e:	c8 01       	movw	r24, r16
     9a0:	8c 0d       	add	r24, r12
     9a2:	9d 1d       	adc	r25, r13
     9a4:	dc db       	rcall	.-2120   	; 0x15e <gba_write_ram_8bit_data>
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     9aa:	00 34       	cpi	r16, 0x40	; 64
     9ac:	11 05       	cpc	r17, r1
     9ae:	a1 f7       	brne	.-24     	; 0x998 <main+0x1f0>
     9b0:	f0 e4       	ldi	r31, 0x40	; 64
     9b2:	cf 0e       	add	r12, r31
     9b4:	d1 1c       	adc	r13, r1
     9b6:	e1 1c       	adc	r14, r1
     9b8:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     9ba:	81 e3       	ldi	r24, 0x31	; 49
     9bc:	47 db       	rcall	.-2418   	; 0x4c <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
     9be:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
     9c0:	98 db       	rcall	.-2256   	; 0xf2 <gba_mode>
     9c2:	fc ce       	rjmp	.-520    	; 0x7bc <main+0x14>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     9c4:	9f 36       	cpi	r25, 0x6F	; 111
     9c6:	31 f4       	brne	.+12     	; 0x9d4 <main+0x22c>
			gb_mode();
     9c8:	6a db       	rcall	.-2348   	; 0x9e <gb_mode>
			
			uint8_t data = USART_Receive();
     9ca:	3c db       	rcall	.-2440   	; 0x44 <USART_Receive>
			gba_write_ram_8bit_data(address, data);
     9cc:	68 2f       	mov	r22, r24
     9ce:	c6 01       	movw	r24, r12
     9d0:	c6 db       	rcall	.-2164   	; 0x15e <gba_write_ram_8bit_data>
     9d2:	23 c0       	rjmp	.+70     	; 0xa1a <main+0x272>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     9d4:	99 36       	cpi	r25, 0x69	; 105
     9d6:	49 f4       	brne	.+18     	; 0x9ea <main+0x242>
			gb_mode();
     9d8:	62 db       	rcall	.-2364   	; 0x9e <gb_mode>
			
			flash_read_chip_id();
     9da:	72 dc       	rcall	.-1820   	; 0x2c0 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
     9dc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <flashChipIdBuffer>
     9e0:	35 db       	rcall	.-2454   	; 0x4c <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
     9e2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <flashChipIdBuffer+0x1>
     9e6:	32 db       	rcall	.-2460   	; 0x4c <USART_Transmit>
     9e8:	eb cf       	rjmp	.-42     	; 0x9c0 <main+0x218>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     9ea:	9b 36       	cpi	r25, 0x6B	; 107
     9ec:	49 f4       	brne	.+18     	; 0xa00 <main+0x258>
			usart_read_chars(); // Read data
     9ee:	47 db       	rcall	.-2418   	; 0x7e <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     9f0:	80 e7       	ldi	r24, 0x70	; 112
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	ce d5       	rcall	.+2972   	; 0x1592 <atoi>
     9f6:	18 2f       	mov	r17, r24
			
			gb_mode();
     9f8:	52 db       	rcall	.-2396   	; 0x9e <gb_mode>
			flash_switch_bank(bank);
     9fa:	81 2f       	mov	r24, r17
     9fc:	96 dc       	rcall	.-1748   	; 0x32a <flash_switch_bank>
     9fe:	e0 cf       	rjmp	.-64     	; 0x9c0 <main+0x218>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     a00:	93 37       	cpi	r25, 0x73	; 115
     a02:	69 f4       	brne	.+26     	; 0xa1e <main+0x276>
			gb_mode();
     a04:	4c db       	rcall	.-2408   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read sector
     a06:	3b db       	rcall	.-2442   	; 0x7e <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     a08:	40 e1       	ldi	r20, 0x10	; 16
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e7       	ldi	r24, 0x70	; 112
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	ad d4       	rcall	.+2394   	; 0x1370 <strtol>
     a16:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
     a18:	9b dc       	rcall	.-1738   	; 0x350 <flash_erase_4k_sector>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     a1a:	81 e3       	ldi	r24, 0x31	; 49
     a1c:	e4 cf       	rjmp	.-56     	; 0x9e6 <main+0x23e>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     a1e:	92 36       	cpi	r25, 0x62	; 98
     a20:	c1 f4       	brne	.+48     	; 0xa52 <main+0x2aa>
			gb_mode();
     a22:	3d db       	rcall	.-2438   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     a24:	80 e4       	ldi	r24, 0x40	; 64
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	15 db       	rcall	.-2518   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     a2a:	93 9a       	sbi	0x12, 3	; 18
     a2c:	b0 e7       	ldi	r27, 0x70	; 112
     a2e:	ab 2e       	mov	r10, r27
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	bb 2e       	mov	r11, r27
     a34:	00 e0       	ldi	r16, 0x00	; 0
     a36:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     a38:	f5 01       	movw	r30, r10
     a3a:	61 91       	ld	r22, Z+
     a3c:	5f 01       	movw	r10, r30
     a3e:	c8 01       	movw	r24, r16
     a40:	8c 0d       	add	r24, r12
     a42:	9d 1d       	adc	r25, r13
     a44:	a9 dc       	rcall	.-1710   	; 0x398 <flash_write_byte>
     a46:	0f 5f       	subi	r16, 0xFF	; 255
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     a4a:	00 34       	cpi	r16, 0x40	; 64
     a4c:	11 05       	cpc	r17, r1
     a4e:	a1 f7       	brne	.-24     	; 0xa38 <main+0x290>
     a50:	af cf       	rjmp	.-162    	; 0x9b0 <main+0x208>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     a52:	91 36       	cpi	r25, 0x61	; 97
     a54:	69 f4       	brne	.+26     	; 0xa70 <main+0x2c8>
			gb_mode();
     a56:	23 db       	rcall	.-2490   	; 0x9e <gb_mode>
			
			usart_read_bytes(128);
     a58:	80 e8       	ldi	r24, 0x80	; 128
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	fb da       	rcall	.-2570   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     a5e:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
     a60:	c6 01       	movw	r24, r12
     a62:	b6 dc       	rcall	.-1684   	; 0x3d0 <flash_write_sector>
			address++;
     a64:	2f ef       	ldi	r18, 0xFF	; 255
     a66:	c2 1a       	sub	r12, r18
     a68:	d2 0a       	sbc	r13, r18
     a6a:	e2 0a       	sbc	r14, r18
     a6c:	f2 0a       	sbc	r15, r18
     a6e:	a5 cf       	rjmp	.-182    	; 0x9ba <main+0x212>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     a70:	93 35       	cpi	r25, 0x53	; 83
     a72:	51 f4       	brne	.+20     	; 0xa88 <main+0x2e0>
			usart_read_chars(); // Read size
     a74:	04 db       	rcall	.-2552   	; 0x7e <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     a76:	40 e1       	ldi	r20, 0x10	; 16
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e7       	ldi	r24, 0x70	; 112
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	76 d4       	rcall	.+2284   	; 0x1370 <strtol>
     a84:	d6 2f       	mov	r29, r22
     a86:	9a ce       	rjmp	.-716    	; 0x7bc <main+0x14>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     a88:	95 36       	cpi	r25, 0x65	; 101
     a8a:	09 f5       	brne	.+66     	; 0xace <main+0x326>
			gba_eeprom_mode();
     a8c:	78 db       	rcall	.-2320   	; 0x17e <gba_eeprom_mode>
			
			receivedChar = '1';
     a8e:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
			while (receivedChar == '1') {
     a92:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     a96:	81 33       	cpi	r24, 0x31	; 49
     a98:	09 f0       	breq	.+2      	; 0xa9c <main+0x2f4>
     a9a:	92 cf       	rjmp	.-220    	; 0x9c0 <main+0x218>
				PORTD |= (1<<ACTIVITY_LED);
     a9c:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
     a9e:	6d 2f       	mov	r22, r29
     aa0:	c6 01       	movw	r24, r12
     aa2:	aa db       	rcall	.-2220   	; 0x1f8 <gba_eeprom_read>
     aa4:	01 e7       	ldi	r16, 0x71	; 113
     aa6:	11 e0       	ldi	r17, 0x01	; 1
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     aa8:	f8 01       	movw	r30, r16
     aaa:	81 91       	ld	r24, Z+
     aac:	8f 01       	movw	r16, r30
     aae:	ce da       	rcall	.-2660   	; 0x4c <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     ab0:	89 e7       	ldi	r24, 0x79	; 121
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	80 17       	cp	r24, r16
     ab6:	91 07       	cpc	r25, r17
     ab8:	b9 f7       	brne	.-18     	; 0xaa8 <main+0x300>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     aba:	9f ef       	ldi	r25, 0xFF	; 255
     abc:	c9 1a       	sub	r12, r25
     abe:	d9 0a       	sbc	r13, r25
     ac0:	e9 0a       	sbc	r14, r25
     ac2:	f9 0a       	sbc	r15, r25
				
				PORTD &= ~(1<<ACTIVITY_LED);
     ac4:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     ac6:	be da       	rcall	.-2692   	; 0x44 <USART_Receive>
     ac8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     acc:	e2 cf       	rjmp	.-60     	; 0xa92 <main+0x2ea>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     ace:	90 37       	cpi	r25, 0x70	; 112
     ad0:	e1 f4       	brne	.+56     	; 0xb0a <main+0x362>
			gba_eeprom_mode();
     ad2:	55 db       	rcall	.-2390   	; 0x17e <gba_eeprom_mode>
     ad4:	01 e7       	ldi	r16, 0x71	; 113
     ad6:	11 e0       	ldi	r17, 0x01	; 1
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     ad8:	b5 da       	rcall	.-2710   	; 0x44 <USART_Receive>
     ada:	f8 01       	movw	r30, r16
     adc:	81 93       	st	Z+, r24
     ade:	8f 01       	movw	r16, r30
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     ae0:	89 e7       	ldi	r24, 0x79	; 121
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	8e 17       	cp	r24, r30
     ae6:	9f 07       	cpc	r25, r31
     ae8:	b9 f7       	brne	.-18     	; 0xad8 <main+0x330>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
     aea:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
     aec:	6d 2f       	mov	r22, r29
     aee:	c6 01       	movw	r24, r12
     af0:	b0 db       	rcall	.-2208   	; 0x252 <gba_eeprom_write>
			address++;
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	c9 1a       	sub	r12, r25
     af6:	d9 0a       	sbc	r13, r25
     af8:	e9 0a       	sbc	r14, r25
     afa:	f9 0a       	sbc	r15, r25
     afc:	ef e7       	ldi	r30, 0x7F	; 127
     afe:	fe e3       	ldi	r31, 0x3E	; 62
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <main+0x358>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <main+0x35e>
     b06:	00 00       	nop
     b08:	58 cf       	rjmp	.-336    	; 0x9ba <main+0x212>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     b0a:	90 35       	cpi	r25, 0x50	; 80
     b0c:	49 f4       	brne	.+18     	; 0xb20 <main+0x378>
			flashWriteWePin = USART_Receive();
     b0e:	9a da       	rcall	.-2764   	; 0x44 <USART_Receive>
     b10:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     b14:	81 34       	cpi	r24, 0x41	; 65
     b16:	09 f0       	breq	.+2      	; 0xb1a <main+0x372>
     b18:	51 ce       	rjmp	.-862    	; 0x7bc <main+0x14>
				DDRE |= (1<<AUDIO_PIN);
     b1a:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
     b1c:	39 9a       	sbi	0x07, 1	; 7
     b1e:	4e ce       	rjmp	.-868    	; 0x7bc <main+0x14>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
     b20:	9e 34       	cpi	r25, 0x4E	; 78
     b22:	21 f4       	brne	.+8      	; 0xb2c <main+0x384>
			flashBank1CommandWrites = 1;
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	f0 93 61 00 	sts	0x0061, r31	; 0x800061 <flashBank1CommandWrites>
     b2a:	48 ce       	rjmp	.-880    	; 0x7bc <main+0x14>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     b2c:	95 34       	cpi	r25, 0x45	; 69
     b2e:	19 f5       	brne	.+70     	; 0xb76 <main+0x3ce>
     b30:	02 e6       	ldi	r16, 0x62	; 98
     b32:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     b34:	a4 da       	rcall	.-2744   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     b36:	40 e1       	ldi	r20, 0x10	; 16
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e7       	ldi	r24, 0x70	; 112
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	16 d4       	rcall	.+2092   	; 0x1370 <strtol>
     b44:	f8 01       	movw	r30, r16
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	60 83       	st	Z, r22
				USART_Transmit(SEND_ACK);
     b4a:	81 e3       	ldi	r24, 0x31	; 49
     b4c:	7f da       	rcall	.-2818   	; 0x4c <USART_Transmit>
				
				usart_read_chars(); // Data
     b4e:	97 da       	rcall	.-2770   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     b50:	40 e1       	ldi	r20, 0x10	; 16
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e7       	ldi	r24, 0x70	; 112
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	09 d4       	rcall	.+2066   	; 0x1370 <strtol>
     b5e:	f8 01       	movw	r30, r16
     b60:	73 83       	std	Z+3, r23	; 0x03
     b62:	62 83       	std	Z+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
     b64:	81 e3       	ldi	r24, 0x31	; 49
     b66:	72 da       	rcall	.-2844   	; 0x4c <USART_Transmit>
     b68:	0c 5f       	subi	r16, 0xFC	; 252
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	0e 36       	cpi	r16, 0x6E	; 110
     b70:	1f 07       	cpc	r17, r31
     b72:	01 f7       	brne	.-64     	; 0xb34 <main+0x38c>
     b74:	23 ce       	rjmp	.-954    	; 0x7bc <main+0x14>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     b76:	96 34       	cpi	r25, 0x46	; 70
     b78:	b1 f4       	brne	.+44     	; 0xba6 <main+0x3fe>
			usart_read_chars(); // Read address
     b7a:	81 da       	rcall	.-2814   	; 0x7e <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     b7c:	40 e1       	ldi	r20, 0x10	; 16
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	80 e7       	ldi	r24, 0x70	; 112
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	f3 d3       	rcall	.+2022   	; 0x1370 <strtol>
     b8a:	4b 01       	movw	r8, r22
     b8c:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
     b8e:	77 da       	rcall	.-2834   	; 0x7e <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     b90:	40 e1       	ldi	r20, 0x10	; 16
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e7       	ldi	r24, 0x70	; 112
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	e9 d3       	rcall	.+2002   	; 0x1370 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     b9e:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     ba0:	c4 01       	movw	r24, r8
     ba2:	55 dc       	rcall	.-1878   	; 0x44e <gb_flash_write_bus_cycle>
     ba4:	cb c1       	rjmp	.+918    	; 0xf3c <main+0x794>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     ba6:	94 35       	cpi	r25, 0x54	; 84
     ba8:	69 f5       	brne	.+90     	; 0xc04 <main+0x45c>
			usart_read_bytes(64);
     baa:	80 e4       	ldi	r24, 0x40	; 64
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	52 da       	rcall	.-2908   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     bb0:	93 9a       	sbi	0x12, 3	; 18
			if (flashBank1CommandWrites == 0) {
     bb2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flashBank1CommandWrites>
     bb6:	a0 e7       	ldi	r26, 0x70	; 112
     bb8:	aa 2e       	mov	r10, r26
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	ba 2e       	mov	r11, r26
     bbe:	00 e0       	ldi	r16, 0x00	; 0
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	81 11       	cpse	r24, r1
     bc4:	15 c0       	rjmp	.+42     	; 0xbf0 <main+0x448>
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
     bc6:	f5 01       	movw	r30, r10
     bc8:	61 91       	ld	r22, Z+
     bca:	5f 01       	movw	r10, r30
     bcc:	6f 3f       	cpi	r22, 0xFF	; 255
     bce:	21 f0       	breq	.+8      	; 0xbd8 <main+0x430>
						gb_flash_write_byte(address, receivedBuffer[x]);
     bd0:	c8 01       	movw	r24, r16
     bd2:	8c 0d       	add	r24, r12
     bd4:	9d 1d       	adc	r25, r13
     bd6:	54 dc       	rcall	.-1880   	; 0x480 <gb_flash_write_byte>
     bd8:	0f 5f       	subi	r16, 0xFF	; 255
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
     bdc:	00 34       	cpi	r16, 0x40	; 64
     bde:	11 05       	cpc	r17, r1
     be0:	91 f7       	brne	.-28     	; 0xbc6 <main+0x41e>
     be2:	82 c0       	rjmp	.+260    	; 0xce8 <main+0x540>
     be4:	0f 5f       	subi	r16, 0xFF	; 255
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
					}
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
     be8:	00 34       	cpi	r16, 0x40	; 64
     bea:	11 05       	cpc	r17, r1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <main+0x448>
     bee:	7c c0       	rjmp	.+248    	; 0xce8 <main+0x540>
					if (receivedBuffer[x] != 0xFF) {
     bf0:	f5 01       	movw	r30, r10
     bf2:	61 91       	ld	r22, Z+
     bf4:	5f 01       	movw	r10, r30
     bf6:	6f 3f       	cpi	r22, 0xFF	; 255
     bf8:	a9 f3       	breq	.-22     	; 0xbe4 <main+0x43c>
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     bfa:	c8 01       	movw	r24, r16
     bfc:	8c 0d       	add	r24, r12
     bfe:	9d 1d       	adc	r25, r13
     c00:	b2 dc       	rcall	.-1692   	; 0x566 <gb_flash_write_byte_bank1_commands>
     c02:	f0 cf       	rjmp	.-32     	; 0xbe4 <main+0x43c>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
     c04:	99 35       	cpi	r25, 0x59	; 89
     c06:	09 f0       	breq	.+2      	; 0xc0a <main+0x462>
     c08:	55 c0       	rjmp	.+170    	; 0xcb4 <main+0x50c>
			usart_read_bytes(32);
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	22 da       	rcall	.-3004   	; 0x54 <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     c10:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
     c12:	6a ea       	ldi	r22, 0xAA	; 170
     c14:	8a ea       	ldi	r24, 0xAA	; 170
     c16:	9a e0       	ldi	r25, 0x0A	; 10
     c18:	1a dc       	rcall	.-1996   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
     c1a:	65 e5       	ldi	r22, 0x55	; 85
     c1c:	85 e5       	ldi	r24, 0x55	; 85
     c1e:	95 e0       	ldi	r25, 0x05	; 5
     c20:	16 dc       	rcall	.-2004   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
     c22:	56 01       	movw	r10, r12
     c24:	65 e2       	ldi	r22, 0x25	; 37
     c26:	c6 01       	movw	r24, r12
     c28:	12 dc       	rcall	.-2012   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
     c2a:	6f e1       	ldi	r22, 0x1F	; 31
     c2c:	c6 01       	movw	r24, r12
     c2e:	0f dc       	rcall	.-2018   	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c30:	22 e0       	ldi	r18, 0x02	; 2
     c32:	2a 95       	dec	r18
     c34:	f1 f7       	brne	.-4      	; 0xc32 <main+0x48a>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <main+0x490>
     c38:	00 e7       	ldi	r16, 0x70	; 112
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	81 2c       	mov	r8, r1
     c3e:	91 2c       	mov	r9, r1
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     c40:	f8 01       	movw	r30, r16
     c42:	61 91       	ld	r22, Z+
     c44:	8f 01       	movw	r16, r30
     c46:	c4 01       	movw	r24, r8
     c48:	8a 0d       	add	r24, r10
     c4a:	9b 1d       	adc	r25, r11
     c4c:	00 dc       	rcall	.-2048   	; 0x44e <gb_flash_write_bus_cycle>
     c4e:	ff ef       	ldi	r31, 0xFF	; 255
     c50:	8f 1a       	sub	r8, r31
     c52:	9f 0a       	sbc	r9, r31
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
     c54:	20 e2       	ldi	r18, 0x20	; 32
     c56:	82 16       	cp	r8, r18
     c58:	91 04       	cpc	r9, r1
     c5a:	91 f7       	brne	.-28     	; 0xc40 <main+0x498>
     c5c:	80 e2       	ldi	r24, 0x20	; 32
     c5e:	c8 0e       	add	r12, r24
     c60:	d1 1c       	adc	r13, r1
     c62:	e1 1c       	adc	r14, r1
     c64:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
     c66:	c6 01       	movw	r24, r12
     c68:	80 97       	sbiw	r24, 0x20	; 32
     c6a:	69 e2       	ldi	r22, 0x29	; 41
     c6c:	f0 db       	rcall	.-2080   	; 0x44e <gb_flash_write_bus_cycle>
     c6e:	ef e8       	ldi	r30, 0x8F	; 143
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <main+0x4ca>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <main+0x4d0>
     c78:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     c7a:	86 01       	movw	r16, r12
     c7c:	01 50       	subi	r16, 0x01	; 1
     c7e:	11 09       	sbc	r17, r1
     c80:	c8 01       	movw	r24, r16
     c82:	dc db       	rcall	.-2120   	; 0x43c <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
     c84:	f8 ec       	ldi	r31, 0xC8	; 200
     c86:	bf 2e       	mov	r11, r31
     c88:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <receivedBuffer+0x1f>
     c8c:	89 17       	cp	r24, r25
     c8e:	09 f4       	brne	.+2      	; 0xc92 <main+0x4ea>
     c90:	74 c2       	rjmp	.+1256   	; 0x117a <main+0x9d2>
				dataVerify = gb_flash_read_byte(address-1);
     c92:	c8 01       	movw	r24, r16
     c94:	d3 db       	rcall	.-2138   	; 0x43c <gb_flash_read_byte>
     c96:	fd e0       	ldi	r31, 0x0D	; 13
     c98:	fa 95       	dec	r31
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <main+0x4f0>
     c9c:	00 00       	nop
     c9e:	ba 94       	dec	r11
				_delay_us(5);
				verifyCount++;
				
				if (verifyCount >= 200) {
     ca0:	b1 10       	cpse	r11, r1
     ca2:	f2 cf       	rjmp	.-28     	; 0xc88 <main+0x4e0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ca4:	2f ef       	ldi	r18, 0xFF	; 255
     ca6:	84 e3       	ldi	r24, 0x34	; 52
     ca8:	9c e0       	ldi	r25, 0x0C	; 12
     caa:	21 50       	subi	r18, 0x01	; 1
     cac:	80 40       	sbci	r24, 0x00	; 0
     cae:	90 40       	sbci	r25, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <main+0x502>
     cb2:	1f c1       	rjmp	.+574    	; 0xef2 <main+0x74a>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
     cb4:	9a 34       	cpi	r25, 0x4A	; 74
     cb6:	f1 f4       	brne	.+60     	; 0xcf4 <main+0x54c>
			usart_read_bytes(64);
     cb8:	80 e4       	ldi	r24, 0x40	; 64
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	cb d9       	rcall	.-3178   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     cbe:	93 9a       	sbi	0x12, 3	; 18
     cc0:	e0 e7       	ldi	r30, 0x70	; 112
     cc2:	ae 2e       	mov	r10, r30
     cc4:	e0 e0       	ldi	r30, 0x00	; 0
     cc6:	be 2e       	mov	r11, r30
     cc8:	00 e0       	ldi	r16, 0x00	; 0
     cca:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
     ccc:	f5 01       	movw	r30, r10
     cce:	61 91       	ld	r22, Z+
     cd0:	5f 01       	movw	r10, r30
     cd2:	6f 3f       	cpi	r22, 0xFF	; 255
     cd4:	21 f0       	breq	.+8      	; 0xcde <main+0x536>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
     cd6:	c8 01       	movw	r24, r16
     cd8:	8c 0d       	add	r24, r12
     cda:	9d 1d       	adc	r25, r13
     cdc:	03 dc       	rcall	.-2042   	; 0x4e4 <gb_flash_write_byte_special>
     cde:	0f 5f       	subi	r16, 0xFF	; 255
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     ce2:	00 34       	cpi	r16, 0x40	; 64
     ce4:	11 05       	cpc	r17, r1
     ce6:	91 f7       	brne	.-28     	; 0xccc <main+0x524>
     ce8:	f0 e4       	ldi	r31, 0x40	; 64
     cea:	cf 0e       	add	r12, r31
     cec:	d1 1c       	adc	r13, r1
     cee:	e1 1c       	adc	r14, r1
     cf0:	f1 1c       	adc	r15, r1
     cf2:	43 c2       	rjmp	.+1158   	; 0x117a <main+0x9d2>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
     cf4:	98 35       	cpi	r25, 0x58	; 88
     cf6:	09 f0       	breq	.+2      	; 0xcfa <main+0x552>
     cf8:	42 c0       	rjmp	.+132    	; 0xd7e <main+0x5d6>
			usart_read_bytes(256);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	aa d9       	rcall	.-3244   	; 0x54 <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     d00:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
     d02:	69 ea       	ldi	r22, 0xA9	; 169
     d04:	8a ea       	ldi	r24, 0xAA	; 170
     d06:	9a e0       	ldi	r25, 0x0A	; 10
     d08:	a2 db       	rcall	.-2236   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
     d0a:	66 e5       	ldi	r22, 0x56	; 86
     d0c:	85 e5       	ldi	r24, 0x55	; 85
     d0e:	95 e0       	ldi	r25, 0x05	; 5
     d10:	9e db       	rcall	.-2244   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
     d12:	56 01       	movw	r10, r12
     d14:	66 e2       	ldi	r22, 0x26	; 38
     d16:	c6 01       	movw	r24, r12
     d18:	9a db       	rcall	.-2252   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
     d1a:	6f ef       	ldi	r22, 0xFF	; 255
     d1c:	c6 01       	movw	r24, r12
     d1e:	97 db       	rcall	.-2258   	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d20:	25 e8       	ldi	r18, 0x85	; 133
     d22:	2a 95       	dec	r18
     d24:	f1 f7       	brne	.-4      	; 0xd22 <main+0x57a>
     d26:	00 00       	nop
     d28:	00 e7       	ldi	r16, 0x70	; 112
     d2a:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     d2c:	81 2c       	mov	r8, r1
     d2e:	91 2c       	mov	r9, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     d30:	f8 01       	movw	r30, r16
     d32:	61 91       	ld	r22, Z+
     d34:	8f 01       	movw	r16, r30
     d36:	c4 01       	movw	r24, r8
     d38:	8a 0d       	add	r24, r10
     d3a:	9b 1d       	adc	r25, r11
     d3c:	88 db       	rcall	.-2288   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     d3e:	ff ef       	ldi	r31, 0xFF	; 255
     d40:	8f 1a       	sub	r8, r31
     d42:	9f 0a       	sbc	r9, r31
     d44:	81 14       	cp	r8, r1
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	92 06       	cpc	r9, r18
     d4a:	91 f7       	brne	.-28     	; 0xd30 <main+0x588>
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	d8 1a       	sub	r13, r24
     d50:	e8 0a       	sbc	r14, r24
     d52:	f8 0a       	sbc	r15, r24
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
     d54:	c6 01       	movw	r24, r12
     d56:	9a 95       	dec	r25
     d58:	6a e2       	ldi	r22, 0x2A	; 42
     d5a:	79 db       	rcall	.-2318   	; 0x44e <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     d5c:	86 01       	movw	r16, r12
     d5e:	01 50       	subi	r16, 0x01	; 1
     d60:	11 09       	sbc	r17, r1
     d62:	c8 01       	movw	r24, r16
     d64:	6b db       	rcall	.-2346   	; 0x43c <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
     d66:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <receivedBuffer+0xff>
     d6a:	89 17       	cp	r24, r25
     d6c:	09 f4       	brne	.+2      	; 0xd70 <main+0x5c8>
     d6e:	05 c2       	rjmp	.+1034   	; 0x117a <main+0x9d2>
				dataVerify = gb_flash_read_byte(address-1);
     d70:	c8 01       	movw	r24, r16
     d72:	64 db       	rcall	.-2360   	; 0x43c <gb_flash_read_byte>
     d74:	9d e0       	ldi	r25, 0x0D	; 13
     d76:	9a 95       	dec	r25
     d78:	f1 f7       	brne	.-4      	; 0xd76 <main+0x5ce>
     d7a:	00 00       	nop
     d7c:	f4 cf       	rjmp	.-24     	; 0xd66 <main+0x5be>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
     d7e:	9a 35       	cpi	r25, 0x5A	; 90
     d80:	09 f0       	breq	.+2      	; 0xd84 <main+0x5dc>
     d82:	ba c0       	rjmp	.+372    	; 0xef8 <main+0x750>
			usart_read_bytes(128);
     d84:	80 e8       	ldi	r24, 0x80	; 128
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	65 d9       	rcall	.-3382   	; 0x54 <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     d8a:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
     d8c:	69 e0       	ldi	r22, 0x09	; 9
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	5d db       	rcall	.-2374   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
     d94:	6a ea       	ldi	r22, 0xAA	; 170
     d96:	81 e2       	ldi	r24, 0x21	; 33
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	59 db       	rcall	.-2382   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
     d9c:	65 e5       	ldi	r22, 0x55	; 85
     d9e:	82 e2       	ldi	r24, 0x22	; 34
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	55 db       	rcall	.-2390   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     da4:	65 ea       	ldi	r22, 0xA5	; 165
     da6:	8f e3       	ldi	r24, 0x3F	; 63
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	51 db       	rcall	.-2398   	; 0x44e <gb_flash_write_bus_cycle>
     dac:	ed e0       	ldi	r30, 0x0D	; 13
     dae:	ea 95       	dec	r30
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x606>
     db2:	00 00       	nop
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
     db4:	61 e1       	ldi	r22, 0x11	; 17
     db6:	80 e2       	ldi	r24, 0x20	; 32
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	49 db       	rcall	.-2414   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     dbc:	65 ea       	ldi	r22, 0xA5	; 165
     dbe:	8f e3       	ldi	r24, 0x3F	; 63
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	45 db       	rcall	.-2422   	; 0x44e <gb_flash_write_bus_cycle>
     dc4:	fd e0       	ldi	r31, 0x0D	; 13
     dc6:	fa 95       	dec	r31
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0x61e>
     dca:	00 00       	nop
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	91 e2       	ldi	r25, 0x21	; 33
     dd2:	3d db       	rcall	.-2438   	; 0x44e <gb_flash_write_bus_cycle>
     dd4:	2d e0       	ldi	r18, 0x0D	; 13
     dd6:	2a 95       	dec	r18
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <main+0x62e>
     dda:	00 00       	nop
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
     ddc:	6f e0       	ldi	r22, 0x0F	; 15
     dde:	80 e2       	ldi	r24, 0x20	; 32
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	35 db       	rcall	.-2454   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     de4:	65 e5       	ldi	r22, 0x55	; 85
     de6:	85 e2       	ldi	r24, 0x25	; 37
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	31 db       	rcall	.-2462   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     dec:	65 e5       	ldi	r22, 0x55	; 85
     dee:	86 e2       	ldi	r24, 0x26	; 38
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	2d db       	rcall	.-2470   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
     df4:	6a ea       	ldi	r22, 0xAA	; 170
     df6:	87 e2       	ldi	r24, 0x27	; 39
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	29 db       	rcall	.-2478   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     dfc:	65 ea       	ldi	r22, 0xA5	; 165
     dfe:	8f e3       	ldi	r24, 0x3F	; 63
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	25 db       	rcall	.-2486   	; 0x44e <gb_flash_write_bus_cycle>
     e04:	8d e0       	ldi	r24, 0x0D	; 13
     e06:	8a 95       	dec	r24
     e08:	f1 f7       	brne	.-4      	; 0xe06 <main+0x65e>
     e0a:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     e0c:	6f e0       	ldi	r22, 0x0F	; 15
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	1d db       	rcall	.-2502   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
     e14:	6a e2       	ldi	r22, 0x2A	; 42
     e16:	85 e2       	ldi	r24, 0x25	; 37
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	19 db       	rcall	.-2510   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
     e1c:	6a ea       	ldi	r22, 0xAA	; 170
     e1e:	86 e2       	ldi	r24, 0x26	; 38
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	15 db       	rcall	.-2518   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
     e24:	65 e5       	ldi	r22, 0x55	; 85
     e26:	87 e2       	ldi	r24, 0x27	; 39
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	11 db       	rcall	.-2526   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     e2c:	65 ea       	ldi	r22, 0xA5	; 165
     e2e:	8f e3       	ldi	r24, 0x3F	; 63
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0d db       	rcall	.-2534   	; 0x44e <gb_flash_write_bus_cycle>
     e34:	9d e0       	ldi	r25, 0x0D	; 13
     e36:	9a 95       	dec	r25
     e38:	f1 f7       	brne	.-4      	; 0xe36 <main+0x68e>
     e3a:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     e3c:	6f e0       	ldi	r22, 0x0F	; 15
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	05 db       	rcall	.-2550   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     e44:	65 e5       	ldi	r22, 0x55	; 85
     e46:	85 e2       	ldi	r24, 0x25	; 37
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	01 db       	rcall	.-2558   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     e4c:	65 e5       	ldi	r22, 0x55	; 85
     e4e:	86 e2       	ldi	r24, 0x26	; 38
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	fd da       	rcall	.-2566   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
     e54:	60 ea       	ldi	r22, 0xA0	; 160
     e56:	87 e2       	ldi	r24, 0x27	; 39
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	f9 da       	rcall	.-2574   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     e5c:	65 ea       	ldi	r22, 0xA5	; 165
     e5e:	8f e3       	ldi	r24, 0x3F	; 63
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	f5 da       	rcall	.-2582   	; 0x44e <gb_flash_write_bus_cycle>
     e64:	ed e0       	ldi	r30, 0x0D	; 13
     e66:	ea 95       	dec	r30
     e68:	f1 f7       	brne	.-4      	; 0xe66 <main+0x6be>
     e6a:	00 00       	nop
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	91 e2       	ldi	r25, 0x21	; 33
     e76:	27 d9       	rcall	.-3506   	; 0xc6 <write_8bit_data>
     e78:	fd e0       	ldi	r31, 0x0D	; 13
     e7a:	fa 95       	dec	r31
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <main+0x6d2>
     e7e:	00 00       	nop
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
     e80:	60 e1       	ldi	r22, 0x10	; 16
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	e3 da       	rcall	.-2618   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     e88:	65 ea       	ldi	r22, 0xA5	; 165
     e8a:	8f e3       	ldi	r24, 0x3F	; 63
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	df da       	rcall	.-2626   	; 0x44e <gb_flash_write_bus_cycle>
     e90:	2d e0       	ldi	r18, 0x0D	; 13
     e92:	2a 95       	dec	r18
     e94:	f1 f7       	brne	.-4      	; 0xe92 <main+0x6ea>
     e96:	00 00       	nop
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
     e98:	68 e0       	ldi	r22, 0x08	; 8
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	d7 da       	rcall	.-2642   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     ea0:	65 ea       	ldi	r22, 0xA5	; 165
     ea2:	8f e3       	ldi	r24, 0x3F	; 63
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	d3 da       	rcall	.-2650   	; 0x44e <gb_flash_write_bus_cycle>
     ea8:	8d e0       	ldi	r24, 0x0D	; 13
     eaa:	8a 95       	dec	r24
     eac:	f1 f7       	brne	.-4      	; 0xeaa <main+0x702>
     eae:	00 00       	nop
     eb0:	00 e7       	ldi	r16, 0x70	; 112
     eb2:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
     eb4:	80 ef       	ldi	r24, 0xF0	; 240
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	80 17       	cp	r24, r16
     eba:	91 07       	cpc	r25, r17
     ebc:	79 f0       	breq	.+30     	; 0xedc <main+0x734>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     ebe:	f8 01       	movw	r30, r16
     ec0:	61 91       	ld	r22, Z+
     ec2:	8f 01       	movw	r16, r30
     ec4:	c6 01       	movw	r24, r12
     ec6:	c3 da       	rcall	.-2682   	; 0x44e <gb_flash_write_bus_cycle>
     ec8:	fd e0       	ldi	r31, 0x0D	; 13
     eca:	fa 95       	dec	r31
     ecc:	f1 f7       	brne	.-4      	; 0xeca <main+0x722>
     ece:	00 00       	nop
				_delay_us(5);
				address++;
     ed0:	2f ef       	ldi	r18, 0xFF	; 255
     ed2:	c2 1a       	sub	r12, r18
     ed4:	d2 0a       	sbc	r13, r18
     ed6:	e2 0a       	sbc	r14, r18
     ed8:	f2 0a       	sbc	r15, r18
     eda:	ec cf       	rjmp	.-40     	; 0xeb4 <main+0x70c>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
     edc:	6f ef       	ldi	r22, 0xFF	; 255
     ede:	d7 01       	movw	r26, r14
     ee0:	c6 01       	movw	r24, r12
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	a1 09       	sbc	r26, r1
     ee6:	b1 09       	sbc	r27, r1
     ee8:	b2 da       	rcall	.-2716   	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eea:	ef e1       	ldi	r30, 0x1F	; 31
     eec:	fe e4       	ldi	r31, 0x4E	; 78
     eee:	31 97       	sbiw	r30, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <main+0x746>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <main+0x74c>
     ef4:	00 00       	nop
     ef6:	41 c1       	rjmp	.+642    	; 0x117a <main+0x9d2>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     ef8:	9e 36       	cpi	r25, 0x6E	; 110
     efa:	19 f5       	brne	.+70     	; 0xf42 <main+0x79a>
			usart_read_chars(); // Read address
     efc:	c0 d8       	rcall	.-3712   	; 0x7e <usart_read_chars>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     efe:	40 e1       	ldi	r20, 0x10	; 16
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e7       	ldi	r24, 0x70	; 112
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	32 d2       	rcall	.+1124   	; 0x1370 <strtol>
     f0c:	4b 01       	movw	r8, r22
     f0e:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for byte
     f10:	99 d8       	rcall	.-3790   	; 0x44 <USART_Receive>
     f12:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     f16:	8e 36       	cpi	r24, 0x6E	; 110
     f18:	09 f0       	breq	.+2      	; 0xf1c <main+0x774>
     f1a:	50 cc       	rjmp	.-1888   	; 0x7bc <main+0x14>
				usart_read_chars(); // Read data
     f1c:	b0 d8       	rcall	.-3744   	; 0x7e <usart_read_chars>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
     f1e:	40 e1       	ldi	r20, 0x10	; 16
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 e7       	ldi	r24, 0x70	; 112
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	22 d2       	rcall	.+1092   	; 0x1370 <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
     f2c:	93 9a       	sbi	0x12, 3	; 18
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     f2e:	c4 bb       	out	0x14, r28	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
     f30:	ca bb       	out	0x1a, r28	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
     f32:	c7 bb       	out	0x17, r28	; 23
				gba_flash_write_bus_cycle(flashAddress, flashByte);
     f34:	ab 01       	movw	r20, r22
     f36:	c5 01       	movw	r24, r10
     f38:	b4 01       	movw	r22, r8
     f3a:	5f db       	rcall	.-2370   	; 0x5fa <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
     f3c:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
     f3e:	81 e3       	ldi	r24, 0x31	; 49
     f40:	f8 c1       	rjmp	.+1008   	; 0x1332 <main+0xb8a>
			}
		}
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     f42:	91 37       	cpi	r25, 0x71	; 113
     f44:	11 f0       	breq	.+4      	; 0xf4a <main+0x7a2>
     f46:	94 37       	cpi	r25, 0x74	; 116
     f48:	e9 f5       	brne	.+122    	; 0xfc4 <main+0x81c>
			PORTD |= (1<<ACTIVITY_LED);
     f4a:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     f4c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     f50:	84 37       	cpi	r24, 0x74	; 116
     f52:	19 f4       	brne	.+6      	; 0xf5a <main+0x7b2>
				readLength = 256;
     f54:	00 e0       	ldi	r16, 0x00	; 0
     f56:	11 e0       	ldi	r17, 0x01	; 1
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <main+0x7b6>
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
     f5a:	00 e4       	ldi	r16, 0x40	; 64
     f5c:	10 e0       	ldi	r17, 0x00	; 0
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
     f5e:	c8 01       	movw	r24, r16
     f60:	79 d8       	rcall	.-3854   	; 0x54 <usart_read_bytes>
     f62:	70 e7       	ldi	r23, 0x70	; 112
     f64:	a7 2e       	mov	r10, r23
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	b7 2e       	mov	r11, r23
     f6a:	26 01       	movw	r4, r12
     f6c:	37 01       	movw	r6, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
     f6e:	f5 01       	movw	r30, r10
     f70:	41 81       	ldd	r20, Z+1	; 0x01
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	54 2f       	mov	r21, r20
     f76:	44 27       	eor	r20, r20
     f78:	80 81       	ld	r24, Z
     f7a:	48 2b       	or	r20, r24
				if (combinedBytes != 0xFFFF) {
     f7c:	4f 3f       	cpi	r20, 0xFF	; 255
     f7e:	ff ef       	ldi	r31, 0xFF	; 255
     f80:	5f 07       	cpc	r21, r31
     f82:	21 f0       	breq	.+8      	; 0xf8c <main+0x7e4>
					gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	c3 01       	movw	r24, r6
     f88:	b2 01       	movw	r22, r4
     f8a:	ad db       	rcall	.-2214   	; 0x6e6 <gba_flash_write_byte>
				}
				address++;
     f8c:	2f ef       	ldi	r18, 0xFF	; 255
     f8e:	42 1a       	sub	r4, r18
     f90:	52 0a       	sbc	r5, r18
     f92:	62 0a       	sbc	r6, r18
     f94:	72 0a       	sbc	r7, r18
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	a8 0e       	add	r10, r24
     f9a:	b1 1c       	adc	r11, r1
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
     f9c:	c5 01       	movw	r24, r10
     f9e:	80 57       	subi	r24, 0x70	; 112
     fa0:	90 40       	sbci	r25, 0x00	; 0
     fa2:	80 17       	cp	r24, r16
     fa4:	91 07       	cpc	r25, r17
     fa6:	1c f3       	brlt	.-58     	; 0xf6e <main+0x7c6>
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	c9 1a       	sub	r12, r25
     fac:	d9 0a       	sbc	r13, r25
     fae:	e9 0a       	sbc	r14, r25
     fb0:	f9 0a       	sbc	r15, r25
     fb2:	01 50       	subi	r16, 0x01	; 1
     fb4:	11 09       	sbc	r17, r1
     fb6:	16 95       	lsr	r17
     fb8:	07 95       	ror	r16
     fba:	c0 0e       	add	r12, r16
     fbc:	d1 1e       	adc	r13, r17
     fbe:	e1 1c       	adc	r14, r1
     fc0:	f1 1c       	adc	r15, r1
     fc2:	db c0       	rjmp	.+438    	; 0x117a <main+0x9d2>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
     fc4:	96 36       	cpi	r25, 0x66	; 102
     fc6:	41 f5       	brne	.+80     	; 0x1018 <main+0x870>
			PORTD |= (1<<ACTIVITY_LED);
     fc8:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 256;
			usart_read_bytes(readLength);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	42 d8       	rcall	.-3964   	; 0x54 <usart_read_bytes>
     fd0:	00 e7       	ldi	r16, 0x70	; 112
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	46 01       	movw	r8, r12
     fd6:	57 01       	movw	r10, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
     fd8:	f8 01       	movw	r30, r16
     fda:	41 81       	ldd	r20, Z+1	; 0x01
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	54 2f       	mov	r21, r20
     fe0:	44 27       	eor	r20, r20
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2b       	or	r20, r24
				if (combinedBytes != 0xFFFF) {
     fe6:	4f 3f       	cpi	r20, 0xFF	; 255
     fe8:	ff ef       	ldi	r31, 0xFF	; 255
     fea:	5f 07       	cpc	r21, r31
     fec:	21 f0       	breq	.+8      	; 0xff6 <main+0x84e>
					gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	c5 01       	movw	r24, r10
     ff2:	b4 01       	movw	r22, r8
     ff4:	78 db       	rcall	.-2320   	; 0x6e6 <gba_flash_write_byte>
				}
				address++;
     ff6:	2f ef       	ldi	r18, 0xFF	; 255
     ff8:	82 1a       	sub	r8, r18
     ffa:	92 0a       	sbc	r9, r18
     ffc:	a2 0a       	sbc	r10, r18
     ffe:	b2 0a       	sbc	r11, r18
    1000:	0e 5f       	subi	r16, 0xFE	; 254
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 256;
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	00 37       	cpi	r16, 0x70	; 112
    1008:	18 07       	cpc	r17, r24
    100a:	31 f7       	brne	.-52     	; 0xfd8 <main+0x830>
    100c:	90 e8       	ldi	r25, 0x80	; 128
    100e:	c9 0e       	add	r12, r25
    1010:	d1 1c       	adc	r13, r1
    1012:	e1 1c       	adc	r14, r1
    1014:	f1 1c       	adc	r15, r1
    1016:	b1 c0       	rjmp	.+354    	; 0x117a <main+0x9d2>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
    1018:	9c 36       	cpi	r25, 0x6C	; 108
    101a:	09 f0       	breq	.+2      	; 0x101e <main+0x876>
    101c:	70 c0       	rjmp	.+224    	; 0x10fe <main+0x956>
			PORTD |= (1<<ACTIVITY_LED);
    101e:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    1020:	80 e4       	ldi	r24, 0x40	; 64
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	17 d8       	rcall	.-4050   	; 0x54 <usart_read_bytes>
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1026:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1028:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    102a:	c7 bb       	out	0x17, r28	; 23
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
    102c:	40 e6       	ldi	r20, 0x60	; 96
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	c7 01       	movw	r24, r14
    1032:	b6 01       	movw	r22, r12
    1034:	e2 da       	rcall	.-2620   	; 0x5fa <gba_flash_write_bus_cycle>
			gba_flash_write_bus_cycle(address, 0xD0);
    1036:	40 ed       	ldi	r20, 0xD0	; 208
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	c7 01       	movw	r24, r14
    103c:	b6 01       	movw	r22, r12
    103e:	dd da       	rcall	.-2630   	; 0x5fa <gba_flash_write_bus_cycle>
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
    1040:	48 ee       	ldi	r20, 0xE8	; 232
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	c7 01       	movw	r24, r14
    1046:	b6 01       	movw	r22, r12
    1048:	d8 da       	rcall	.-2640   	; 0x5fa <gba_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    104a:	e5 e8       	ldi	r30, 0x85	; 133
    104c:	ea 95       	dec	r30
    104e:	f1 f7       	brne	.-4      	; 0x104c <main+0x8a4>
    1050:	00 00       	nop
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
    1052:	c7 01       	movw	r24, r14
    1054:	b6 01       	movw	r22, r12
    1056:	6b d8       	rcall	.-3882   	; 0x12e <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
    1058:	80 38       	cpi	r24, 0x80	; 128
    105a:	91 05       	cpc	r25, r1
    105c:	41 f0       	breq	.+16     	; 0x106e <main+0x8c6>
				dataVerify = gba_read_16bit_data(address);
    105e:	c7 01       	movw	r24, r14
    1060:	b6 01       	movw	r22, r12
    1062:	65 d8       	rcall	.-3894   	; 0x12e <gba_read_16bit_data>
    1064:	f5 e8       	ldi	r31, 0x85	; 133
    1066:	fa 95       	dec	r31
    1068:	f1 f7       	brne	.-4      	; 0x1066 <main+0x8be>
    106a:	00 00       	nop
    106c:	f5 cf       	rjmp	.-22     	; 0x1058 <main+0x8b0>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    106e:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1070:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1072:	c7 bb       	out	0x17, r28	; 23
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
    1074:	4f e1       	ldi	r20, 0x1F	; 31
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	c7 01       	movw	r24, r14
    107a:	b6 01       	movw	r22, r12
    107c:	be da       	rcall	.-2692   	; 0x5fa <gba_flash_write_bus_cycle>
    107e:	00 e7       	ldi	r16, 0x70	; 112
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	46 01       	movw	r8, r12
    1084:	57 01       	movw	r10, r14
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
    1086:	f8 01       	movw	r30, r16
    1088:	41 81       	ldd	r20, Z+1	; 0x01
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	54 2f       	mov	r21, r20
    108e:	44 27       	eor	r20, r20
    1090:	80 81       	ld	r24, Z
    1092:	48 2b       	or	r20, r24
    1094:	c5 01       	movw	r24, r10
    1096:	b4 01       	movw	r22, r8
    1098:	b0 da       	rcall	.-2720   	; 0x5fa <gba_flash_write_bus_cycle>
				address++;
    109a:	ff ef       	ldi	r31, 0xFF	; 255
    109c:	8f 1a       	sub	r8, r31
    109e:	9f 0a       	sbc	r9, r31
    10a0:	af 0a       	sbc	r10, r31
    10a2:	bf 0a       	sbc	r11, r31
    10a4:	0e 5f       	subi	r16, 0xFE	; 254
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	00 3b       	cpi	r16, 0xB0	; 176
    10ac:	12 07       	cpc	r17, r18
    10ae:	59 f7       	brne	.-42     	; 0x1086 <main+0x8de>
    10b0:	80 e2       	ldi	r24, 0x20	; 32
    10b2:	c8 0e       	add	r12, r24
    10b4:	d1 1c       	adc	r13, r1
    10b6:	e1 1c       	adc	r14, r1
    10b8:	f1 1c       	adc	r15, r1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
    10ba:	40 ed       	ldi	r20, 0xD0	; 208
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	c7 01       	movw	r24, r14
    10c0:	b6 01       	movw	r22, r12
    10c2:	9b da       	rcall	.-2762   	; 0x5fa <gba_flash_write_bus_cycle>
    10c4:	ef e6       	ldi	r30, 0x6F	; 111
    10c6:	f3 e0       	ldi	r31, 0x03	; 3
    10c8:	31 97       	sbiw	r30, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <main+0x920>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <main+0x926>
    10ce:	00 00       	nop
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
    10d0:	c7 01       	movw	r24, r14
    10d2:	b6 01       	movw	r22, r12
    10d4:	2c d8       	rcall	.-4008   	; 0x12e <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
    10d6:	80 38       	cpi	r24, 0x80	; 128
    10d8:	91 05       	cpc	r25, r1
    10da:	41 f0       	breq	.+16     	; 0x10ec <main+0x944>
				dataVerify = gba_read_16bit_data(address);
    10dc:	c7 01       	movw	r24, r14
    10de:	b6 01       	movw	r22, r12
    10e0:	26 d8       	rcall	.-4020   	; 0x12e <gba_read_16bit_data>
    10e2:	f5 e8       	ldi	r31, 0x85	; 133
    10e4:	fa 95       	dec	r31
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <main+0x93c>
    10e8:	00 00       	nop
    10ea:	f5 cf       	rjmp	.-22     	; 0x10d6 <main+0x92e>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    10ec:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    10ee:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    10f0:	c7 bb       	out	0x17, r28	; 23
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
    10f2:	4f ef       	ldi	r20, 0xFF	; 255
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	c7 01       	movw	r24, r14
    10f8:	b6 01       	movw	r22, r12
    10fa:	7f da       	rcall	.-2818   	; 0x5fa <gba_flash_write_bus_cycle>
    10fc:	3e c0       	rjmp	.+124    	; 0x117a <main+0x9d2>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel word programming
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
    10fe:	95 37       	cpi	r25, 0x75	; 117
    1100:	f1 f5       	brne	.+124    	; 0x117e <main+0x9d6>
			PORTD |= (1<<ACTIVITY_LED);
    1102:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    1104:	80 e4       	ldi	r24, 0x40	; 64
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a5 d7       	rcall	.+3914   	; 0x2054 <__TEXT_REGION_LENGTH__+0x54>
    110a:	90 e7       	ldi	r25, 0x70	; 112
    110c:	a9 2e       	mov	r10, r25
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	b9 2e       	mov	r11, r25
    1112:	26 01       	movw	r4, r12
    1114:	37 01       	movw	r6, r14
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1116:	c4 bb       	out	0x14, r28	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1118:	ca bb       	out	0x1a, r28	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    111a:	c7 bb       	out	0x17, r28	; 23
				
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    111c:	f5 01       	movw	r30, r10
    111e:	01 81       	ldd	r16, Z+1	; 0x01
    1120:	10 e0       	ldi	r17, 0x00	; 0
    1122:	10 2f       	mov	r17, r16
    1124:	00 27       	eor	r16, r16
    1126:	80 81       	ld	r24, Z
    1128:	08 2b       	or	r16, r24
				gba_flash_write_bus_cycle(address, 0x40);
    112a:	40 e4       	ldi	r20, 0x40	; 64
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	c3 01       	movw	r24, r6
    1130:	b2 01       	movw	r22, r4
    1132:	63 da       	rcall	.-2874   	; 0x5fa <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, combinedBytes);
    1134:	a8 01       	movw	r20, r16
    1136:	c3 01       	movw	r24, r6
    1138:	b2 01       	movw	r22, r4
    113a:	5f da       	rcall	.-2882   	; 0x5fa <gba_flash_write_bus_cycle>
				
				// Verify status ok
				uint16_t status = gba_read_16bit_data(address);
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	f6 d7       	rcall	.+4076   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
				while ((status & 0x80) == 0) {
    1142:	87 fd       	sbrc	r24, 7
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <main+0x9ae>
					status = gba_read_16bit_data(address);
    1146:	c3 01       	movw	r24, r6
    1148:	b2 01       	movw	r22, r4
    114a:	f1 d7       	rcall	.+4066   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    114c:	f5 e0       	ldi	r31, 0x05	; 5
    114e:	fa 95       	dec	r31
    1150:	f1 f7       	brne	.-4      	; 0x114e <main+0x9a6>
    1152:	00 00       	nop
    1154:	f6 cf       	rjmp	.-20     	; 0x1142 <main+0x99a>
					_delay_us(2);
				}
				address++;
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	42 1a       	sub	r4, r18
    115a:	52 0a       	sbc	r5, r18
    115c:	62 0a       	sbc	r6, r18
    115e:	72 0a       	sbc	r7, r18
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	a8 0e       	add	r10, r24
    1164:	b1 1c       	adc	r11, r1
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    1166:	90 eb       	ldi	r25, 0xB0	; 176
    1168:	a9 16       	cp	r10, r25
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	b9 06       	cpc	r11, r25
    116e:	99 f6       	brne	.-90     	; 0x1116 <main+0x96e>
    1170:	e0 e2       	ldi	r30, 0x20	; 32
    1172:	ce 0e       	add	r12, r30
    1174:	d1 1c       	adc	r13, r1
    1176:	e1 1c       	adc	r14, r1
    1178:	f1 1c       	adc	r15, r1
					_delay_us(2);
				}
				address++;
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    117a:	81 e3       	ldi	r24, 0x31	; 49
    117c:	c3 c0       	rjmp	.+390    	; 0x1304 <main+0xb5c>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
    117e:	99 34       	cpi	r25, 0x49	; 73
    1180:	19 f0       	breq	.+6      	; 0x1188 <main+0x9e0>
    1182:	9f 34       	cpi	r25, 0x4F	; 79
    1184:	09 f0       	breq	.+2      	; 0x1188 <main+0x9e0>
    1186:	50 c0       	rjmp	.+160    	; 0x1228 <main+0xa80>
			char portChar = USART_Receive();
    1188:	5d d7       	rcall	.+3770   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
    118a:	18 2f       	mov	r17, r24
			usart_read_chars();
    118c:	78 d7       	rcall	.+3824   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    118e:	40 e1       	ldi	r20, 0x10	; 16
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	80 e7       	ldi	r24, 0x70	; 112
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	ea d0       	rcall	.+468    	; 0x1370 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    119c:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
    119e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
    11a2:	89 34       	cpi	r24, 0x49	; 73
    11a4:	f9 f4       	brne	.+62     	; 0x11e4 <main+0xa3c>
				if (portChar == 'A') {
    11a6:	11 34       	cpi	r17, 0x41	; 65
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <main+0xa0a>
					DDRA &= ~(setValue);
    11aa:	8a b3       	in	r24, 0x1a	; 26
    11ac:	60 95       	com	r22
    11ae:	68 23       	and	r22, r24
    11b0:	20 c0       	rjmp	.+64     	; 0x11f2 <main+0xa4a>
				}
				else if (portChar == 'B') {
    11b2:	12 34       	cpi	r17, 0x42	; 66
    11b4:	21 f4       	brne	.+8      	; 0x11be <main+0xa16>
					DDRB &= ~(setValue);
    11b6:	87 b3       	in	r24, 0x17	; 23
    11b8:	60 95       	com	r22
    11ba:	68 23       	and	r22, r24
    11bc:	20 c0       	rjmp	.+64     	; 0x11fe <main+0xa56>
				}
				else if (portChar == 'C') {
    11be:	13 34       	cpi	r17, 0x43	; 67
    11c0:	21 f4       	brne	.+8      	; 0x11ca <main+0xa22>
					DDRC &= ~(setValue);
    11c2:	84 b3       	in	r24, 0x14	; 20
    11c4:	60 95       	com	r22
    11c6:	68 23       	and	r22, r24
    11c8:	20 c0       	rjmp	.+64     	; 0x120a <main+0xa62>
				}
				else if (portChar == 'D') {
    11ca:	14 34       	cpi	r17, 0x44	; 68
    11cc:	21 f4       	brne	.+8      	; 0x11d6 <main+0xa2e>
					DDRD &= ~(setValue);
    11ce:	81 b3       	in	r24, 0x11	; 17
    11d0:	60 95       	com	r22
    11d2:	68 23       	and	r22, r24
    11d4:	20 c0       	rjmp	.+64     	; 0x1216 <main+0xa6e>
				}
				else if (portChar == 'E') {
    11d6:	15 34       	cpi	r17, 0x45	; 69
    11d8:	09 f0       	breq	.+2      	; 0x11dc <main+0xa34>
    11da:	95 c0       	rjmp	.+298    	; 0x1306 <main+0xb5e>
					DDRE &= ~(setValue);
    11dc:	86 b1       	in	r24, 0x06	; 6
    11de:	60 95       	com	r22
    11e0:	68 23       	and	r22, r24
    11e2:	20 c0       	rjmp	.+64     	; 0x1224 <main+0xa7c>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
    11e4:	8f 34       	cpi	r24, 0x4F	; 79
    11e6:	09 f0       	breq	.+2      	; 0x11ea <main+0xa42>
    11e8:	8e c0       	rjmp	.+284    	; 0x1306 <main+0xb5e>
				if (portChar == 'A') {
    11ea:	11 34       	cpi	r17, 0x41	; 65
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <main+0xa4e>
					DDRA |= (setValue);
    11ee:	8a b3       	in	r24, 0x1a	; 26
    11f0:	68 2b       	or	r22, r24
    11f2:	6a bb       	out	0x1a, r22	; 26
    11f4:	88 c0       	rjmp	.+272    	; 0x1306 <main+0xb5e>
				}
				else if (portChar == 'B') {
    11f6:	12 34       	cpi	r17, 0x42	; 66
    11f8:	21 f4       	brne	.+8      	; 0x1202 <main+0xa5a>
					DDRB |= (setValue);
    11fa:	87 b3       	in	r24, 0x17	; 23
    11fc:	68 2b       	or	r22, r24
    11fe:	67 bb       	out	0x17, r22	; 23
    1200:	82 c0       	rjmp	.+260    	; 0x1306 <main+0xb5e>
				}
				else if (portChar == 'C') {
    1202:	13 34       	cpi	r17, 0x43	; 67
    1204:	21 f4       	brne	.+8      	; 0x120e <main+0xa66>
					DDRC |= (setValue);
    1206:	84 b3       	in	r24, 0x14	; 20
    1208:	68 2b       	or	r22, r24
    120a:	64 bb       	out	0x14, r22	; 20
    120c:	7c c0       	rjmp	.+248    	; 0x1306 <main+0xb5e>
				}
				else if (portChar == 'D') {
    120e:	14 34       	cpi	r17, 0x44	; 68
    1210:	21 f4       	brne	.+8      	; 0x121a <main+0xa72>
					DDRD |= (setValue);
    1212:	81 b3       	in	r24, 0x11	; 17
    1214:	68 2b       	or	r22, r24
    1216:	61 bb       	out	0x11, r22	; 17
    1218:	76 c0       	rjmp	.+236    	; 0x1306 <main+0xb5e>
				}
				else if (portChar == 'E') {
    121a:	15 34       	cpi	r17, 0x45	; 69
    121c:	09 f0       	breq	.+2      	; 0x1220 <main+0xa78>
    121e:	73 c0       	rjmp	.+230    	; 0x1306 <main+0xb5e>
					DDRE |= (setValue);
    1220:	86 b1       	in	r24, 0x06	; 6
    1222:	68 2b       	or	r22, r24
    1224:	66 b9       	out	0x06, r22	; 6
    1226:	6f c0       	rjmp	.+222    	; 0x1306 <main+0xb5e>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
    1228:	9c 34       	cpi	r25, 0x4C	; 76
    122a:	51 f5       	brne	.+84     	; 0x1280 <main+0xad8>
			char portChar = USART_Receive();			
    122c:	0b d7       	rcall	.+3606   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
    122e:	18 2f       	mov	r17, r24
			usart_read_chars();
    1230:	26 d7       	rcall	.+3660   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    1232:	40 e1       	ldi	r20, 0x10	; 16
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	80 e7       	ldi	r24, 0x70	; 112
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	98 d0       	rcall	.+304    	; 0x1370 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    1240:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    1242:	11 34       	cpi	r17, 0x41	; 65
    1244:	21 f4       	brne	.+8      	; 0x124e <main+0xaa6>
				PORTA &= ~(setValue);
    1246:	8b b3       	in	r24, 0x1b	; 27
    1248:	60 95       	com	r22
    124a:	68 23       	and	r22, r24
    124c:	2a c0       	rjmp	.+84     	; 0x12a2 <main+0xafa>
			}
			else if (portChar == 'B') {
    124e:	12 34       	cpi	r17, 0x42	; 66
    1250:	21 f4       	brne	.+8      	; 0x125a <main+0xab2>
				PORTB &= ~(setValue);
    1252:	88 b3       	in	r24, 0x18	; 24
    1254:	60 95       	com	r22
    1256:	68 23       	and	r22, r24
    1258:	2a c0       	rjmp	.+84     	; 0x12ae <main+0xb06>
			}
			else if (portChar == 'C') {
    125a:	13 34       	cpi	r17, 0x43	; 67
    125c:	21 f4       	brne	.+8      	; 0x1266 <main+0xabe>
				PORTC &= ~(setValue);
    125e:	85 b3       	in	r24, 0x15	; 21
    1260:	60 95       	com	r22
    1262:	68 23       	and	r22, r24
    1264:	2a c0       	rjmp	.+84     	; 0x12ba <main+0xb12>
			}
			else if (portChar == 'D') {
    1266:	14 34       	cpi	r17, 0x44	; 68
    1268:	21 f4       	brne	.+8      	; 0x1272 <main+0xaca>
				PORTD &= ~(setValue);
    126a:	82 b3       	in	r24, 0x12	; 18
    126c:	60 95       	com	r22
    126e:	68 23       	and	r22, r24
    1270:	2a c0       	rjmp	.+84     	; 0x12c6 <main+0xb1e>
			}
			else if (portChar == 'E') {
    1272:	15 34       	cpi	r17, 0x45	; 69
    1274:	09 f0       	breq	.+2      	; 0x1278 <main+0xad0>
    1276:	47 c0       	rjmp	.+142    	; 0x1306 <main+0xb5e>
				PORTE &= ~(setValue);
    1278:	87 b1       	in	r24, 0x07	; 7
    127a:	60 95       	com	r22
    127c:	68 23       	and	r22, r24
    127e:	29 c0       	rjmp	.+82     	; 0x12d2 <main+0xb2a>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
    1280:	98 34       	cpi	r25, 0x48	; 72
    1282:	49 f5       	brne	.+82     	; 0x12d6 <main+0xb2e>
			char portChar = USART_Receive();			
    1284:	df d6       	rcall	.+3518   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
    1286:	18 2f       	mov	r17, r24
			usart_read_chars();
    1288:	fa d6       	rcall	.+3572   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    128a:	40 e1       	ldi	r20, 0x10	; 16
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	80 e7       	ldi	r24, 0x70	; 112
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	6c d0       	rcall	.+216    	; 0x1370 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    1298:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    129a:	11 34       	cpi	r17, 0x41	; 65
    129c:	21 f4       	brne	.+8      	; 0x12a6 <main+0xafe>
				PORTA |= (setValue);
    129e:	8b b3       	in	r24, 0x1b	; 27
    12a0:	68 2b       	or	r22, r24
    12a2:	6b bb       	out	0x1b, r22	; 27
    12a4:	30 c0       	rjmp	.+96     	; 0x1306 <main+0xb5e>
			}
			else if (portChar == 'B') {
    12a6:	12 34       	cpi	r17, 0x42	; 66
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <main+0xb0a>
				PORTB |= (setValue);
    12aa:	88 b3       	in	r24, 0x18	; 24
    12ac:	68 2b       	or	r22, r24
    12ae:	68 bb       	out	0x18, r22	; 24
    12b0:	2a c0       	rjmp	.+84     	; 0x1306 <main+0xb5e>
			}
			else if (portChar == 'C') {
    12b2:	13 34       	cpi	r17, 0x43	; 67
    12b4:	21 f4       	brne	.+8      	; 0x12be <main+0xb16>
				PORTC |= (setValue);
    12b6:	85 b3       	in	r24, 0x15	; 21
    12b8:	68 2b       	or	r22, r24
    12ba:	65 bb       	out	0x15, r22	; 21
    12bc:	24 c0       	rjmp	.+72     	; 0x1306 <main+0xb5e>
			}
			else if (portChar == 'D') {
    12be:	14 34       	cpi	r17, 0x44	; 68
    12c0:	21 f4       	brne	.+8      	; 0x12ca <main+0xb22>
				PORTD |= (setValue);
    12c2:	82 b3       	in	r24, 0x12	; 18
    12c4:	68 2b       	or	r22, r24
    12c6:	62 bb       	out	0x12, r22	; 18
    12c8:	1e c0       	rjmp	.+60     	; 0x1306 <main+0xb5e>
			}
			else if (portChar == 'E') {
    12ca:	15 34       	cpi	r17, 0x45	; 69
    12cc:	e1 f4       	brne	.+56     	; 0x1306 <main+0xb5e>
				PORTE |= (setValue);
    12ce:	87 b1       	in	r24, 0x07	; 7
    12d0:	68 2b       	or	r22, r24
    12d2:	67 b9       	out	0x07, r22	; 7
    12d4:	18 c0       	rjmp	.+48     	; 0x1306 <main+0xb5e>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
    12d6:	94 34       	cpi	r25, 0x44	; 68
    12d8:	c1 f4       	brne	.+48     	; 0x130a <main+0xb62>
			char portChar = USART_Receive();			
    12da:	b4 d6       	rcall	.+3432   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
			
			PORTD |= (1<<ACTIVITY_LED);
    12dc:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    12de:	81 34       	cpi	r24, 0x41	; 65
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <main+0xb3e>
				USART_Transmit(PINA);
    12e2:	89 b3       	in	r24, 0x19	; 25
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <main+0xb5c>
			}
			else if (portChar == 'B') {
    12e6:	82 34       	cpi	r24, 0x42	; 66
    12e8:	11 f4       	brne	.+4      	; 0x12ee <main+0xb46>
				USART_Transmit(PINB);
    12ea:	86 b3       	in	r24, 0x16	; 22
    12ec:	0b c0       	rjmp	.+22     	; 0x1304 <main+0xb5c>
			}
			else if (portChar == 'C') {
    12ee:	83 34       	cpi	r24, 0x43	; 67
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <main+0xb4e>
				USART_Transmit(PINC);
    12f2:	83 b3       	in	r24, 0x13	; 19
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <main+0xb5c>
			}
			else if (portChar == 'D') {
    12f6:	84 34       	cpi	r24, 0x44	; 68
    12f8:	11 f4       	brne	.+4      	; 0x12fe <main+0xb56>
				USART_Transmit(PIND);
    12fa:	80 b3       	in	r24, 0x10	; 16
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <main+0xb5c>
			}
			else if (portChar == 'E') {
    12fe:	85 34       	cpi	r24, 0x45	; 69
    1300:	11 f4       	brne	.+4      	; 0x1306 <main+0xb5e>
				USART_Transmit(PINE);
    1302:	85 b1       	in	r24, 0x05	; 5
    1304:	a3 d6       	rcall	.+3398   	; 0x204c <__TEXT_REGION_LENGTH__+0x4c>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
    1306:	93 98       	cbi	0x12, 3	; 18
    1308:	59 ca       	rjmp	.-2894   	; 0x7bc <main+0x14>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
    130a:	9d 34       	cpi	r25, 0x4D	; 77
    130c:	59 f4       	brne	.+22     	; 0x1324 <main+0xb7c>
			char commonChar = USART_Receive();
    130e:	9a d6       	rcall	.+3380   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
			if (commonChar == '1') {
    1310:	81 33       	cpi	r24, 0x31	; 49
    1312:	19 f4       	brne	.+6      	; 0x131a <main+0xb72>
				resetCommonLines = 1;
    1314:	22 24       	eor	r2, r2
    1316:	23 94       	inc	r2
    1318:	54 ca       	rjmp	.-2904   	; 0x7c2 <main+0x1a>
			}
			else if (commonChar == '0') {
    131a:	80 33       	cpi	r24, 0x30	; 48
    131c:	09 f0       	breq	.+2      	; 0x1320 <main+0xb78>
    131e:	4e ca       	rjmp	.-2916   	; 0x7bc <main+0x14>
				resetCommonLines = 0;
    1320:	21 2c       	mov	r2, r1
    1322:	50 ca       	rjmp	.-2912   	; 0x7c4 <main+0x1c>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
    1324:	98 36       	cpi	r25, 0x68	; 104
    1326:	11 f4       	brne	.+4      	; 0x132c <main+0xb84>
			USART_Transmit(PCB_VERSION);
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <main+0xb8a>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
    132c:	96 35       	cpi	r25, 0x56	; 86
    132e:	19 f4       	brne	.+6      	; 0x1336 <main+0xb8e>
			USART_Transmit(FIRMWARE_VERSION);
    1330:	80 e1       	ldi	r24, 0x10	; 16
    1332:	8c d6       	rcall	.+3352   	; 0x204c <__TEXT_REGION_LENGTH__+0x4c>
    1334:	43 ca       	rjmp	.-2938   	; 0x7bc <main+0x14>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
    1336:	9a 32       	cpi	r25, 0x2A	; 42
    1338:	09 f0       	breq	.+2      	; 0x133c <main+0xb94>
    133a:	40 ca       	rjmp	.-2944   	; 0x7bc <main+0x14>
			usart_read_chars();
    133c:	a0 d6       	rcall	.+3392   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
    133e:	40 e1       	ldi	r20, 0x10	; 16
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	80 e7       	ldi	r24, 0x70	; 112
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	12 d0       	rcall	.+36     	; 0x1370 <strtol>
			if (resetValue == RESET_VALUE) {
    134c:	61 3e       	cpi	r22, 0xE1	; 225
    134e:	75 4e       	sbci	r23, 0xE5	; 229
    1350:	87 40       	sbci	r24, 0x07	; 7
    1352:	91 05       	cpc	r25, r1
    1354:	09 f0       	breq	.+2      	; 0x1358 <main+0xbb0>
    1356:	32 ca       	rjmp	.-2972   	; 0x7bc <main+0x14>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
    1358:	84 b7       	in	r24, 0x34	; 52
    135a:	87 7f       	andi	r24, 0xF7	; 247
    135c:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
    135e:	28 e1       	ldi	r18, 0x18	; 24
    1360:	21 bd       	out	0x21, r18	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
    1362:	8c e0       	ldi	r24, 0x0C	; 12
    1364:	81 bd       	out	0x21, r24	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	9f ef       	ldi	r25, 0xFF	; 255
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <main+0xbc2>
    136e:	26 ca       	rjmp	.-2996   	; 0x7bc <main+0x14>

00001370 <strtol>:
    1370:	a0 e0       	ldi	r26, 0x00	; 0
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ed eb       	ldi	r30, 0xBD	; 189
    1376:	f9 e0       	ldi	r31, 0x09	; 9
    1378:	78 c1       	rjmp	.+752    	; 0x166a <__prologue_saves__+0x2>
    137a:	5c 01       	movw	r10, r24
    137c:	6b 01       	movw	r12, r22
    137e:	7a 01       	movw	r14, r20
    1380:	61 15       	cp	r22, r1
    1382:	71 05       	cpc	r23, r1
    1384:	19 f0       	breq	.+6      	; 0x138c <strtol+0x1c>
    1386:	fb 01       	movw	r30, r22
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
    138c:	e1 14       	cp	r14, r1
    138e:	f1 04       	cpc	r15, r1
    1390:	29 f0       	breq	.+10     	; 0x139c <strtol+0x2c>
    1392:	c7 01       	movw	r24, r14
    1394:	02 97       	sbiw	r24, 0x02	; 2
    1396:	83 97       	sbiw	r24, 0x23	; 35
    1398:	08 f0       	brcs	.+2      	; 0x139c <strtol+0x2c>
    139a:	e2 c0       	rjmp	.+452    	; 0x1560 <strtol+0x1f0>
    139c:	e5 01       	movw	r28, r10
    139e:	21 96       	adiw	r28, 0x01	; 1
    13a0:	f5 01       	movw	r30, r10
    13a2:	10 81       	ld	r17, Z
    13a4:	81 2f       	mov	r24, r17
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	11 d1       	rcall	.+546    	; 0x15cc <isspace>
    13aa:	89 2b       	or	r24, r25
    13ac:	11 f0       	breq	.+4      	; 0x13b2 <strtol+0x42>
    13ae:	5e 01       	movw	r10, r28
    13b0:	f5 cf       	rjmp	.-22     	; 0x139c <strtol+0x2c>
    13b2:	1d 32       	cpi	r17, 0x2D	; 45
    13b4:	29 f4       	brne	.+10     	; 0x13c0 <strtol+0x50>
    13b6:	21 96       	adiw	r28, 0x01	; 1
    13b8:	f5 01       	movw	r30, r10
    13ba:	11 81       	ldd	r17, Z+1	; 0x01
    13bc:	01 e0       	ldi	r16, 0x01	; 1
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <strtol+0x5e>
    13c0:	1b 32       	cpi	r17, 0x2B	; 43
    13c2:	21 f4       	brne	.+8      	; 0x13cc <strtol+0x5c>
    13c4:	e5 01       	movw	r28, r10
    13c6:	22 96       	adiw	r28, 0x02	; 2
    13c8:	f5 01       	movw	r30, r10
    13ca:	11 81       	ldd	r17, Z+1	; 0x01
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	e1 14       	cp	r14, r1
    13d0:	f1 04       	cpc	r15, r1
    13d2:	09 f1       	breq	.+66     	; 0x1416 <strtol+0xa6>
    13d4:	f0 e1       	ldi	r31, 0x10	; 16
    13d6:	ef 16       	cp	r14, r31
    13d8:	f1 04       	cpc	r15, r1
    13da:	29 f4       	brne	.+10     	; 0x13e6 <strtol+0x76>
    13dc:	3e c0       	rjmp	.+124    	; 0x145a <strtol+0xea>
    13de:	10 e3       	ldi	r17, 0x30	; 48
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	21 f1       	breq	.+72     	; 0x142e <strtol+0xbe>
    13e6:	28 e0       	ldi	r18, 0x08	; 8
    13e8:	e2 16       	cp	r14, r18
    13ea:	f1 04       	cpc	r15, r1
    13ec:	01 f1       	breq	.+64     	; 0x142e <strtol+0xbe>
    13ee:	54 f4       	brge	.+20     	; 0x1404 <strtol+0x94>
    13f0:	e2 e0       	ldi	r30, 0x02	; 2
    13f2:	ee 16       	cp	r14, r30
    13f4:	f1 04       	cpc	r15, r1
    13f6:	21 f5       	brne	.+72     	; 0x1440 <strtol+0xd0>
    13f8:	81 2c       	mov	r8, r1
    13fa:	91 2c       	mov	r9, r1
    13fc:	a1 2c       	mov	r10, r1
    13fe:	b0 e4       	ldi	r27, 0x40	; 64
    1400:	bb 2e       	mov	r11, r27
    1402:	3d c0       	rjmp	.+122    	; 0x147e <strtol+0x10e>
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	ef 16       	cp	r14, r31
    1408:	f1 04       	cpc	r15, r1
    140a:	39 f0       	breq	.+14     	; 0x141a <strtol+0xaa>
    140c:	20 e1       	ldi	r18, 0x10	; 16
    140e:	e2 16       	cp	r14, r18
    1410:	f1 04       	cpc	r15, r1
    1412:	b1 f4       	brne	.+44     	; 0x1440 <strtol+0xd0>
    1414:	2f c0       	rjmp	.+94     	; 0x1474 <strtol+0x104>
    1416:	10 33       	cpi	r17, 0x30	; 48
    1418:	11 f1       	breq	.+68     	; 0x145e <strtol+0xee>
    141a:	fa e0       	ldi	r31, 0x0A	; 10
    141c:	ef 2e       	mov	r14, r31
    141e:	f1 2c       	mov	r15, r1
    1420:	ac ec       	ldi	r26, 0xCC	; 204
    1422:	8a 2e       	mov	r8, r26
    1424:	98 2c       	mov	r9, r8
    1426:	a8 2c       	mov	r10, r8
    1428:	ac e0       	ldi	r26, 0x0C	; 12
    142a:	ba 2e       	mov	r11, r26
    142c:	28 c0       	rjmp	.+80     	; 0x147e <strtol+0x10e>
    142e:	78 e0       	ldi	r23, 0x08	; 8
    1430:	e7 2e       	mov	r14, r23
    1432:	f1 2c       	mov	r15, r1
    1434:	81 2c       	mov	r8, r1
    1436:	91 2c       	mov	r9, r1
    1438:	a1 2c       	mov	r10, r1
    143a:	e0 e1       	ldi	r30, 0x10	; 16
    143c:	be 2e       	mov	r11, r30
    143e:	1f c0       	rjmp	.+62     	; 0x147e <strtol+0x10e>
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e8       	ldi	r25, 0x80	; 128
    1448:	97 01       	movw	r18, r14
    144a:	0f 2c       	mov	r0, r15
    144c:	00 0c       	add	r0, r0
    144e:	44 0b       	sbc	r20, r20
    1450:	55 0b       	sbc	r21, r21
    1452:	de d0       	rcall	.+444    	; 0x1610 <__udivmodsi4>
    1454:	49 01       	movw	r8, r18
    1456:	5a 01       	movw	r10, r20
    1458:	12 c0       	rjmp	.+36     	; 0x147e <strtol+0x10e>
    145a:	10 33       	cpi	r17, 0x30	; 48
    145c:	59 f4       	brne	.+22     	; 0x1474 <strtol+0x104>
    145e:	88 81       	ld	r24, Y
    1460:	8f 7d       	andi	r24, 0xDF	; 223
    1462:	88 35       	cpi	r24, 0x58	; 88
    1464:	09 f0       	breq	.+2      	; 0x1468 <strtol+0xf8>
    1466:	bb cf       	rjmp	.-138    	; 0x13de <strtol+0x6e>
    1468:	19 81       	ldd	r17, Y+1	; 0x01
    146a:	22 96       	adiw	r28, 0x02	; 2
    146c:	02 60       	ori	r16, 0x02	; 2
    146e:	80 e1       	ldi	r24, 0x10	; 16
    1470:	e8 2e       	mov	r14, r24
    1472:	f1 2c       	mov	r15, r1
    1474:	81 2c       	mov	r8, r1
    1476:	91 2c       	mov	r9, r1
    1478:	a1 2c       	mov	r10, r1
    147a:	68 e0       	ldi	r22, 0x08	; 8
    147c:	b6 2e       	mov	r11, r22
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	cb 01       	movw	r24, r22
    1486:	27 01       	movw	r4, r14
    1488:	0f 2c       	mov	r0, r15
    148a:	00 0c       	add	r0, r0
    148c:	66 08       	sbc	r6, r6
    148e:	77 08       	sbc	r7, r7
    1490:	fe 01       	movw	r30, r28
    1492:	50 ed       	ldi	r21, 0xD0	; 208
    1494:	35 2e       	mov	r3, r21
    1496:	31 0e       	add	r3, r17
    1498:	29 e0       	ldi	r18, 0x09	; 9
    149a:	23 15       	cp	r18, r3
    149c:	70 f4       	brcc	.+28     	; 0x14ba <strtol+0x14a>
    149e:	2f eb       	ldi	r18, 0xBF	; 191
    14a0:	21 0f       	add	r18, r17
    14a2:	2a 31       	cpi	r18, 0x1A	; 26
    14a4:	18 f4       	brcc	.+6      	; 0x14ac <strtol+0x13c>
    14a6:	39 ec       	ldi	r19, 0xC9	; 201
    14a8:	33 2e       	mov	r3, r19
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <strtol+0x148>
    14ac:	2f e9       	ldi	r18, 0x9F	; 159
    14ae:	21 0f       	add	r18, r17
    14b0:	2a 31       	cpi	r18, 0x1A	; 26
    14b2:	10 f5       	brcc	.+68     	; 0x14f8 <strtol+0x188>
    14b4:	29 ea       	ldi	r18, 0xA9	; 169
    14b6:	32 2e       	mov	r3, r18
    14b8:	31 0e       	add	r3, r17
    14ba:	23 2d       	mov	r18, r3
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	2e 15       	cp	r18, r14
    14c0:	3f 05       	cpc	r19, r15
    14c2:	d4 f4       	brge	.+52     	; 0x14f8 <strtol+0x188>
    14c4:	47 fd       	sbrc	r20, 7
    14c6:	15 c0       	rjmp	.+42     	; 0x14f2 <strtol+0x182>
    14c8:	86 16       	cp	r8, r22
    14ca:	97 06       	cpc	r9, r23
    14cc:	a8 06       	cpc	r10, r24
    14ce:	b9 06       	cpc	r11, r25
    14d0:	68 f0       	brcs	.+26     	; 0x14ec <strtol+0x17c>
    14d2:	a3 01       	movw	r20, r6
    14d4:	92 01       	movw	r18, r4
    14d6:	8d d0       	rcall	.+282    	; 0x15f2 <__mulsi3>
    14d8:	63 0d       	add	r22, r3
    14da:	71 1d       	adc	r23, r1
    14dc:	81 1d       	adc	r24, r1
    14de:	91 1d       	adc	r25, r1
    14e0:	61 30       	cpi	r22, 0x01	; 1
    14e2:	71 05       	cpc	r23, r1
    14e4:	81 05       	cpc	r24, r1
    14e6:	20 e8       	ldi	r18, 0x80	; 128
    14e8:	92 07       	cpc	r25, r18
    14ea:	10 f0       	brcs	.+4      	; 0x14f0 <strtol+0x180>
    14ec:	4f ef       	ldi	r20, 0xFF	; 255
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <strtol+0x182>
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	21 96       	adiw	r28, 0x01	; 1
    14f4:	10 81       	ld	r17, Z
    14f6:	cc cf       	rjmp	.-104    	; 0x1490 <strtol+0x120>
    14f8:	20 2f       	mov	r18, r16
    14fa:	21 70       	andi	r18, 0x01	; 1
    14fc:	c1 14       	cp	r12, r1
    14fe:	d1 04       	cpc	r13, r1
    1500:	71 f0       	breq	.+28     	; 0x151e <strtol+0x1ae>
    1502:	44 23       	and	r20, r20
    1504:	29 f0       	breq	.+10     	; 0x1510 <strtol+0x1a0>
    1506:	21 97       	sbiw	r28, 0x01	; 1
    1508:	f6 01       	movw	r30, r12
    150a:	d1 83       	std	Z+1, r29	; 0x01
    150c:	c0 83       	st	Z, r28
    150e:	07 c0       	rjmp	.+14     	; 0x151e <strtol+0x1ae>
    1510:	01 ff       	sbrs	r16, 1
    1512:	19 c0       	rjmp	.+50     	; 0x1546 <strtol+0x1d6>
    1514:	22 97       	sbiw	r28, 0x02	; 2
    1516:	f6 01       	movw	r30, r12
    1518:	d1 83       	std	Z+1, r29	; 0x01
    151a:	c0 83       	st	Z, r28
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <strtol+0x1d6>
    151e:	47 ff       	sbrs	r20, 7
    1520:	12 c0       	rjmp	.+36     	; 0x1546 <strtol+0x1d6>
    1522:	22 23       	and	r18, r18
    1524:	29 f0       	breq	.+10     	; 0x1530 <strtol+0x1c0>
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e8       	ldi	r25, 0x80	; 128
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <strtol+0x1c8>
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	9f e7       	ldi	r25, 0x7F	; 127
    1538:	22 e2       	ldi	r18, 0x22	; 34
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <errno+0x1>
    1540:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <errno>
    1544:	09 c0       	rjmp	.+18     	; 0x1558 <strtol+0x1e8>
    1546:	22 23       	and	r18, r18
    1548:	81 f0       	breq	.+32     	; 0x156a <strtol+0x1fa>
    154a:	90 95       	com	r25
    154c:	80 95       	com	r24
    154e:	70 95       	com	r23
    1550:	61 95       	neg	r22
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	46 2f       	mov	r20, r22
    155a:	37 2f       	mov	r19, r23
    155c:	28 2f       	mov	r18, r24
    155e:	12 c0       	rjmp	.+36     	; 0x1584 <strtol+0x214>
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <strtol+0x214>
    156a:	97 ff       	sbrs	r25, 7
    156c:	f5 cf       	rjmp	.-22     	; 0x1558 <strtol+0x1e8>
    156e:	82 e2       	ldi	r24, 0x22	; 34
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <errno+0x1>
    1576:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <errno>
    157a:	6f ef       	ldi	r22, 0xFF	; 255
    157c:	7f ef       	ldi	r23, 0xFF	; 255
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f e7       	ldi	r25, 0x7F	; 127
    1582:	ea cf       	rjmp	.-44     	; 0x1558 <strtol+0x1e8>
    1584:	64 2f       	mov	r22, r20
    1586:	73 2f       	mov	r23, r19
    1588:	82 2f       	mov	r24, r18
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	e1 e1       	ldi	r30, 0x11	; 17
    1590:	88 c0       	rjmp	.+272    	; 0x16a2 <__epilogue_restores__+0x2>

00001592 <atoi>:
    1592:	fc 01       	movw	r30, r24
    1594:	88 27       	eor	r24, r24
    1596:	99 27       	eor	r25, r25
    1598:	e8 94       	clt
    159a:	21 91       	ld	r18, Z+
    159c:	20 32       	cpi	r18, 0x20	; 32
    159e:	e9 f3       	breq	.-6      	; 0x159a <atoi+0x8>
    15a0:	29 30       	cpi	r18, 0x09	; 9
    15a2:	10 f0       	brcs	.+4      	; 0x15a8 <atoi+0x16>
    15a4:	2e 30       	cpi	r18, 0x0E	; 14
    15a6:	c8 f3       	brcs	.-14     	; 0x159a <atoi+0x8>
    15a8:	2b 32       	cpi	r18, 0x2B	; 43
    15aa:	39 f0       	breq	.+14     	; 0x15ba <atoi+0x28>
    15ac:	2d 32       	cpi	r18, 0x2D	; 45
    15ae:	31 f4       	brne	.+12     	; 0x15bc <atoi+0x2a>
    15b0:	68 94       	set
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <atoi+0x28>
    15b4:	13 d0       	rcall	.+38     	; 0x15dc <__mulhi_const_10>
    15b6:	82 0f       	add	r24, r18
    15b8:	91 1d       	adc	r25, r1
    15ba:	21 91       	ld	r18, Z+
    15bc:	20 53       	subi	r18, 0x30	; 48
    15be:	2a 30       	cpi	r18, 0x0A	; 10
    15c0:	c8 f3       	brcs	.-14     	; 0x15b4 <atoi+0x22>
    15c2:	1e f4       	brtc	.+6      	; 0x15ca <atoi+0x38>
    15c4:	90 95       	com	r25
    15c6:	81 95       	neg	r24
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	08 95       	ret

000015cc <isspace>:
    15cc:	91 11       	cpse	r25, r1
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <__ctype_isfalse>
    15d0:	80 32       	cpi	r24, 0x20	; 32
    15d2:	19 f0       	breq	.+6      	; 0x15da <isspace+0xe>
    15d4:	89 50       	subi	r24, 0x09	; 9
    15d6:	85 50       	subi	r24, 0x05	; 5
    15d8:	d0 f7       	brcc	.-12     	; 0x15ce <isspace+0x2>
    15da:	08 95       	ret

000015dc <__mulhi_const_10>:
    15dc:	7a e0       	ldi	r23, 0x0A	; 10
    15de:	97 9f       	mul	r25, r23
    15e0:	90 2d       	mov	r25, r0
    15e2:	87 9f       	mul	r24, r23
    15e4:	80 2d       	mov	r24, r0
    15e6:	91 0d       	add	r25, r1
    15e8:	11 24       	eor	r1, r1
    15ea:	08 95       	ret

000015ec <__ctype_isfalse>:
    15ec:	99 27       	eor	r25, r25
    15ee:	88 27       	eor	r24, r24

000015f0 <__ctype_istrue>:
    15f0:	08 95       	ret

000015f2 <__mulsi3>:
    15f2:	db 01       	movw	r26, r22
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	2d d0       	rcall	.+90     	; 0x1654 <__muluhisi3>
    15fa:	bf 91       	pop	r27
    15fc:	af 91       	pop	r26
    15fe:	a2 9f       	mul	r26, r18
    1600:	80 0d       	add	r24, r0
    1602:	91 1d       	adc	r25, r1
    1604:	a3 9f       	mul	r26, r19
    1606:	90 0d       	add	r25, r0
    1608:	b2 9f       	mul	r27, r18
    160a:	90 0d       	add	r25, r0
    160c:	11 24       	eor	r1, r1
    160e:	08 95       	ret

00001610 <__udivmodsi4>:
    1610:	a1 e2       	ldi	r26, 0x21	; 33
    1612:	1a 2e       	mov	r1, r26
    1614:	aa 1b       	sub	r26, r26
    1616:	bb 1b       	sub	r27, r27
    1618:	fd 01       	movw	r30, r26
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <__udivmodsi4_ep>

0000161c <__udivmodsi4_loop>:
    161c:	aa 1f       	adc	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	ee 1f       	adc	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	a2 17       	cp	r26, r18
    1626:	b3 07       	cpc	r27, r19
    1628:	e4 07       	cpc	r30, r20
    162a:	f5 07       	cpc	r31, r21
    162c:	20 f0       	brcs	.+8      	; 0x1636 <__udivmodsi4_ep>
    162e:	a2 1b       	sub	r26, r18
    1630:	b3 0b       	sbc	r27, r19
    1632:	e4 0b       	sbc	r30, r20
    1634:	f5 0b       	sbc	r31, r21

00001636 <__udivmodsi4_ep>:
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	1a 94       	dec	r1
    1640:	69 f7       	brne	.-38     	; 0x161c <__udivmodsi4_loop>
    1642:	60 95       	com	r22
    1644:	70 95       	com	r23
    1646:	80 95       	com	r24
    1648:	90 95       	com	r25
    164a:	9b 01       	movw	r18, r22
    164c:	ac 01       	movw	r20, r24
    164e:	bd 01       	movw	r22, r26
    1650:	cf 01       	movw	r24, r30
    1652:	08 95       	ret

00001654 <__muluhisi3>:
    1654:	40 d0       	rcall	.+128    	; 0x16d6 <__umulhisi3>
    1656:	a5 9f       	mul	r26, r21
    1658:	90 0d       	add	r25, r0
    165a:	b4 9f       	mul	r27, r20
    165c:	90 0d       	add	r25, r0
    165e:	a4 9f       	mul	r26, r20
    1660:	80 0d       	add	r24, r0
    1662:	91 1d       	adc	r25, r1
    1664:	11 24       	eor	r1, r1
    1666:	08 95       	ret

00001668 <__prologue_saves__>:
    1668:	2f 92       	push	r2
    166a:	3f 92       	push	r3
    166c:	4f 92       	push	r4
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	ca 1b       	sub	r28, r26
    1692:	db 0b       	sbc	r29, r27
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	09 94       	ijmp

000016a0 <__epilogue_restores__>:
    16a0:	2a 88       	ldd	r2, Y+18	; 0x12
    16a2:	39 88       	ldd	r3, Y+17	; 0x11
    16a4:	48 88       	ldd	r4, Y+16	; 0x10
    16a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    16a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    16aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    16ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    16ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    16b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    16b2:	b9 84       	ldd	r11, Y+9	; 0x09
    16b4:	c8 84       	ldd	r12, Y+8	; 0x08
    16b6:	df 80       	ldd	r13, Y+7	; 0x07
    16b8:	ee 80       	ldd	r14, Y+6	; 0x06
    16ba:	fd 80       	ldd	r15, Y+5	; 0x05
    16bc:	0c 81       	ldd	r16, Y+4	; 0x04
    16be:	1b 81       	ldd	r17, Y+3	; 0x03
    16c0:	aa 81       	ldd	r26, Y+2	; 0x02
    16c2:	b9 81       	ldd	r27, Y+1	; 0x01
    16c4:	ce 0f       	add	r28, r30
    16c6:	d1 1d       	adc	r29, r1
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	ed 01       	movw	r28, r26
    16d4:	08 95       	ret

000016d6 <__umulhisi3>:
    16d6:	a2 9f       	mul	r26, r18
    16d8:	b0 01       	movw	r22, r0
    16da:	b3 9f       	mul	r27, r19
    16dc:	c0 01       	movw	r24, r0
    16de:	a3 9f       	mul	r26, r19
    16e0:	01 d0       	rcall	.+2      	; 0x16e4 <__umulhisi3+0xe>
    16e2:	b2 9f       	mul	r27, r18
    16e4:	70 0d       	add	r23, r0
    16e6:	81 1d       	adc	r24, r1
    16e8:	11 24       	eor	r1, r1
    16ea:	91 1d       	adc	r25, r1
    16ec:	08 95       	ret

000016ee <_exit>:
    16ee:	f8 94       	cli

000016f0 <__stop_program>:
    16f0:	ff cf       	rjmp	.-2      	; 0x16f0 <__stop_program>
