
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001b60  00001bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011d  00800062  00800062  00001bf6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c05  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000715  00000000  00000000  000058c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c30  00000000  00000000  00005fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00007c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072b  00000000  00000000  00007ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027d6  00000000  00000000  00008723  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000aef9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	0e c4       	rjmp	.+2076   	; 0x82a <__vector_6>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e0 e6       	ldi	r30, 0x60	; 96
      36:	fb e1       	ldi	r31, 0x1B	; 27
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	a2 36       	cpi	r26, 0x62	; 98
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
      44:	21 e0       	ldi	r18, 0x01	; 1
      46:	a2 e6       	ldi	r26, 0x62	; 98
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	af 37       	cpi	r26, 0x7F	; 127
      50:	b2 07       	cpc	r27, r18
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	ff d3       	rcall	.+2046   	; 0x854 <main>
      56:	82 cd       	rjmp	.-1276   	; 0xfffffb5c <__eeprom_end+0xff7efb5c>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Receive>:

uint8_t cartMode = GBA_MODE;

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
      5a:	5f 9b       	sbis	0x0b, 7	; 11
      5c:	fe cf       	rjmp	.-4      	; 0x5a <USART_Receive>
	return UDR; // Get and return received data from buffer
      5e:	8c b1       	in	r24, 0x0c	; 12
}
      60:	08 95       	ret

00000062 <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
      62:	5d 9b       	sbis	0x0b, 5	; 11
      64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	UDR = data;
      66:	8c b9       	out	0x0c, r24	; 12
      68:	08 95       	ret

0000006a <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
      6a:	0f 93       	push	r16
      6c:	1f 93       	push	r17
      6e:	cf 93       	push	r28
      70:	df 93       	push	r29
      72:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
      74:	c3 e7       	ldi	r28, 0x73	; 115
      76:	d0 e0       	ldi	r29, 0x00	; 0
      78:	ce 01       	movw	r24, r28
      7a:	83 57       	subi	r24, 0x73	; 115
      7c:	90 40       	sbci	r25, 0x00	; 0
      7e:	80 17       	cp	r24, r16
      80:	91 07       	cpc	r25, r17
      82:	1c f4       	brge	.+6      	; 0x8a <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
      84:	ea df       	rcall	.-44     	; 0x5a <USART_Receive>
      86:	89 93       	st	Y+, r24
      88:	f7 cf       	rjmp	.-18     	; 0x78 <usart_read_bytes+0xe>
	}
}
      8a:	df 91       	pop	r29
      8c:	cf 91       	pop	r28
      8e:	1f 91       	pop	r17
      90:	0f 91       	pop	r16
      92:	08 95       	ret

00000094 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	c3 e7       	ldi	r28, 0x73	; 115
      9a:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
      9c:	de df       	rcall	.-68     	; 0x5a <USART_Receive>
      9e:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
      a0:	81 11       	cpse	r24, r1
      a2:	fc cf       	rjmp	.-8      	; 0x9c <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
      a4:	df 91       	pop	r29
      a6:	cf 91       	pop	r28
      a8:	08 95       	ret

000000aa <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
      aa:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
      ac:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
      ae:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
      b0:	96 9a       	sbi	0x12, 6	; 18
      b2:	08 95       	ret

000000b4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
      b4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      b6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
      b8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
      ba:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
      c0:	8a bb       	out	0x1a, r24	; 26
      c2:	08 95       	ret

000000c4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
      c4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
      c6:	88 bb       	out	0x18, r24	; 24
      c8:	08 95       	ret

000000ca <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
      ca:	fc df       	rcall	.-8      	; 0xc4 <set_16bit_address>
	
	cs_mreqPin_low;
      cc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
      ce:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
      d0:	00 00       	nop
	asm volatile("nop");
      d2:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
      d4:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
      d6:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
      d8:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
      da:	08 95       	ret

000000dc <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	d6 2f       	mov	r29, r22
      e2:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
      e4:	ef df       	rcall	.-34     	; 0xc4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
      e6:	8f ef       	ldi	r24, 0xFF	; 255
      e8:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
      ea:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
      ec:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
      ee:	c1 30       	cpi	r28, 0x01	; 1
      f0:	09 f4       	brne	.+2      	; 0xf4 <write_8bit_data+0x18>
		cs_mreqPin_low;
      f2:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
      f4:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
      f6:	c1 30       	cpi	r28, 0x01	; 1
      f8:	09 f4       	brne	.+2      	; 0xfc <write_8bit_data+0x20>
		cs_mreqPin_high;
      fa:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
      fc:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
      fe:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     100:	14 ba       	out	0x14, r1	; 20
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
     108:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
     10a:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
     10c:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     112:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     114:	84 bb       	out	0x14, r24	; 20
     116:	08 95       	ret

00000118 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
     11c:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
     11e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     120:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     126:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     128:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     12a:	8c 01       	movw	r16, r24
     12c:	22 27       	eor	r18, r18
     12e:	33 27       	eor	r19, r19
     130:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     132:	07 2f       	mov	r16, r23
     134:	18 2f       	mov	r17, r24
     136:	29 2f       	mov	r18, r25
     138:	33 27       	eor	r19, r19
     13a:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     13c:	68 bb       	out	0x18, r22	; 24
}
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	08 95       	ret

00000144 <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
     144:	e9 df       	rcall	.-46     	; 0x118 <gba_set_24bit_address>
	
	cs_mreqPin_low;
     146:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be read out
     148:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     14a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
     14c:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
     14e:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
     150:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
     152:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
     154:	29 b3       	in	r18, 0x19	; 25
     156:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
     158:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
     15a:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
     15c:	90 e0       	ldi	r25, 0x00	; 0
}
     15e:	92 2b       	or	r25, r18
     160:	08 95       	ret

00000162 <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
     162:	b0 df       	rcall	.-160    	; 0xc4 <set_16bit_address>
	
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     164:	3a 98       	cbi	0x07, 2	; 7
	rdPin_low;
     166:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
     168:	00 00       	nop
	asm volatile("nop");
     16a:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
     16c:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
     16e:	95 9a       	sbi	0x12, 5	; 18
	cs2Pin_high;
     170:	3a 9a       	sbi	0x07, 2	; 7
	
	return data;
}
     172:	08 95       	ret

00000174 <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
     174:	cf 93       	push	r28
     176:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
     178:	a5 df       	rcall	.-182    	; 0xc4 <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
     17e:	c5 bb       	out	0x15, r28	; 21
	
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     180:	3a 98       	cbi	0x07, 2	; 7
	wrPin_low; // Pulse WR
     182:	96 98       	cbi	0x12, 6	; 18
	
	asm volatile("nop");
     184:	00 00       	nop
	asm volatile("nop");
     186:	00 00       	nop
	
	wrPin_high;
     188:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
     18a:	3a 9a       	sbi	0x07, 2	; 7
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     18c:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     18e:	14 ba       	out	0x14, r1	; 20
}
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     198:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     19a:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
     19c:	90 e8       	ldi	r25, 0x80	; 128
     19e:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
     1a0:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
     1a2:	85 bb       	out	0x15, r24	; 21
     1a4:	08 95       	ret

000001a6 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
     1a6:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
     1a8:	62 30       	cpi	r22, 0x02	; 2
     1aa:	49 f4       	brne	.+18     	; 0x1be <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
     1ac:	41 11       	cpse	r20, r1
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
     1b0:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
     1b2:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
     1b4:	e1 e0       	ldi	r30, 0x01	; 1
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	13 c0       	rjmp	.+38     	; 0x1e0 <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
     1ba:	90 68       	ori	r25, 0x80	; 128
     1bc:	fa cf       	rjmp	.-12     	; 0x1b2 <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
     1be:	41 11       	cpse	r20, r1
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
     1c2:	80 6c       	ori	r24, 0xC0	; 192
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
     1c6:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
     1c8:	27 e0       	ldi	r18, 0x07	; 7
     1ca:	f4 cf       	rjmp	.-24     	; 0x1b4 <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
     1cc:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
     1ce:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1d0:	00 00       	nop
		asm ("nop");
     1d2:	00 00       	nop
		wrPin_high; 
     1d4:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
     1d6:	00 00       	nop
		asm ("nop");
     1d8:	00 00       	nop
     1da:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
     1dc:	27 fd       	sbrc	r18, 7
     1de:	0d c0       	rjmp	.+26     	; 0x1fa <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
     1e0:	bf 01       	movw	r22, r30
     1e2:	02 2e       	mov	r0, r18
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <gba_eeprom_set_address+0x44>
     1e6:	66 0f       	add	r22, r22
     1e8:	77 1f       	adc	r23, r23
     1ea:	0a 94       	dec	r0
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <gba_eeprom_set_address+0x40>
     1ee:	68 23       	and	r22, r24
     1f0:	79 23       	and	r23, r25
     1f2:	67 2b       	or	r22, r23
     1f4:	59 f3       	breq	.-42     	; 0x1cc <gba_eeprom_set_address+0x26>
			ad0Pin_high;
     1f6:	c0 9a       	sbi	0x18, 0	; 24
     1f8:	ea cf       	rjmp	.-44     	; 0x1ce <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
     1fa:	41 11       	cpse	r20, r1
     1fc:	07 c0       	rjmp	.+14     	; 0x20c <gba_eeprom_set_address+0x66>
		ad0Pin_low;
     1fe:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
     200:	00 00       	nop
		wrPin_low;
     202:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     204:	00 00       	nop
		asm ("nop");
     206:	00 00       	nop
		
		wrPin_high;
     208:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
     20a:	94 9a       	sbi	0x12, 4	; 18
     20c:	08 95       	ret

0000020e <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	ca df       	rcall	.-108    	; 0x1a6 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
     212:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
     214:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
     216:	94 98       	cbi	0x12, 4	; 18
     218:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
     21a:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
     21c:	00 00       	nop
		asm ("nop");
     21e:	00 00       	nop
		rdPin_high; 
     220:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
     222:	00 00       	nop
		asm ("nop");
     224:	00 00       	nop
     226:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
     228:	c1 f7       	brne	.-16     	; 0x21a <gba_eeprom_read+0xc>
     22a:	e4 e7       	ldi	r30, 0x74	; 116
     22c:	f1 e0       	ldi	r31, 0x01	; 1
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
     22e:	41 e0       	ldi	r20, 0x01	; 1
     230:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
     232:	87 e0       	ldi	r24, 0x07	; 7
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
     238:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
     23a:	00 00       	nop
			asm ("nop");
     23c:	00 00       	nop
			rdPin_high;
     23e:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
     240:	b0 9b       	sbis	0x16, 0	; 22
     242:	07 c0       	rjmp	.+14     	; 0x252 <gba_eeprom_read+0x44>
				data |= (1<<x);
     244:	ba 01       	movw	r22, r20
     246:	08 2e       	mov	r0, r24
     248:	01 c0       	rjmp	.+2      	; 0x24c <gba_eeprom_read+0x3e>
     24a:	66 0f       	add	r22, r22
     24c:	0a 94       	dec	r0
     24e:	ea f7       	brpl	.-6      	; 0x24a <gba_eeprom_read+0x3c>
     250:	26 2b       	or	r18, r22
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	88 f7       	brcc	.-30     	; 0x238 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
     256:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	ec 37       	cpi	r30, 0x7C	; 124
     25c:	f8 07       	cpc	r31, r24
     25e:	49 f7       	brne	.-46     	; 0x232 <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
     260:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
     262:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
     264:	b8 9a       	sbi	0x17, 0	; 23
     266:	08 95       	ret

00000268 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	9d df       	rcall	.-198    	; 0x1a6 <gba_eeprom_set_address>
     26c:	e4 e7       	ldi	r30, 0x74	; 116
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
     272:	27 e0       	ldi	r18, 0x07	; 7
     274:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
     276:	80 81       	ld	r24, Z
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 2e       	mov	r0, r18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <gba_eeprom_write+0x1a>
     27e:	95 95       	asr	r25
     280:	87 95       	ror	r24
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <gba_eeprom_write+0x16>
     286:	80 ff       	sbrs	r24, 0
     288:	02 c0       	rjmp	.+4      	; 0x28e <gba_eeprom_write+0x26>
				ad0Pin_high;
     28a:	c0 9a       	sbi	0x18, 0	; 24
     28c:	01 c0       	rjmp	.+2      	; 0x290 <gba_eeprom_write+0x28>
			}
			else {
				ad0Pin_low;
     28e:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
     290:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
     292:	00 00       	nop
			asm ("nop");
     294:	00 00       	nop
			wrPin_high; 
     296:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
     298:	00 00       	nop
			asm ("nop");
     29a:	00 00       	nop
     29c:	21 50       	subi	r18, 0x01	; 1
     29e:	31 09       	sbc	r19, r1
     2a0:	50 f7       	brcc	.-44     	; 0x276 <gba_eeprom_write+0xe>
     2a2:	41 50       	subi	r20, 0x01	; 1
     2a4:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     2a6:	41 11       	cpse	r20, r1
     2a8:	e4 cf       	rjmp	.-56     	; 0x272 <gba_eeprom_write+0xa>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
     2aa:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
     2ac:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
     2ae:	00 00       	nop
	asm ("nop");
     2b0:	00 00       	nop
	wrPin_high; 
     2b2:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
     2b4:	00 00       	nop
	asm ("nop");
     2b6:	00 00       	nop
	
	cs_mreqPin_high;
     2b8:	94 9a       	sbi	0x12, 4	; 18
     2ba:	08 95       	ret

000002bc <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
     2bc:	cf 93       	push	r28
     2be:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     2c0:	2f ef       	ldi	r18, 0xFF	; 255
     2c2:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     2c4:	ff de       	rcall	.-514    	; 0xc4 <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
     2c6:	c5 bb       	out	0x15, r28	; 21
	
	cs2Pin_low;
     2c8:	3a 98       	cbi	0x07, 2	; 7
	wrPin_low;
     2ca:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     2cc:	00 00       	nop
	cs2Pin_high;
     2ce:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
     2d0:	96 9a       	sbi	0x12, 6	; 18
}
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
     2da:	6a ea       	ldi	r22, 0xAA	; 170
     2dc:	85 e5       	ldi	r24, 0x55	; 85
     2de:	95 e5       	ldi	r25, 0x55	; 85
     2e0:	ed df       	rcall	.-38     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     2e2:	65 e5       	ldi	r22, 0x55	; 85
     2e4:	8a ea       	ldi	r24, 0xAA	; 170
     2e6:	9a e2       	ldi	r25, 0x2A	; 42
     2e8:	e9 df       	rcall	.-46     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
     2ea:	60 e9       	ldi	r22, 0x90	; 144
     2ec:	85 e5       	ldi	r24, 0x55	; 85
     2ee:	95 e5       	ldi	r25, 0x55	; 85
     2f0:	e5 df       	rcall	.-54     	; 0x2bc <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	8f e3       	ldi	r24, 0x3F	; 63
     2f4:	9c e9       	ldi	r25, 0x9C	; 156
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <flash_read_chip_id+0x20>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <flash_read_chip_id+0x26>
     2fc:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     2fe:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     300:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	2d df       	rcall	.-422    	; 0x162 <gba_read_ram_8bit_data>
     308:	c1 e7       	ldi	r28, 0x71	; 113
     30a:	d0 e0       	ldi	r29, 0x00	; 0
     30c:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	27 df       	rcall	.-434    	; 0x162 <gba_read_ram_8bit_data>
     314:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
     316:	6a ea       	ldi	r22, 0xAA	; 170
     318:	85 e5       	ldi	r24, 0x55	; 85
     31a:	95 e5       	ldi	r25, 0x55	; 85
     31c:	cf df       	rcall	.-98     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     31e:	65 e5       	ldi	r22, 0x55	; 85
     320:	8a ea       	ldi	r24, 0xAA	; 170
     322:	9a e2       	ldi	r25, 0x2A	; 42
     324:	cb df       	rcall	.-106    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
     326:	60 ef       	ldi	r22, 0xF0	; 240
     328:	85 e5       	ldi	r24, 0x55	; 85
     32a:	95 e5       	ldi	r25, 0x55	; 85
     32c:	c7 df       	rcall	.-114    	; 0x2bc <flash_write_bus_cycle>
     32e:	8f e3       	ldi	r24, 0x3F	; 63
     330:	9c e9       	ldi	r25, 0x9C	; 156
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <flash_read_chip_id+0x5c>
     336:	00 c0       	rjmp	.+0      	; 0x338 <flash_read_chip_id+0x62>
     338:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
     340:	cf 93       	push	r28
     342:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     344:	6a ea       	ldi	r22, 0xAA	; 170
     346:	85 e5       	ldi	r24, 0x55	; 85
     348:	95 e5       	ldi	r25, 0x55	; 85
     34a:	b8 df       	rcall	.-144    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     34c:	65 e5       	ldi	r22, 0x55	; 85
     34e:	8a ea       	ldi	r24, 0xAA	; 170
     350:	9a e2       	ldi	r25, 0x2A	; 42
     352:	b4 df       	rcall	.-152    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
     354:	60 eb       	ldi	r22, 0xB0	; 176
     356:	85 e5       	ldi	r24, 0x55	; 85
     358:	95 e5       	ldi	r25, 0x55	; 85
     35a:	b0 df       	rcall	.-160    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
     35c:	6c 2f       	mov	r22, r28
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
}
     362:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
     364:	ab cf       	rjmp	.-170    	; 0x2bc <flash_write_bus_cycle>

00000366 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
     366:	cf 93       	push	r28
     368:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     36a:	6a ea       	ldi	r22, 0xAA	; 170
     36c:	85 e5       	ldi	r24, 0x55	; 85
     36e:	95 e5       	ldi	r25, 0x55	; 85
     370:	a5 df       	rcall	.-182    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     372:	65 e5       	ldi	r22, 0x55	; 85
     374:	8a ea       	ldi	r24, 0xAA	; 170
     376:	9a e2       	ldi	r25, 0x2A	; 42
     378:	a1 df       	rcall	.-190    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
     37a:	60 e8       	ldi	r22, 0x80	; 128
     37c:	85 e5       	ldi	r24, 0x55	; 85
     37e:	95 e5       	ldi	r25, 0x55	; 85
     380:	9d df       	rcall	.-198    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
     382:	6a ea       	ldi	r22, 0xAA	; 170
     384:	85 e5       	ldi	r24, 0x55	; 85
     386:	95 e5       	ldi	r25, 0x55	; 85
     388:	99 df       	rcall	.-206    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     38a:	65 e5       	ldi	r22, 0x55	; 85
     38c:	8a ea       	ldi	r24, 0xAA	; 170
     38e:	9a e2       	ldi	r25, 0x2A	; 42
     390:	95 df       	rcall	.-214    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
     392:	60 e3       	ldi	r22, 0x30	; 48
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	9c 2f       	mov	r25, r28
     398:	92 95       	swap	r25
     39a:	90 7f       	andi	r25, 0xF0	; 240
     39c:	8f df       	rcall	.-226    	; 0x2bc <flash_write_bus_cycle>
     39e:	8f e4       	ldi	r24, 0x4F	; 79
     3a0:	93 ec       	ldi	r25, 0xC3	; 195
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <flash_erase_4k_sector+0x3c>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <flash_erase_4k_sector+0x42>
     3a8:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
     3b8:	6a ea       	ldi	r22, 0xAA	; 170
     3ba:	85 e5       	ldi	r24, 0x55	; 85
     3bc:	95 e5       	ldi	r25, 0x55	; 85
     3be:	7e df       	rcall	.-260    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3c0:	65 e5       	ldi	r22, 0x55	; 85
     3c2:	8a ea       	ldi	r24, 0xAA	; 170
     3c4:	9a e2       	ldi	r25, 0x2A	; 42
     3c6:	7a df       	rcall	.-268    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3c8:	60 ea       	ldi	r22, 0xA0	; 160
     3ca:	85 e5       	ldi	r24, 0x55	; 85
     3cc:	95 e5       	ldi	r25, 0x55	; 85
     3ce:	76 df       	rcall	.-276    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
     3d0:	61 2f       	mov	r22, r17
     3d2:	ce 01       	movw	r24, r28
     3d4:	73 df       	rcall	.-282    	; 0x2bc <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d6:	85 e3       	ldi	r24, 0x35	; 53
     3d8:	8a 95       	dec	r24
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <flash_write_byte+0x2a>
     3dc:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	08 95       	ret

000003e6 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     3f4:	6a ea       	ldi	r22, 0xAA	; 170
     3f6:	85 e5       	ldi	r24, 0x55	; 85
     3f8:	95 e5       	ldi	r25, 0x55	; 85
     3fa:	60 df       	rcall	.-320    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3fc:	65 e5       	ldi	r22, 0x55	; 85
     3fe:	8a ea       	ldi	r24, 0xAA	; 170
     400:	9a e2       	ldi	r25, 0x2A	; 42
     402:	5c df       	rcall	.-328    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     404:	60 ea       	ldi	r22, 0xA0	; 160
     406:	85 e5       	ldi	r24, 0x55	; 85
     408:	95 e5       	ldi	r25, 0x55	; 85
     40a:	58 df       	rcall	.-336    	; 0x2bc <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
     40c:	16 95       	lsr	r17
     40e:	10 2f       	mov	r17, r16
     410:	00 27       	eor	r16, r16
     412:	17 95       	ror	r17
     414:	07 95       	ror	r16
     416:	93 e7       	ldi	r25, 0x73	; 115
     418:	e9 2e       	mov	r14, r25
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	f9 2e       	mov	r15, r25
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	d0 e0       	ldi	r29, 0x00	; 0
     422:	f7 01       	movw	r30, r14
     424:	61 91       	ld	r22, Z+
     426:	7f 01       	movw	r14, r30
     428:	ce 01       	movw	r24, r28
     42a:	80 2b       	or	r24, r16
     42c:	91 2b       	or	r25, r17
     42e:	46 df       	rcall	.-372    	; 0x2bc <flash_write_bus_cycle>
     430:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
     432:	c0 38       	cpi	r28, 0x80	; 128
     434:	d1 05       	cpc	r29, r1
     436:	a9 f7       	brne	.-22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     438:	8f e3       	ldi	r24, 0x3F	; 63
     43a:	9c e9       	ldi	r25, 0x9C	; 156
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     442:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	08 95       	ret

00000452 <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
     452:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     454:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
     456:	36 de       	rcall	.-916    	; 0xc4 <set_16bit_address>
	
	rdPin_low;
     458:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     45a:	00 00       	nop
	asm volatile("nop");
     45c:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     45e:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     460:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     462:	08 95       	ret

00000464 <gb_flash_read_byte_fast>:

// No setting address or outputs, assuming already set
uint8_t gb_flash_read_byte_fast(void) {
	rdPin_low;
     464:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     466:	00 00       	nop
	asm volatile("nop");
     468:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     46a:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     46c:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     46e:	08 95       	ret

00000470 <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
     470:	cf 93       	push	r28
     472:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     474:	2f ef       	ldi	r18, 0xFF	; 255
     476:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     478:	25 de       	rcall	.-950    	; 0xc4 <set_16bit_address>
	PORT_DATA7_0 = data;
     47a:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     47c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <flashWriteWePin>
     480:	81 34       	cpi	r24, 0x41	; 65
     482:	31 f4       	brne	.+12     	; 0x490 <gb_flash_write_bus_cycle+0x20>
		audioPin_low; // WE low
     484:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     486:	00 00       	nop
		asm volatile("nop");
     488:	00 00       	nop
		asm volatile("nop");
     48a:	00 00       	nop
		audioPin_high; // WE high
     48c:	39 9a       	sbi	0x07, 1	; 7
     48e:	05 c0       	rjmp	.+10     	; 0x49a <gb_flash_write_bus_cycle+0x2a>
	}
	else { // WR pin
		wrPin_low; // WE low
     490:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     492:	00 00       	nop
		asm volatile("nop");
     494:	00 00       	nop
		asm volatile("nop");
     496:	00 00       	nop
		wrPin_high; // WE high
     498:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
     49a:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     49c:	14 ba       	out	0x14, r1	; 20
}
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <gb_flash_write_bus_cycle_fast>:

void gb_flash_write_bus_cycle_fast(uint16_t address, uint8_t data) {
	PORT_ADDR15_8 = (address >> 8);
     4a2:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     4a4:	88 bb       	out	0x18, r24	; 24
	PORT_DATA7_0 = data;
     4a6:	65 bb       	out	0x15, r22	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     4a8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <flashWriteWePin>
     4ac:	81 34       	cpi	r24, 0x41	; 65
     4ae:	31 f4       	brne	.+12     	; 0x4bc <gb_flash_write_bus_cycle_fast+0x1a>
		audioPin_low; // WE low
     4b0:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     4b2:	00 00       	nop
		asm volatile("nop");
     4b4:	00 00       	nop
		asm volatile("nop");
     4b6:	00 00       	nop
		audioPin_high; // WE high
     4b8:	39 9a       	sbi	0x07, 1	; 7
     4ba:	08 95       	ret
	}
	else { // WR pin
		wrPin_low; // WE low
     4bc:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     4be:	00 00       	nop
		asm volatile("nop");
     4c0:	00 00       	nop
		asm volatile("nop");
     4c2:	00 00       	nop
		wrPin_high; // WE high
     4c4:	96 9a       	sbi	0x12, 6	; 18
     4c6:	08 95       	ret

000004c8 <gb_flash_write_byte>:
	}
}

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	8c 01       	movw	r16, r24
     4d0:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	84 bb       	out	0x14, r24	; 20
	
	gb_flash_write_bus_cycle_fast(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     4d6:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <flashWriteCycle+0x2>
     4da:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flashWriteCycle>
     4de:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <flashWriteCycle+0x1>
     4e2:	df df       	rcall	.-66     	; 0x4a2 <gb_flash_write_bus_cycle_fast>
	gb_flash_write_bus_cycle_fast(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     4e4:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <flashWriteCycle+0x6>
     4e8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <flashWriteCycle+0x4>
     4ec:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <flashWriteCycle+0x5>
     4f0:	d8 df       	rcall	.-80     	; 0x4a2 <gb_flash_write_bus_cycle_fast>
	gb_flash_write_bus_cycle_fast(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     4f2:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <flashWriteCycle+0xa>
     4f6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flashWriteCycle+0x8>
     4fa:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <flashWriteCycle+0x9>
     4fe:	d1 df       	rcall	.-94     	; 0x4a2 <gb_flash_write_bus_cycle_fast>
	gb_flash_write_bus_cycle_fast(address, data);
     500:	6c 2f       	mov	r22, r28
     502:	c8 01       	movw	r24, r16
     504:	ce df       	rcall	.-100    	; 0x4a2 <gb_flash_write_bus_cycle_fast>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     506:	8d e0       	ldi	r24, 0x0D	; 13
     508:	8a 95       	dec	r24
     50a:	f1 f7       	brne	.-4      	; 0x508 <gb_flash_write_byte+0x40>
     50c:	00 00       	nop
	_delay_us(5); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     50e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     510:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte_fast();
     512:	a8 df       	rcall	.-176    	; 0x464 <gb_flash_read_byte_fast>
	while (data != dataVerify) {
     514:	8c 17       	cp	r24, r28
     516:	49 f0       	breq	.+18     	; 0x52a <gb_flash_write_byte+0x62>
		dataVerify = gb_flash_read_byte_fast();
     518:	a5 df       	rcall	.-182    	; 0x464 <gb_flash_read_byte_fast>
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	9a 95       	dec	r25
     51e:	f1 f7       	brne	.-4      	; 0x51c <gb_flash_write_byte+0x54>
     520:	00 c0       	rjmp	.+0      	; 0x522 <gb_flash_write_byte+0x5a>
		_delay_us(1);
		if (writingTimedout == 1) {
     522:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
     526:	91 30       	cpi	r25, 0x01	; 1
     528:	a9 f7       	brne	.-22     	; 0x514 <gb_flash_write_byte+0x4c>
			break;
		}
	}
}
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	08 95       	ret

00000532 <gb_flash_write_byte_special>:

// Set the bank, write a single byte to the Flash address and pulse the reset pin
void gb_flash_write_byte_special(uint16_t address, uint8_t data) {
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	ec 01       	movw	r28, r24
     53a:	16 2f       	mov	r17, r22
	// Set bank back
	if (flashBank1CommandWrites == 1) {
     53c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashBank1CommandWrites>
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	51 f4       	brne	.+20     	; 0x558 <gb_flash_write_byte_special+0x26>
		write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <lastBankAccessed>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	91 e2       	ldi	r25, 0x21	; 33
     54e:	c6 dd       	rcall	.-1140   	; 0xdc <write_8bit_data>
     550:	85 e8       	ldi	r24, 0x85	; 133
     552:	8a 95       	dec	r24
     554:	f1 f7       	brne	.-4      	; 0x552 <gb_flash_write_byte_special+0x20>
     556:	00 00       	nop
		_delay_us(50);
	}
	
	// Write
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     558:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <flashWriteCycle+0x2>
     55c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flashWriteCycle>
     560:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <flashWriteCycle+0x1>
     564:	85 df       	rcall	.-246    	; 0x470 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     566:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <flashWriteCycle+0x6>
     56a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <flashWriteCycle+0x4>
     56e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <flashWriteCycle+0x5>
     572:	7e df       	rcall	.-260    	; 0x470 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     574:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <flashWriteCycle+0xa>
     578:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flashWriteCycle+0x8>
     57c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <flashWriteCycle+0x9>
     580:	77 df       	rcall	.-274    	; 0x470 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     582:	61 2f       	mov	r22, r17
     584:	ce 01       	movw	r24, r28
     586:	74 df       	rcall	.-280    	; 0x470 <gb_flash_write_bus_cycle>
     588:	83 ef       	ldi	r24, 0xF3	; 243
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <gb_flash_write_byte_special+0x5a>
     590:	00 c0       	rjmp	.+0      	; 0x592 <gb_flash_write_byte_special+0x60>
     592:	00 00       	nop
	_delay_us(250); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     594:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     596:	14 ba       	out	0x14, r1	; 20
	
	// Pulse reset
	PORTE &= ~(1<<CS2_PIN);
     598:	3a 98       	cbi	0x07, 2	; 7
     59a:	95 e8       	ldi	r25, 0x85	; 133
     59c:	9a 95       	dec	r25
     59e:	f1 f7       	brne	.-4      	; 0x59c <gb_flash_write_byte_special+0x6a>
     5a0:	00 00       	nop
	_delay_us(50);
	PORTE |= (1<<CS2_PIN);
     5a2:	3a 9a       	sbi	0x07, 2	; 7
     5a4:	85 e8       	ldi	r24, 0x85	; 133
     5a6:	8a 95       	dec	r24
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <gb_flash_write_byte_special+0x74>
     5aa:	00 00       	nop
	_delay_us(50);
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	08 95       	ret

000005b4 <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
     5c0:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
     5c2:	ff 24       	eor	r15, r15
     5c4:	fa 94       	dec	r15
     5c6:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     5c8:	01 e2       	ldi	r16, 0x21	; 33
     5ca:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     5cc:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     5d2:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5d4:	00 00       	nop
	wrPin_high;
     5d6:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     5d8:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <flashWriteCycle+0x2>
     5dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flashWriteCycle>
     5e0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <flashWriteCycle+0x1>
     5e4:	45 df       	rcall	.-374    	; 0x470 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     5e6:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <flashWriteCycle+0x6>
     5ea:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <flashWriteCycle+0x4>
     5ee:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <flashWriteCycle+0x5>
     5f2:	3e df       	rcall	.-388    	; 0x470 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     5f4:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <flashWriteCycle+0xa>
     5f8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flashWriteCycle+0x8>
     5fc:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <flashWriteCycle+0x9>
     600:	37 df       	rcall	.-402    	; 0x470 <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
     602:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     604:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     606:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
     608:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <lastBankAccessed>
     60c:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     60e:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     610:	00 00       	nop
	wrPin_high;
     612:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
     614:	61 2f       	mov	r22, r17
     616:	ce 01       	movw	r24, r28
     618:	2b df       	rcall	.-426    	; 0x470 <gb_flash_write_bus_cycle>
     61a:	8a e1       	ldi	r24, 0x1A	; 26
     61c:	8a 95       	dec	r24
     61e:	f1 f7       	brne	.-4      	; 0x61c <gb_flash_write_byte_bank1_commands+0x68>
     620:	00 c0       	rjmp	.+0      	; 0x622 <gb_flash_write_byte_bank1_commands+0x6e>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     622:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     624:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     626:	ce 01       	movw	r24, r28
     628:	14 df       	rcall	.-472    	; 0x452 <gb_flash_read_byte>
	while (data != dataVerify) {
     62a:	81 17       	cp	r24, r17
     62c:	51 f0       	breq	.+20     	; 0x642 <gb_flash_write_byte_bank1_commands+0x8e>
		dataVerify = gb_flash_read_byte(address);
     62e:	ce 01       	movw	r24, r28
     630:	10 df       	rcall	.-480    	; 0x452 <gb_flash_read_byte>
     632:	9d e0       	ldi	r25, 0x0D	; 13
     634:	9a 95       	dec	r25
     636:	f1 f7       	brne	.-4      	; 0x634 <gb_flash_write_byte_bank1_commands+0x80>
     638:	00 00       	nop
		_delay_us(5);
		if (writingTimedout == 1) {
     63a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
     63e:	91 30       	cpi	r25, 0x01	; 1
     640:	a1 f7       	brne	.-24     	; 0x62a <gb_flash_write_byte_bank1_commands+0x76>
			break;
		}
	}
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	08 95       	ret

0000064e <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     652:	8c 01       	movw	r16, r24
     654:	22 27       	eor	r18, r18
     656:	33 27       	eor	r19, r19
     658:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     65a:	07 2f       	mov	r16, r23
     65c:	18 2f       	mov	r17, r24
     65e:	29 2f       	mov	r18, r25
     660:	33 27       	eor	r19, r19
     662:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     664:	68 bb       	out	0x18, r22	; 24
	
	cs_mreqPin_low;
     666:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
     668:	5b bb       	out	0x1b, r21	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
     66a:	48 bb       	out	0x18, r20	; 24
	
	wrPin_low;
     66c:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     66e:	00 00       	nop
	asm volatile("nop");
     670:	00 00       	nop
	asm volatile("nop");
     672:	00 00       	nop
	wrPin_high;
     674:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     676:	94 9a       	sbi	0x12, 4	; 18
}
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <gba_flash_write_cycle_start_swapped>:

// Send the first 3 write cycles to the flash (swapped D0/D1)
void gba_flash_write_cycle_start_swapped(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     67e:	8f ef       	ldi	r24, 0xFF	; 255
     680:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     682:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     684:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xA9
	GBA_PORT_ROM_ADDR23_16 = 0;
     686:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     688:	95 e0       	ldi	r25, 0x05	; 5
     68a:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     68c:	85 e5       	ldi	r24, 0x55	; 85
     68e:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     690:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     692:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA9;
     694:	29 ea       	ldi	r18, 0xA9	; 169
     696:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     698:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     69a:	00 00       	nop
	asm volatile("nop");
     69c:	00 00       	nop
	asm volatile("nop");
     69e:	00 00       	nop
	wrPin_high;
     6a0:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6a2:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x56
	GBA_PORT_ROM_ADDR23_16 = 0;
     6a4:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     6a6:	22 e0       	ldi	r18, 0x02	; 2
     6a8:	2b bb       	out	0x1b, r18	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     6aa:	2a ea       	ldi	r18, 0xAA	; 170
     6ac:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     6ae:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6b0:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x56;
     6b2:	26 e5       	ldi	r18, 0x56	; 86
     6b4:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     6b6:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6b8:	00 00       	nop
	asm volatile("nop");
     6ba:	00 00       	nop
	asm volatile("nop");
     6bc:	00 00       	nop
	wrPin_high;
     6be:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6c0:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     6c2:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     6c4:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     6c6:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     6c8:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6ca:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     6cc:	80 ea       	ldi	r24, 0xA0	; 160
     6ce:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     6d0:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6d2:	00 00       	nop
	asm volatile("nop");
     6d4:	00 00       	nop
	asm volatile("nop");
     6d6:	00 00       	nop
	wrPin_high;
     6d8:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6da:	94 9a       	sbi	0x12, 4	; 18
     6dc:	08 95       	ret

000006de <gba_flash_write_cycle_start>:


// Send the first 3 write cycles to the flash
void gba_flash_write_cycle_start(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     6e2:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     6e4:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xAA
	GBA_PORT_ROM_ADDR23_16 = 0;
     6e6:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     6e8:	95 e0       	ldi	r25, 0x05	; 5
     6ea:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     6ec:	85 e5       	ldi	r24, 0x55	; 85
     6ee:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     6f0:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6f2:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xAA;
     6f4:	2a ea       	ldi	r18, 0xAA	; 170
     6f6:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     6f8:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6fa:	00 00       	nop
	asm volatile("nop");
     6fc:	00 00       	nop
	asm volatile("nop");
     6fe:	00 00       	nop
	wrPin_high;
     700:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     702:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x55
	GBA_PORT_ROM_ADDR23_16 = 0;
     704:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     706:	32 e0       	ldi	r19, 0x02	; 2
     708:	3b bb       	out	0x1b, r19	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     70a:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     70c:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     70e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x55;
     710:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     712:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     714:	00 00       	nop
	asm volatile("nop");
     716:	00 00       	nop
	asm volatile("nop");
     718:	00 00       	nop
	wrPin_high;
     71a:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     71c:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     71e:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     720:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     722:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     724:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     726:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     728:	80 ea       	ldi	r24, 0xA0	; 160
     72a:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     72c:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     72e:	00 00       	nop
	asm volatile("nop");
     730:	00 00       	nop
	asm volatile("nop");
     732:	00 00       	nop
	wrPin_high;
     734:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     736:	94 9a       	sbi	0x12, 4	; 18
     738:	08 95       	ret

0000073a <gba_flash_write_byte>:
}	


// Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify the correct data has been written.
// Address is divided by 2 as we are in GBA mode. 
void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	6b 01       	movw	r12, r22
     748:	7c 01       	movw	r14, r24
     74a:	ea 01       	movw	r28, r20
	if (isD0D1Swapped == 0) {
     74c:	21 11       	cpse	r18, r1
     74e:	02 c0       	rjmp	.+4      	; 0x754 <gba_flash_write_byte+0x1a>
		gba_flash_write_cycle_start();
     750:	c6 df       	rcall	.-116    	; 0x6de <gba_flash_write_cycle_start>
     752:	01 c0       	rjmp	.+2      	; 0x756 <gba_flash_write_byte+0x1c>
	}
	else {
		gba_flash_write_cycle_start_swapped();
     754:	94 df       	rcall	.-216    	; 0x67e <gba_flash_write_cycle_start_swapped>
	}
	gba_flash_write_bus_cycle(address, data);
     756:	ae 01       	movw	r20, r28
     758:	c7 01       	movw	r24, r14
     75a:	b6 01       	movw	r22, r12
     75c:	78 df       	rcall	.-272    	; 0x64e <gba_flash_write_bus_cycle>
     75e:	25 e0       	ldi	r18, 0x05	; 5
     760:	2a 95       	dec	r18
     762:	f1 f7       	brne	.-4      	; 0x760 <gba_flash_write_byte+0x26>
     764:	00 00       	nop
	_delay_us(2); // Wait byte program time
	
	// Verify data
	uint16_t dataVerify = gba_read_16bit_data(address);
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	ec dc       	rcall	.-1576   	; 0x144 <gba_read_16bit_data>
	while (data != dataVerify) {
     76c:	8c 17       	cp	r24, r28
     76e:	9d 07       	cpc	r25, r29
     770:	59 f0       	breq	.+22     	; 0x788 <gba_flash_write_byte+0x4e>
		dataVerify = gba_read_16bit_data(address);
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	e6 dc       	rcall	.-1588   	; 0x144 <gba_read_16bit_data>
     778:	25 e0       	ldi	r18, 0x05	; 5
     77a:	2a 95       	dec	r18
     77c:	f1 f7       	brne	.-4      	; 0x77a <gba_flash_write_byte+0x40>
     77e:	00 00       	nop
		_delay_us(2);
		if (writingTimedout == 1) {
     780:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
     784:	21 30       	cpi	r18, 0x01	; 1
     786:	91 f7       	brne	.-28     	; 0x76c <gba_flash_write_byte+0x32>
			break;
		}
	}
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	08 95       	ret

00000796 <start_timeout_timer>:

// Timeout for ~500ms when flashing carts
void start_timeout_timer(void) {
	writingTimedout = 0;
     796:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCNT1 = 0;
     79a:	1d bc       	out	0x2d, r1	; 45
     79c:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS11) | (1<<CS10);
     79e:	8e b5       	in	r24, 0x2e	; 46
     7a0:	83 60       	ori	r24, 0x03	; 3
     7a2:	8e bd       	out	0x2e, r24	; 46
     7a4:	08 95       	ret

000007a6 <stop_timeout_timer>:
}

// Stop the flash timeout timer
void stop_timeout_timer(void) {
	writingTimedout = 0;
     7a6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCNT1 = 0;
     7aa:	1d bc       	out	0x2d, r1	; 45
     7ac:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0;
     7ae:	1e bc       	out	0x2e, r1	; 46
	PORTD &= ~(1<<ACTIVITY_LED);
     7b0:	93 98       	cbi	0x12, 3	; 18
     7b2:	08 95       	ret

000007b4 <check_if_timed_out>:
}

// If we didn't time out, stop the timeout timer and send back an ACK
void check_if_timed_out(void) {
	if (writingTimedout == 0) {
     7b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     7b8:	81 11       	cpse	r24, r1
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <check_if_timed_out+0x10>
		stop_timeout_timer();		
     7bc:	f4 df       	rcall	.-24     	; 0x7a6 <stop_timeout_timer>
		USART_Transmit(SEND_ACK); // Send back acknowledgement
     7be:	81 e3       	ldi	r24, 0x31	; 49
     7c0:	50 dc       	rcall	.-1888   	; 0x62 <USART_Transmit>
		PORTD &= ~(1<<ACTIVITY_LED);
     7c2:	93 98       	cbi	0x12, 3	; 18
     7c4:	08 95       	ret

000007c6 <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
     7c6:	84 b7       	in	r24, 0x34	; 52
     7c8:	87 7f       	andi	r24, 0xF7	; 247
     7ca:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
     7cc:	88 e1       	ldi	r24, 0x18	; 24
     7ce:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
     7d0:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
     7d2:	6b dc       	rcall	.-1834   	; 0xaa <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V) | (1<<VOLTAGE_SELECT);
     7d4:	81 b3       	in	r24, 0x11	; 17
     7d6:	8c 6f       	ori	r24, 0xFC	; 252
     7d8:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
     7da:	86 b1       	in	r24, 0x06	; 6
     7dc:	85 60       	ori	r24, 0x05	; 5
     7de:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
     7e0:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     7e2:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
     7e4:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
     7e6:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
     7e8:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
     7ea:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (cartMode == GB_MODE) {
     7ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	19 f4       	brne	.+6      	; 0x7fa <setup+0x34>
		PORTD |= (1<<LED_5V);
     7f4:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
     7f6:	38 98       	cbi	0x07, 0	; 7
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <setup+0x38>
	}
	else {
		PORTE |= (1<<LED_3V);
     7fa:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
     7fc:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
     7fe:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     800:	2f ef       	ldi	r18, 0xFF	; 255
     802:	84 e3       	ldi	r24, 0x34	; 52
     804:	9c e0       	ldi	r25, 0x0C	; 12
     806:	21 50       	subi	r18, 0x01	; 1
     808:	80 40       	sbci	r24, 0x00	; 0
     80a:	90 40       	sbci	r25, 0x00	; 0
     80c:	e1 f7       	brne	.-8      	; 0x806 <setup+0x40>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <setup+0x4a>
     810:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
     812:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
     814:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
     816:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
     818:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
     81a:	54 9a       	sbi	0x0a, 4	; 10
	
	// Timer1 setup
	TIMSK |= (1<<TOIE1);
     81c:	89 b7       	in	r24, 0x39	; 57
     81e:	80 68       	ori	r24, 0x80	; 128
     820:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0;
     822:	1d bc       	out	0x2d, r1	; 45
     824:	1c bc       	out	0x2c, r1	; 44
	
	// Turn on interrupts
	sei();
     826:	78 94       	sei
     828:	08 95       	ret

0000082a <__vector_6>:
		}
	}
}

// Timeout after ~500ms which also blinks the LED
ISR(TIMER1_OVF_vect) {
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
	PORTD ^= (1<<ACTIVITY_LED);
     838:	92 b3       	in	r25, 0x12	; 18
     83a:	88 e0       	ldi	r24, 0x08	; 8
     83c:	89 27       	eor	r24, r25
     83e:	82 bb       	out	0x12, r24	; 18
	writingTimedout = 1;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     846:	9f 91       	pop	r25
     848:	8f 91       	pop	r24
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <main>:
#include <stdlib.h>
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	a7 97       	sbiw	r28, 0x27	; 39
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
	setup();
     868:	ae df       	rcall	.-164    	; 0x7c6 <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	2d a3       	std	Y+37, r18	; 0x25

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     86e:	66 24       	eor	r6, r6
     870:	63 94       	inc	r6


int main(void) {
	setup();
	
	uint32_t address = 0;
     872:	c1 2c       	mov	r12, r1
     874:	d1 2c       	mov	r13, r1
     876:	76 01       	movw	r14, r12
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Wait until ready
				while ((status & 0x80) != 0x80) {
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
     878:	77 24       	eor	r7, r7
     87a:	7a 94       	dec	r7
     87c:	ce 01       	movw	r24, r28
     87e:	81 96       	adiw	r24, 0x21	; 33
     880:	9a a3       	std	Y+34, r25	; 0x22
     882:	89 a3       	std	Y+33, r24	; 0x21
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
     884:	ed a1       	ldd	r30, Y+37	; 0x25
     886:	e1 30       	cpi	r30, 0x01	; 1
     888:	09 f4       	brne	.+2      	; 0x88c <main+0x38>
			rd_wr_csmreq_cs2_reset();
     88a:	0f dc       	rcall	.-2018   	; 0xaa <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     88c:	e6 db       	rcall	.-2100   	; 0x5a <USART_Receive>
     88e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     892:	83 34       	cpi	r24, 0x43	; 67
     894:	19 f4       	brne	.+6      	; 0x89c <main+0x48>
			USART_Transmit(cartMode);
     896:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     89a:	76 c7       	rjmp	.+3820   	; 0x1788 <main+0xf34>
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     89c:	87 34       	cpi	r24, 0x47	; 71
     89e:	29 f4       	brne	.+10     	; 0x8aa <main+0x56>
			gb_mode();
     8a0:	09 dc       	rcall	.-2030   	; 0xb4 <gb_mode>
			stop_timeout_timer();
     8a2:	81 df       	rcall	.-254    	; 0x7a6 <stop_timeout_timer>
			flashBank1CommandWrites = 0; // Reset back to normal
     8a4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flashBank1CommandWrites>
     8a8:	ed cf       	rjmp	.-38     	; 0x884 <main+0x30>
		}
		else if (receivedChar == GBA_CART_MODE) {
     8aa:	87 36       	cpi	r24, 0x67	; 103
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <main+0x5e>
			gba_mode();
     8ae:	2c dc       	rcall	.-1960   	; 0x108 <gba_mode>
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <main+0x6e>
			stop_timeout_timer();
		}
		
		// Switch voltage if requested
		else if (receivedChar == VOLTAGE_3_3V) {
     8b2:	83 33       	cpi	r24, 0x33	; 51
     8b4:	41 f4       	brne	.+16     	; 0x8c6 <main+0x72>
			PORTD &= ~(1<<VOLTAGE_SELECT);
     8b6:	92 98       	cbi	0x12, 2	; 18
			cartMode = GBA_MODE;
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			PORTE |= (1<<LED_3V);
     8be:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
     8c0:	97 98       	cbi	0x12, 7	; 18
			stop_timeout_timer();
     8c2:	71 df       	rcall	.-286    	; 0x7a6 <stop_timeout_timer>
     8c4:	df cf       	rjmp	.-66     	; 0x884 <main+0x30>
		}
		else if (receivedChar == VOLTAGE_5V) {
     8c6:	85 33       	cpi	r24, 0x35	; 53
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <main+0x84>
			PORTD |= (1<<VOLTAGE_SELECT);
     8ca:	92 9a       	sbi	0x12, 2	; 18
			cartMode = GB_MODE;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			PORTD |= (1<<LED_5V);
     8d2:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
     8d4:	38 98       	cbi	0x07, 0	; 7
     8d6:	f5 cf       	rjmp	.-22     	; 0x8c2 <main+0x6e>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     8d8:	81 34       	cpi	r24, 0x41	; 65
     8da:	59 f4       	brne	.+22     	; 0x8f2 <main+0x9e>
			usart_read_chars(); // Read start address
     8dc:	db db       	rcall	.-2122   	; 0x94 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     8de:	40 e1       	ldi	r20, 0x10	; 16
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	83 e7       	ldi	r24, 0x73	; 115
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	79 d7       	rcall	.+3826   	; 0x17de <strtol>
     8ec:	6b 01       	movw	r12, r22
     8ee:	7c 01       	movw	r14, r24
     8f0:	c9 cf       	rjmp	.-110    	; 0x884 <main+0x30>
		}
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     8f2:	82 35       	cpi	r24, 0x52	; 82
     8f4:	f1 f4       	brne	.+60     	; 0x932 <main+0xde>
			gb_mode();
     8f6:	de db       	rcall	.-2116   	; 0xb4 <gb_mode>
			receivedChar = '1';
     8f8:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
     8fa:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
     8fe:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <receivedChar>
     902:	81 33       	cpi	r24, 0x31	; 49
     904:	09 f0       	breq	.+2      	; 0x908 <main+0xb4>
     906:	be cf       	rjmp	.-132    	; 0x884 <main+0x30>
				PORTD |= (1<<ACTIVITY_LED);
     908:	93 9a       	sbi	0x12, 3	; 18
     90a:	00 e0       	ldi	r16, 0x00	; 0
     90c:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     90e:	c8 01       	movw	r24, r16
     910:	8c 0d       	add	r24, r12
     912:	9d 1d       	adc	r25, r13
     914:	da db       	rcall	.-2124   	; 0xca <read_8bit_data>
     916:	a5 db       	rcall	.-2230   	; 0x62 <USART_Transmit>
     918:	0f 5f       	subi	r16, 0xFF	; 255
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     91c:	00 34       	cpi	r16, 0x40	; 64
     91e:	11 05       	cpc	r17, r1
     920:	b1 f7       	brne	.-20     	; 0x90e <main+0xba>
     922:	f0 e4       	ldi	r31, 0x40	; 64
     924:	cf 0e       	add	r12, r31
     926:	d1 1c       	adc	r13, r1
     928:	e1 1c       	adc	r14, r1
     92a:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     92c:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     92e:	95 db       	rcall	.-2262   	; 0x5a <USART_Receive>
     930:	e4 cf       	rjmp	.-56     	; 0x8fa <main+0xa6>
			}
		}
		
		// Read and send 0x4000 bytes of data
		else if (receivedChar == READ_ROM_4000H) {
     932:	81 35       	cpi	r24, 0x51	; 81
     934:	a1 f4       	brne	.+40     	; 0x95e <main+0x10a>
			gb_mode();
     936:	be db       	rcall	.-2180   	; 0xb4 <gb_mode>
			PORTD |= (1<<ACTIVITY_LED);
     938:	93 9a       	sbi	0x12, 3	; 18
			for (uint16_t x = 0; x < 0x4000; x++) {
     93a:	00 e0       	ldi	r16, 0x00	; 0
     93c:	10 e0       	ldi	r17, 0x00	; 0
				USART_Transmit(read_8bit_data(address));
     93e:	c8 01       	movw	r24, r16
     940:	8c 0d       	add	r24, r12
     942:	9d 1d       	adc	r25, r13
     944:	c2 db       	rcall	.-2172   	; 0xca <read_8bit_data>
     946:	8d db       	rcall	.-2278   	; 0x62 <USART_Transmit>
		
		// Read and send 0x4000 bytes of data
		else if (receivedChar == READ_ROM_4000H) {
			gb_mode();
			PORTD |= (1<<ACTIVITY_LED);
			for (uint16_t x = 0; x < 0x4000; x++) {
     948:	0f 5f       	subi	r16, 0xFF	; 255
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	01 15       	cp	r16, r1
     94e:	20 e4       	ldi	r18, 0x40	; 64
     950:	12 07       	cpc	r17, r18
     952:	a9 f7       	brne	.-22     	; 0x93e <main+0xea>
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	d8 0e       	add	r13, r24
     958:	e1 1c       	adc	r14, r1
     95a:	f1 1c       	adc	r15, r1
     95c:	97 c0       	rjmp	.+302    	; 0xa8c <main+0x238>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     95e:	87 35       	cpi	r24, 0x57	; 87
     960:	f1 f4       	brne	.+60     	; 0x99e <main+0x14a>
			gb_mode();
     962:	a8 db       	rcall	.-2224   	; 0xb4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     964:	80 e4       	ldi	r24, 0x40	; 64
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	80 db       	rcall	.-2304   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     96a:	93 9a       	sbi	0x12, 3	; 18
     96c:	f3 e7       	ldi	r31, 0x73	; 115
     96e:	af 2e       	mov	r10, r31
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	bf 2e       	mov	r11, r31
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     978:	f5 01       	movw	r30, r10
     97a:	61 91       	ld	r22, Z+
     97c:	5f 01       	movw	r10, r30
     97e:	c8 01       	movw	r24, r16
     980:	8c 0d       	add	r24, r12
     982:	9d 1d       	adc	r25, r13
     984:	41 e0       	ldi	r20, 0x01	; 1
     986:	aa db       	rcall	.-2220   	; 0xdc <write_8bit_data>
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     98c:	00 34       	cpi	r16, 0x40	; 64
     98e:	11 05       	cpc	r17, r1
     990:	99 f7       	brne	.-26     	; 0x978 <main+0x124>
     992:	f0 e4       	ldi	r31, 0x40	; 64
     994:	cf 0e       	add	r12, r31
     996:	d1 1c       	adc	r13, r1
     998:	e1 1c       	adc	r14, r1
     99a:	f1 1c       	adc	r15, r1
     99c:	31 c4       	rjmp	.+2146   	; 0x1200 <main+0x9ac>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     99e:	82 34       	cpi	r24, 0x42	; 66
     9a0:	e1 f4       	brne	.+56     	; 0x9da <main+0x186>
			gb_mode();
     9a2:	88 db       	rcall	.-2288   	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read start address
     9a4:	77 db       	rcall	.-2322   	; 0x94 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     9a6:	40 e1       	ldi	r20, 0x10	; 16
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	83 e7       	ldi	r24, 0x73	; 115
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	15 d7       	rcall	.+3626   	; 0x17de <strtol>
     9b4:	4b 01       	movw	r8, r22
     9b6:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
     9b8:	50 db       	rcall	.-2400   	; 0x5a <USART_Receive>
     9ba:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
			if (receivedChar == 'B') {
     9be:	82 34       	cpi	r24, 0x42	; 66
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <main+0x170>
     9c2:	60 cf       	rjmp	.-320    	; 0x884 <main+0x30>
				usart_read_chars(); // Read data
     9c4:	67 db       	rcall	.-2354   	; 0x94 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     9c6:	83 e7       	ldi	r24, 0x73	; 115
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	1a d8       	rcall	.-4044   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
     9cc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <lastBankAccessed>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	68 2f       	mov	r22, r24
     9d4:	c4 01       	movw	r24, r8
     9d6:	82 db       	rcall	.-2300   	; 0xdc <write_8bit_data>
     9d8:	55 cf       	rjmp	.-342    	; 0x884 <main+0x30>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     9da:	82 37       	cpi	r24, 0x72	; 114
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <main+0x18e>
     9de:	8a 36       	cpi	r24, 0x6A	; 106
     9e0:	b9 f5       	brne	.+110    	; 0xa50 <main+0x1fc>
			gba_mode();
     9e2:	92 db       	rcall	.-2268   	; 0x108 <gba_mode>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     9e4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <receivedChar>
     9e8:	8a 36       	cpi	r24, 0x6A	; 106
     9ea:	11 f0       	breq	.+4      	; 0x9f0 <main+0x19c>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
     9ec:	10 e2       	ldi	r17, 0x20	; 32
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <main+0x19e>
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
     9f0:	10 e8       	ldi	r17, 0x80	; 128
			}
			
			receivedChar = '1';
     9f2:	81 e3       	ldi	r24, 0x31	; 49
     9f4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
     9f8:	88 24       	eor	r8, r8
     9fa:	8a 94       	dec	r8
     9fc:	81 0e       	add	r8, r17
     9fe:	91 2c       	mov	r9, r1
     a00:	a1 2c       	mov	r10, r1
     a02:	b1 2c       	mov	r11, r1
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	82 1a       	sub	r8, r18
     a08:	92 0a       	sbc	r9, r18
     a0a:	a2 0a       	sbc	r10, r18
     a0c:	b2 0a       	sbc	r11, r18
			while (receivedChar == '1') {
     a0e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <receivedChar>
     a12:	81 33       	cpi	r24, 0x31	; 49
     a14:	09 f0       	breq	.+2      	; 0xa18 <main+0x1c4>
     a16:	36 cf       	rjmp	.-404    	; 0x884 <main+0x30>
				PORTD |= (1<<ACTIVITY_LED);
     a18:	93 9a       	sbi	0x12, 3	; 18
     a1a:	16 01       	movw	r2, r12
     a1c:	27 01       	movw	r4, r14
				
				for (uint8_t x = 0; x < readEnd; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
     a1e:	c2 01       	movw	r24, r4
     a20:	b1 01       	movw	r22, r2
     a22:	90 db       	rcall	.-2272   	; 0x144 <gba_read_16bit_data>
     a24:	09 2f       	mov	r16, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     a26:	1d db       	rcall	.-2502   	; 0x62 <USART_Transmit>
					USART_Transmit(dataRead >> 8);
     a28:	80 2f       	mov	r24, r16
     a2a:	1b db       	rcall	.-2506   	; 0x62 <USART_Transmit>
					
					address++;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	28 1a       	sub	r2, r24
     a30:	38 0a       	sbc	r3, r24
     a32:	48 0a       	sbc	r4, r24
     a34:	58 0a       	sbc	r5, r24
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     a36:	82 2d       	mov	r24, r2
     a38:	8c 19       	sub	r24, r12
     a3a:	81 17       	cp	r24, r17
     a3c:	80 f3       	brcs	.-32     	; 0xa1e <main+0x1ca>
     a3e:	c8 0c       	add	r12, r8
     a40:	d9 1c       	adc	r13, r9
     a42:	ea 1c       	adc	r14, r10
     a44:	fb 1c       	adc	r15, r11
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     a46:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     a48:	08 db       	rcall	.-2544   	; 0x5a <USART_Receive>
     a4a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
     a4e:	df cf       	rjmp	.-66     	; 0xa0e <main+0x1ba>
			}
		}
		
		// Read and send 0x10000 bytes of data
		else if (receivedChar == GBA_READ_ROM_8000H) {
     a50:	8a 35       	cpi	r24, 0x5A	; 90
     a52:	f1 f4       	brne	.+60     	; 0xa90 <main+0x23c>
			gba_mode();
     a54:	59 db       	rcall	.-2382   	; 0x108 <gba_mode>
			
			PORTD |= (1<<ACTIVITY_LED);
     a56:	93 9a       	sbi	0x12, 3	; 18
			gba_set_24bit_address(address);
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	5d db       	rcall	.-2374   	; 0x118 <gba_set_24bit_address>
			cs_mreqPin_low;
     a5e:	94 98       	cbi	0x12, 4	; 18
			
			GBA_PORT_ROM_ADDR15_8 = 0;
     a60:	1b ba       	out	0x1b, r1	; 27
			GBA_PORT_ROM_ADDR7_0 = 0;
     a62:	18 ba       	out	0x18, r1	; 24
			GBA_DDR_ROM_ADDR15_8 = 0;
     a64:	1a ba       	out	0x1a, r1	; 26
			GBA_DDR_ROM_ADDR7_0 = 0;
     a66:	17 ba       	out	0x17, r1	; 23
			
			for (uint16_t x = 0; x < 0x8000; x++) {
     a68:	00 e0       	ldi	r16, 0x00	; 0
     a6a:	10 e0       	ldi	r17, 0x00	; 0
     a6c:	17 fd       	sbrc	r17, 7
     a6e:	0a c0       	rjmp	.+20     	; 0xa84 <main+0x230>
				rdPin_low;
     a70:	95 98       	cbi	0x12, 5	; 18
				asm volatile("nop");
     a72:	00 00       	nop
				
				USART_Transmit(GBA_PIN_ROM_DATA7_0);
     a74:	86 b3       	in	r24, 0x16	; 22
     a76:	f5 da       	rcall	.-2582   	; 0x62 <USART_Transmit>
				USART_Transmit(GBA_PIN_ROM_DATA15_8);
     a78:	89 b3       	in	r24, 0x19	; 25
     a7a:	f3 da       	rcall	.-2586   	; 0x62 <USART_Transmit>
				rdPin_high;
     a7c:	95 9a       	sbi	0x12, 5	; 18
			GBA_PORT_ROM_ADDR15_8 = 0;
			GBA_PORT_ROM_ADDR7_0 = 0;
			GBA_DDR_ROM_ADDR15_8 = 0;
			GBA_DDR_ROM_ADDR7_0 = 0;
			
			for (uint16_t x = 0; x < 0x8000; x++) {
     a7e:	0f 5f       	subi	r16, 0xFF	; 255
     a80:	1f 4f       	sbci	r17, 0xFF	; 255
     a82:	f4 cf       	rjmp	.-24     	; 0xa6c <main+0x218>
				
				USART_Transmit(GBA_PIN_ROM_DATA7_0);
				USART_Transmit(GBA_PIN_ROM_DATA15_8);
				rdPin_high;
			}
			address += 0x8000;
     a84:	90 e8       	ldi	r25, 0x80	; 128
     a86:	d9 0e       	add	r13, r25
     a88:	e1 1c       	adc	r14, r1
     a8a:	f1 1c       	adc	r15, r1
			
			PORTD &= ~(1<<ACTIVITY_LED);
     a8c:	93 98       	cbi	0x12, 3	; 18
     a8e:	fa ce       	rjmp	.-524    	; 0x884 <main+0x30>
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     a90:	8d 36       	cpi	r24, 0x6D	; 109
     a92:	e9 f4       	brne	.+58     	; 0xace <main+0x27a>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     a94:	0f db       	rcall	.-2530   	; 0xb4 <gb_mode>
			
			receivedChar = '1';
     a96:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
     a98:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
     a9c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <receivedChar>
     aa0:	81 33       	cpi	r24, 0x31	; 49
     aa2:	b1 f5       	brne	.+108    	; 0xb10 <main+0x2bc>
				PORTD |= (1<<ACTIVITY_LED);
     aa4:	93 9a       	sbi	0x12, 3	; 18
     aa6:	00 e0       	ldi	r16, 0x00	; 0
     aa8:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     aaa:	c8 01       	movw	r24, r16
     aac:	8c 0d       	add	r24, r12
     aae:	9d 1d       	adc	r25, r13
     ab0:	58 db       	rcall	.-2384   	; 0x162 <gba_read_ram_8bit_data>
     ab2:	d7 da       	rcall	.-2642   	; 0x62 <USART_Transmit>
     ab4:	0f 5f       	subi	r16, 0xFF	; 255
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     ab8:	00 34       	cpi	r16, 0x40	; 64
     aba:	11 05       	cpc	r17, r1
     abc:	b1 f7       	brne	.-20     	; 0xaaa <main+0x256>
     abe:	e0 e4       	ldi	r30, 0x40	; 64
     ac0:	ce 0e       	add	r12, r30
     ac2:	d1 1c       	adc	r13, r1
     ac4:	e1 1c       	adc	r14, r1
     ac6:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     ac8:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     aca:	c7 da       	rcall	.-2674   	; 0x5a <USART_Receive>
     acc:	e5 cf       	rjmp	.-54     	; 0xa98 <main+0x244>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     ace:	87 37       	cpi	r24, 0x77	; 119
     ad0:	09 f5       	brne	.+66     	; 0xb14 <main+0x2c0>
			gb_mode();
     ad2:	f0 da       	rcall	.-2592   	; 0xb4 <gb_mode>
			
			usart_read_bytes(64);
     ad4:	80 e4       	ldi	r24, 0x40	; 64
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	c8 da       	rcall	.-2672   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     ada:	93 9a       	sbi	0x12, 3	; 18
     adc:	e3 e7       	ldi	r30, 0x73	; 115
     ade:	ae 2e       	mov	r10, r30
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	be 2e       	mov	r11, r30
     ae4:	00 e0       	ldi	r16, 0x00	; 0
     ae6:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     ae8:	f5 01       	movw	r30, r10
     aea:	61 91       	ld	r22, Z+
     aec:	5f 01       	movw	r10, r30
     aee:	c8 01       	movw	r24, r16
     af0:	8c 0d       	add	r24, r12
     af2:	9d 1d       	adc	r25, r13
     af4:	3f db       	rcall	.-2434   	; 0x174 <gba_write_ram_8bit_data>
     af6:	0f 5f       	subi	r16, 0xFF	; 255
     af8:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     afa:	00 34       	cpi	r16, 0x40	; 64
     afc:	11 05       	cpc	r17, r1
     afe:	a1 f7       	brne	.-24     	; 0xae8 <main+0x294>
     b00:	f0 e4       	ldi	r31, 0x40	; 64
     b02:	cf 0e       	add	r12, r31
     b04:	d1 1c       	adc	r13, r1
     b06:	e1 1c       	adc	r14, r1
     b08:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     b0a:	81 e3       	ldi	r24, 0x31	; 49
     b0c:	aa da       	rcall	.-2732   	; 0x62 <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
     b0e:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
     b10:	fb da       	rcall	.-2570   	; 0x108 <gba_mode>
     b12:	b8 ce       	rjmp	.-656    	; 0x884 <main+0x30>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     b14:	8f 36       	cpi	r24, 0x6F	; 111
     b16:	31 f4       	brne	.+12     	; 0xb24 <main+0x2d0>
			gb_mode();
     b18:	cd da       	rcall	.-2662   	; 0xb4 <gb_mode>
			
			uint8_t data = USART_Receive();
     b1a:	9f da       	rcall	.-2754   	; 0x5a <USART_Receive>
			gba_write_ram_8bit_data(address, data);
     b1c:	68 2f       	mov	r22, r24
     b1e:	c6 01       	movw	r24, r12
     b20:	29 db       	rcall	.-2478   	; 0x174 <gba_write_ram_8bit_data>
     b22:	23 c0       	rjmp	.+70     	; 0xb6a <main+0x316>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     b24:	89 36       	cpi	r24, 0x69	; 105
     b26:	49 f4       	brne	.+18     	; 0xb3a <main+0x2e6>
			gb_mode();
     b28:	c5 da       	rcall	.-2678   	; 0xb4 <gb_mode>
			
			flash_read_chip_id();
     b2a:	d5 db       	rcall	.-2134   	; 0x2d6 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
     b2c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flashChipIdBuffer>
     b30:	98 da       	rcall	.-2768   	; 0x62 <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
     b32:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <flashChipIdBuffer+0x1>
     b36:	95 da       	rcall	.-2774   	; 0x62 <USART_Transmit>
     b38:	eb cf       	rjmp	.-42     	; 0xb10 <main+0x2bc>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     b3a:	8b 36       	cpi	r24, 0x6B	; 107
     b3c:	49 f4       	brne	.+18     	; 0xb50 <main+0x2fc>
			usart_read_chars(); // Read data
     b3e:	aa da       	rcall	.-2732   	; 0x94 <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     b40:	83 e7       	ldi	r24, 0x73	; 115
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	5d d7       	rcall	.+3770   	; 0x1a00 <atoi>
     b46:	18 2f       	mov	r17, r24
			
			gb_mode();
     b48:	b5 da       	rcall	.-2710   	; 0xb4 <gb_mode>
			flash_switch_bank(bank);
     b4a:	81 2f       	mov	r24, r17
     b4c:	f9 db       	rcall	.-2062   	; 0x340 <flash_switch_bank>
     b4e:	e0 cf       	rjmp	.-64     	; 0xb10 <main+0x2bc>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     b50:	83 37       	cpi	r24, 0x73	; 115
     b52:	69 f4       	brne	.+26     	; 0xb6e <main+0x31a>
			gb_mode();
     b54:	af da       	rcall	.-2722   	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read sector
     b56:	9e da       	rcall	.-2756   	; 0x94 <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     b58:	40 e1       	ldi	r20, 0x10	; 16
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	83 e7       	ldi	r24, 0x73	; 115
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	3c d6       	rcall	.+3192   	; 0x17de <strtol>
     b66:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
     b68:	fe db       	rcall	.-2052   	; 0x366 <flash_erase_4k_sector>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     b6a:	81 e3       	ldi	r24, 0x31	; 49
     b6c:	e4 cf       	rjmp	.-56     	; 0xb36 <main+0x2e2>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     b6e:	82 36       	cpi	r24, 0x62	; 98
     b70:	c1 f4       	brne	.+48     	; 0xba2 <main+0x34e>
			gb_mode();
     b72:	a0 da       	rcall	.-2752   	; 0xb4 <gb_mode>
			
			usart_read_bytes(64);
     b74:	80 e4       	ldi	r24, 0x40	; 64
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	78 da       	rcall	.-2832   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     b7a:	93 9a       	sbi	0x12, 3	; 18
     b7c:	73 e7       	ldi	r23, 0x73	; 115
     b7e:	a7 2e       	mov	r10, r23
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	b7 2e       	mov	r11, r23
     b84:	00 e0       	ldi	r16, 0x00	; 0
     b86:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     b88:	f5 01       	movw	r30, r10
     b8a:	61 91       	ld	r22, Z+
     b8c:	5f 01       	movw	r10, r30
     b8e:	c8 01       	movw	r24, r16
     b90:	8c 0d       	add	r24, r12
     b92:	9d 1d       	adc	r25, r13
     b94:	0c dc       	rcall	.-2024   	; 0x3ae <flash_write_byte>
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     b9a:	00 34       	cpi	r16, 0x40	; 64
     b9c:	11 05       	cpc	r17, r1
     b9e:	a1 f7       	brne	.-24     	; 0xb88 <main+0x334>
     ba0:	af cf       	rjmp	.-162    	; 0xb00 <main+0x2ac>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     ba2:	81 36       	cpi	r24, 0x61	; 97
     ba4:	69 f4       	brne	.+26     	; 0xbc0 <main+0x36c>
			gb_mode();
     ba6:	86 da       	rcall	.-2804   	; 0xb4 <gb_mode>
			
			usart_read_bytes(128);
     ba8:	80 e8       	ldi	r24, 0x80	; 128
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	5e da       	rcall	.-2884   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     bae:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
     bb0:	c6 01       	movw	r24, r12
     bb2:	19 dc       	rcall	.-1998   	; 0x3e6 <flash_write_sector>
			address++;
     bb4:	2f ef       	ldi	r18, 0xFF	; 255
     bb6:	c2 1a       	sub	r12, r18
     bb8:	d2 0a       	sbc	r13, r18
     bba:	e2 0a       	sbc	r14, r18
     bbc:	f2 0a       	sbc	r15, r18
     bbe:	a5 cf       	rjmp	.-182    	; 0xb0a <main+0x2b6>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     bc0:	83 35       	cpi	r24, 0x53	; 83
     bc2:	51 f4       	brne	.+20     	; 0xbd8 <main+0x384>
			usart_read_chars(); // Read size
     bc4:	67 da       	rcall	.-2866   	; 0x94 <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     bc6:	40 e1       	ldi	r20, 0x10	; 16
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	83 e7       	ldi	r24, 0x73	; 115
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	05 d6       	rcall	.+3082   	; 0x17de <strtol>
     bd4:	66 2e       	mov	r6, r22
     bd6:	56 ce       	rjmp	.-852    	; 0x884 <main+0x30>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     bd8:	85 36       	cpi	r24, 0x65	; 101
     bda:	01 f5       	brne	.+64     	; 0xc1c <main+0x3c8>
			gba_eeprom_mode();
     bdc:	db da       	rcall	.-2634   	; 0x194 <gba_eeprom_mode>
			
			receivedChar = '1';
     bde:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
     be0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
			gba_eeprom_mode();
			
			receivedChar = '1';
			while (receivedChar == '1') {
     be4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <receivedChar>
     be8:	81 33       	cpi	r24, 0x31	; 49
     bea:	09 f0       	breq	.+2      	; 0xbee <main+0x39a>
     bec:	91 cf       	rjmp	.-222    	; 0xb10 <main+0x2bc>
				PORTD |= (1<<ACTIVITY_LED);
     bee:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
     bf0:	66 2d       	mov	r22, r6
     bf2:	c6 01       	movw	r24, r12
     bf4:	0c db       	rcall	.-2536   	; 0x20e <gba_eeprom_read>
     bf6:	04 e7       	ldi	r16, 0x74	; 116
     bf8:	11 e0       	ldi	r17, 0x01	; 1
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     bfa:	f8 01       	movw	r30, r16
     bfc:	81 91       	ld	r24, Z+
     bfe:	8f 01       	movw	r16, r30
     c00:	30 da       	rcall	.-2976   	; 0x62 <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     c02:	8c e7       	ldi	r24, 0x7C	; 124
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	80 17       	cp	r24, r16
     c08:	91 07       	cpc	r25, r17
     c0a:	b9 f7       	brne	.-18     	; 0xbfa <main+0x3a6>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     c0c:	9f ef       	ldi	r25, 0xFF	; 255
     c0e:	c9 1a       	sub	r12, r25
     c10:	d9 0a       	sbc	r13, r25
     c12:	e9 0a       	sbc	r14, r25
     c14:	f9 0a       	sbc	r15, r25
				
				PORTD &= ~(1<<ACTIVITY_LED);
     c16:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     c18:	20 da       	rcall	.-3008   	; 0x5a <USART_Receive>
     c1a:	e2 cf       	rjmp	.-60     	; 0xbe0 <main+0x38c>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     c1c:	80 37       	cpi	r24, 0x70	; 112
     c1e:	e1 f4       	brne	.+56     	; 0xc58 <main+0x404>
			gba_eeprom_mode();
     c20:	b9 da       	rcall	.-2702   	; 0x194 <gba_eeprom_mode>
     c22:	04 e7       	ldi	r16, 0x74	; 116
     c24:	11 e0       	ldi	r17, 0x01	; 1
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     c26:	19 da       	rcall	.-3022   	; 0x5a <USART_Receive>
     c28:	f8 01       	movw	r30, r16
     c2a:	81 93       	st	Z+, r24
     c2c:	8f 01       	movw	r16, r30
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     c2e:	8c e7       	ldi	r24, 0x7C	; 124
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	8e 17       	cp	r24, r30
     c34:	9f 07       	cpc	r25, r31
     c36:	b9 f7       	brne	.-18     	; 0xc26 <main+0x3d2>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
     c38:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
     c3a:	66 2d       	mov	r22, r6
     c3c:	c6 01       	movw	r24, r12
     c3e:	14 db       	rcall	.-2520   	; 0x268 <gba_eeprom_write>
			address++;
     c40:	9f ef       	ldi	r25, 0xFF	; 255
     c42:	c9 1a       	sub	r12, r25
     c44:	d9 0a       	sbc	r13, r25
     c46:	e9 0a       	sbc	r14, r25
     c48:	f9 0a       	sbc	r15, r25
     c4a:	ef e7       	ldi	r30, 0x7F	; 127
     c4c:	fe e3       	ldi	r31, 0x3E	; 62
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <main+0x3fa>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <main+0x400>
     c54:	00 00       	nop
     c56:	59 cf       	rjmp	.-334    	; 0xb0a <main+0x2b6>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     c58:	80 35       	cpi	r24, 0x50	; 80
     c5a:	49 f4       	brne	.+18     	; 0xc6e <main+0x41a>
			flashWriteWePin = USART_Receive();
     c5c:	fe d9       	rcall	.-3076   	; 0x5a <USART_Receive>
     c5e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     c62:	81 34       	cpi	r24, 0x41	; 65
     c64:	09 f0       	breq	.+2      	; 0xc68 <main+0x414>
     c66:	0e ce       	rjmp	.-996    	; 0x884 <main+0x30>
				DDRE |= (1<<AUDIO_PIN);
     c68:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
     c6a:	39 9a       	sbi	0x07, 1	; 7
     c6c:	0b ce       	rjmp	.-1002   	; 0x884 <main+0x30>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
     c6e:	8e 34       	cpi	r24, 0x4E	; 78
     c70:	21 f4       	brne	.+8      	; 0xc7a <main+0x426>
			flashBank1CommandWrites = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flashBank1CommandWrites>
     c78:	05 ce       	rjmp	.-1014   	; 0x884 <main+0x30>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     c7a:	85 34       	cpi	r24, 0x45	; 69
     c7c:	21 f5       	brne	.+72     	; 0xcc6 <main+0x472>
     c7e:	05 e6       	ldi	r16, 0x65	; 101
     c80:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     c82:	08 da       	rcall	.-3056   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     c84:	40 e1       	ldi	r20, 0x10	; 16
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	83 e7       	ldi	r24, 0x73	; 115
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a6 d5       	rcall	.+2892   	; 0x17de <strtol>
     c92:	f8 01       	movw	r30, r16
     c94:	71 83       	std	Z+1, r23	; 0x01
     c96:	60 83       	st	Z, r22
				USART_Transmit(SEND_ACK);
     c98:	81 e3       	ldi	r24, 0x31	; 49
     c9a:	e3 d9       	rcall	.-3130   	; 0x62 <USART_Transmit>
				
				usart_read_chars(); // Data
     c9c:	fb d9       	rcall	.-3082   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     c9e:	40 e1       	ldi	r20, 0x10	; 16
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	83 e7       	ldi	r24, 0x73	; 115
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	99 d5       	rcall	.+2866   	; 0x17de <strtol>
     cac:	f8 01       	movw	r30, r16
     cae:	73 83       	std	Z+3, r23	; 0x03
     cb0:	62 83       	std	Z+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
     cb2:	81 e3       	ldi	r24, 0x31	; 49
     cb4:	d6 d9       	rcall	.-3156   	; 0x62 <USART_Transmit>
     cb6:	0c 5f       	subi	r16, 0xFC	; 252
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     cba:	81 e7       	ldi	r24, 0x71	; 113
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	80 17       	cp	r24, r16
     cc0:	91 07       	cpc	r25, r17
     cc2:	f9 f6       	brne	.-66     	; 0xc82 <main+0x42e>
     cc4:	df cd       	rjmp	.-1090   	; 0x884 <main+0x30>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     cc6:	86 34       	cpi	r24, 0x46	; 70
     cc8:	b1 f4       	brne	.+44     	; 0xcf6 <main+0x4a2>
			usart_read_chars(); // Read address
     cca:	e4 d9       	rcall	.-3128   	; 0x94 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     ccc:	40 e1       	ldi	r20, 0x10	; 16
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	83 e7       	ldi	r24, 0x73	; 115
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	82 d5       	rcall	.+2820   	; 0x17de <strtol>
     cda:	4b 01       	movw	r8, r22
     cdc:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
     cde:	da d9       	rcall	.-3148   	; 0x94 <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     ce0:	40 e1       	ldi	r20, 0x10	; 16
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	83 e7       	ldi	r24, 0x73	; 115
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	78 d5       	rcall	.+2800   	; 0x17de <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     cee:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     cf0:	c4 01       	movw	r24, r8
     cf2:	be db       	rcall	.-2180   	; 0x470 <gb_flash_write_bus_cycle>
     cf4:	85 c2       	rjmp	.+1290   	; 0x1200 <main+0x9ac>
			
			USART_Transmit(SEND_ACK);
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     cf6:	84 35       	cpi	r24, 0x54	; 84
     cf8:	99 f5       	brne	.+102    	; 0xd60 <main+0x50c>
			usart_read_bytes(64);
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	b5 d9       	rcall	.-3222   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
     d00:	4a dd       	rcall	.-1388   	; 0x796 <start_timeout_timer>
			
			PORTD |= (1<<ACTIVITY_LED);
     d02:	93 9a       	sbi	0x12, 3	; 18
			if (flashBank1CommandWrites == 0) {
     d04:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashBank1CommandWrites>
     d08:	63 e7       	ldi	r22, 0x73	; 115
     d0a:	a6 2e       	mov	r10, r22
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	b6 2e       	mov	r11, r22
     d10:	00 e0       	ldi	r16, 0x00	; 0
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	81 11       	cpse	r24, r1
     d16:	1a c0       	rjmp	.+52     	; 0xd4c <main+0x4f8>
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
     d18:	f5 01       	movw	r30, r10
     d1a:	61 91       	ld	r22, Z+
     d1c:	5f 01       	movw	r10, r30
     d1e:	6f 3f       	cpi	r22, 0xFF	; 255
     d20:	21 f0       	breq	.+8      	; 0xd2a <main+0x4d6>
						gb_flash_write_byte(address, receivedBuffer[x]);
     d22:	c8 01       	movw	r24, r16
     d24:	8c 0d       	add	r24, r12
     d26:	9d 1d       	adc	r25, r13
     d28:	cf db       	rcall	.-2146   	; 0x4c8 <gb_flash_write_byte>
     d2a:	0f 5f       	subi	r16, 0xFF	; 255
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
			usart_read_bytes(64);
			start_timeout_timer();
			
			PORTD |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
     d2e:	00 34       	cpi	r16, 0x40	; 64
     d30:	11 05       	cpc	r17, r1
     d32:	91 f7       	brne	.-28     	; 0xd18 <main+0x4c4>
     d34:	20 e4       	ldi	r18, 0x40	; 64
     d36:	c2 0e       	add	r12, r18
     d38:	d1 1c       	adc	r13, r1
     d3a:	e1 1c       	adc	r14, r1
     d3c:	f1 1c       	adc	r15, r1
     d3e:	0e c5       	rjmp	.+2588   	; 0x175c <main+0xf08>
     d40:	0f 5f       	subi	r16, 0xFF	; 255
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
					}
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
     d44:	00 34       	cpi	r16, 0x40	; 64
     d46:	11 05       	cpc	r17, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <main+0x4f8>
     d4a:	de c0       	rjmp	.+444    	; 0xf08 <main+0x6b4>
					if (receivedBuffer[x] != 0xFF) {
     d4c:	f5 01       	movw	r30, r10
     d4e:	61 91       	ld	r22, Z+
     d50:	5f 01       	movw	r10, r30
     d52:	6f 3f       	cpi	r22, 0xFF	; 255
     d54:	a9 f3       	breq	.-22     	; 0xd40 <main+0x4ec>
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     d56:	c8 01       	movw	r24, r16
     d58:	8c 0d       	add	r24, r12
     d5a:	9d 1d       	adc	r25, r13
     d5c:	2b dc       	rcall	.-1962   	; 0x5b4 <gb_flash_write_byte_bank1_commands>
     d5e:	f0 cf       	rjmp	.-32     	; 0xd40 <main+0x4ec>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
     d60:	89 35       	cpi	r24, 0x59	; 89
     d62:	09 f0       	breq	.+2      	; 0xd66 <main+0x512>
     d64:	4e c0       	rjmp	.+156    	; 0xe02 <main+0x5ae>
			usart_read_bytes(32);
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	7f d9       	rcall	.-3330   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
     d6c:	14 dd       	rcall	.-1496   	; 0x796 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
     d6e:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
     d70:	6a ea       	ldi	r22, 0xAA	; 170
     d72:	8a ea       	ldi	r24, 0xAA	; 170
     d74:	9a e0       	ldi	r25, 0x0A	; 10
     d76:	7c db       	rcall	.-2312   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
     d78:	65 e5       	ldi	r22, 0x55	; 85
     d7a:	85 e5       	ldi	r24, 0x55	; 85
     d7c:	95 e0       	ldi	r25, 0x05	; 5
     d7e:	78 db       	rcall	.-2320   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
     d80:	56 01       	movw	r10, r12
     d82:	65 e2       	ldi	r22, 0x25	; 37
     d84:	c6 01       	movw	r24, r12
     d86:	74 db       	rcall	.-2328   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
     d88:	6f e1       	ldi	r22, 0x1F	; 31
     d8a:	c6 01       	movw	r24, r12
     d8c:	71 db       	rcall	.-2334   	; 0x470 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	8a 95       	dec	r24
     d92:	f1 f7       	brne	.-4      	; 0xd90 <main+0x53c>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <main+0x542>
     d96:	03 e7       	ldi	r16, 0x73	; 115
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	81 2c       	mov	r8, r1
     d9c:	91 2c       	mov	r9, r1
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     d9e:	f8 01       	movw	r30, r16
     da0:	61 91       	ld	r22, Z+
     da2:	8f 01       	movw	r16, r30
     da4:	c5 01       	movw	r24, r10
     da6:	88 0d       	add	r24, r8
     da8:	99 1d       	adc	r25, r9
     daa:	62 db       	rcall	.-2364   	; 0x470 <gb_flash_write_bus_cycle>
     dac:	ff ef       	ldi	r31, 0xFF	; 255
     dae:	8f 1a       	sub	r8, r31
     db0:	9f 0a       	sbc	r9, r31
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
     db2:	20 e2       	ldi	r18, 0x20	; 32
     db4:	82 16       	cp	r8, r18
     db6:	91 04       	cpc	r9, r1
     db8:	91 f7       	brne	.-28     	; 0xd9e <main+0x54a>
     dba:	80 e2       	ldi	r24, 0x20	; 32
     dbc:	c8 0e       	add	r12, r24
     dbe:	d1 1c       	adc	r13, r1
     dc0:	e1 1c       	adc	r14, r1
     dc2:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
     dc4:	c6 01       	movw	r24, r12
     dc6:	80 97       	sbiw	r24, 0x20	; 32
     dc8:	69 e2       	ldi	r22, 0x29	; 41
     dca:	52 db       	rcall	.-2396   	; 0x470 <gb_flash_write_bus_cycle>
     dcc:	ef e8       	ldi	r30, 0x8F	; 143
     dce:	f1 e0       	ldi	r31, 0x01	; 1
     dd0:	31 97       	sbiw	r30, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <main+0x57c>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <main+0x582>
     dd6:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     dd8:	86 01       	movw	r16, r12
     dda:	01 50       	subi	r16, 0x01	; 1
     ddc:	11 09       	sbc	r17, r1
     dde:	c8 01       	movw	r24, r16
     de0:	38 db       	rcall	.-2448   	; 0x452 <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[31]) {
     de2:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <receivedBuffer+0x1f>
     de6:	89 17       	cp	r24, r25
     de8:	09 f4       	brne	.+2      	; 0xdec <main+0x598>
     dea:	b8 c4       	rjmp	.+2416   	; 0x175c <main+0xf08>
				dataVerify = gb_flash_read_byte(address-1);
     dec:	c8 01       	movw	r24, r16
     dee:	31 db       	rcall	.-2462   	; 0x452 <gb_flash_read_byte>
     df0:	fd e0       	ldi	r31, 0x0D	; 13
     df2:	fa 95       	dec	r31
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <main+0x59e>
     df6:	00 00       	nop
				_delay_us(5);
				if (writingTimedout == 1) {
     df8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
     dfc:	91 30       	cpi	r25, 0x01	; 1
     dfe:	89 f7       	brne	.-30     	; 0xde2 <main+0x58e>
     e00:	ad c4       	rjmp	.+2394   	; 0x175c <main+0xf08>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_256BYTE) {
     e02:	85 35       	cpi	r24, 0x55	; 85
     e04:	09 f0       	breq	.+2      	; 0xe08 <main+0x5b4>
     e06:	65 c0       	rjmp	.+202    	; 0xed2 <main+0x67e>
			usart_read_bytes(256);
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	2e d9       	rcall	.-3492   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
     e0e:	c3 dc       	rcall	.-1658   	; 0x796 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
     e10:	93 9a       	sbi	0x12, 3	; 18
     e12:	43 e7       	ldi	r20, 0x73	; 115
     e14:	84 2e       	mov	r8, r20
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	94 2e       	mov	r9, r20
     e1a:	58 e0       	ldi	r21, 0x08	; 8
     e1c:	35 2e       	mov	r3, r21
     e1e:	ce 01       	movw	r24, r28
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	2c 01       	movw	r4, r24
     e24:	fc 01       	movw	r30, r24
     e26:	d4 01       	movw	r26, r8
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
					localBuffer[x] = receivedBuffer[byteCounter];
     e28:	8d 91       	ld	r24, X+
     e2a:	81 93       	st	Z+, r24
			
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
     e2c:	89 a1       	ldd	r24, Y+33	; 0x21
     e2e:	9a a1       	ldd	r25, Y+34	; 0x22
     e30:	8e 17       	cp	r24, r30
     e32:	9f 07       	cpc	r25, r31
     e34:	c9 f7       	brne	.-14     	; 0xe28 <main+0x5d4>
					localBuffer[x] = receivedBuffer[byteCounter];
					byteCounter++;
				}
				
				// Setup buffered write
				gb_flash_write_bus_cycle(0xAAA, 0xAA);
     e36:	6a ea       	ldi	r22, 0xAA	; 170
     e38:	8a ea       	ldi	r24, 0xAA	; 170
     e3a:	9a e0       	ldi	r25, 0x0A	; 10
     e3c:	19 db       	rcall	.-2510   	; 0x470 <gb_flash_write_bus_cycle>
				gb_flash_write_bus_cycle(0x555, 0x55);
     e3e:	65 e5       	ldi	r22, 0x55	; 85
     e40:	85 e5       	ldi	r24, 0x55	; 85
     e42:	95 e0       	ldi	r25, 0x05	; 5
     e44:	15 db       	rcall	.-2518   	; 0x470 <gb_flash_write_bus_cycle>
				gb_flash_write_bus_cycle(address, 0x25);
     e46:	56 01       	movw	r10, r12
     e48:	65 e2       	ldi	r22, 0x25	; 37
     e4a:	c6 01       	movw	r24, r12
     e4c:	11 db       	rcall	.-2526   	; 0x470 <gb_flash_write_bus_cycle>
				gb_flash_write_bus_cycle(address, 0x1F); // Length
     e4e:	6f e1       	ldi	r22, 0x1F	; 31
     e50:	c6 01       	movw	r24, r12
     e52:	0e db       	rcall	.-2532   	; 0x470 <gb_flash_write_bus_cycle>
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	9a 95       	dec	r25
     e58:	f1 f7       	brne	.-4      	; 0xe56 <main+0x602>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <main+0x608>
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	10 e0       	ldi	r17, 0x00	; 0
				_delay_us(1);
				
				// Write data
				for (uint8_t x = 0; x < 32; x++) {
					gb_flash_write_bus_cycle(address, localBuffer[x]);
     e60:	f2 01       	movw	r30, r4
     e62:	61 91       	ld	r22, Z+
     e64:	2f 01       	movw	r4, r30
     e66:	c5 01       	movw	r24, r10
     e68:	80 0f       	add	r24, r16
     e6a:	91 1f       	adc	r25, r17
     e6c:	01 db       	rcall	.-2558   	; 0x470 <gb_flash_write_bus_cycle>
     e6e:	0f 5f       	subi	r16, 0xFF	; 255
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
				gb_flash_write_bus_cycle(address, 0x25);
				gb_flash_write_bus_cycle(address, 0x1F); // Length
				_delay_us(1);
				
				// Write data
				for (uint8_t x = 0; x < 32; x++) {
     e72:	00 32       	cpi	r16, 0x20	; 32
     e74:	11 05       	cpc	r17, r1
     e76:	a1 f7       	brne	.-24     	; 0xe60 <main+0x60c>
     e78:	f0 e2       	ldi	r31, 0x20	; 32
     e7a:	cf 0e       	add	r12, r31
     e7c:	d1 1c       	adc	r13, r1
     e7e:	e1 1c       	adc	r14, r1
     e80:	f1 1c       	adc	r15, r1
					gb_flash_write_bus_cycle(address, localBuffer[x]);
					address++;
				}
				
				// Write buffer to flash
				gb_flash_write_bus_cycle(address-32, 0x29);
     e82:	c6 01       	movw	r24, r12
     e84:	80 97       	sbiw	r24, 0x20	; 32
     e86:	69 e2       	ldi	r22, 0x29	; 41
     e88:	f3 da       	rcall	.-2586   	; 0x470 <gb_flash_write_bus_cycle>
     e8a:	8f e8       	ldi	r24, 0x8F	; 143
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <main+0x63a>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <main+0x640>
     e94:	00 00       	nop
     e96:	86 01       	movw	r16, r12
     e98:	01 50       	subi	r16, 0x01	; 1
     e9a:	11 09       	sbc	r17, r1
				_delay_us(200);
				
				// Verify last byte written
				uint8_t dataVerify = gb_flash_read_byte(address-1);
     e9c:	c8 01       	movw	r24, r16
     e9e:	d9 da       	rcall	.-2638   	; 0x452 <gb_flash_read_byte>
				while (dataVerify != localBuffer[31]) {
     ea0:	98 a1       	ldd	r25, Y+32	; 0x20
     ea2:	89 17       	cp	r24, r25
     ea4:	51 f0       	breq	.+20     	; 0xeba <main+0x666>
					dataVerify = gb_flash_read_byte(address-1);
     ea6:	c8 01       	movw	r24, r16
     ea8:	d4 da       	rcall	.-2648   	; 0x452 <gb_flash_read_byte>
     eaa:	9d e0       	ldi	r25, 0x0D	; 13
     eac:	9a 95       	dec	r25
     eae:	f1 f7       	brne	.-4      	; 0xeac <main+0x658>
     eb0:	00 00       	nop
					_delay_us(5);
					if (writingTimedout == 1) {
     eb2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
     eb6:	91 30       	cpi	r25, 0x01	; 1
     eb8:	99 f7       	brne	.-26     	; 0xea0 <main+0x64c>
						break;
					}
				}
				if (writingTimedout == 1) {
     eba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <main+0x670>
     ec2:	4c c4       	rjmp	.+2200   	; 0x175c <main+0xf08>
     ec4:	3a 94       	dec	r3
     ec6:	e0 e2       	ldi	r30, 0x20	; 32
     ec8:	8e 0e       	add	r8, r30
     eca:	91 1c       	adc	r9, r1
			usart_read_bytes(256);
			start_timeout_timer();
			PORTD |= (1<<ACTIVITY_LED);
			
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
     ecc:	31 10       	cpse	r3, r1
     ece:	a7 cf       	rjmp	.-178    	; 0xe1e <main+0x5ca>
     ed0:	45 c4       	rjmp	.+2186   	; 0x175c <main+0xf08>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
     ed2:	8a 34       	cpi	r24, 0x4A	; 74
     ed4:	f9 f4       	brne	.+62     	; 0xf14 <main+0x6c0>
			usart_read_bytes(64);
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	c7 d8       	rcall	.-3698   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
     edc:	5c dc       	rcall	.-1864   	; 0x796 <start_timeout_timer>
			
			PORTD |= (1<<ACTIVITY_LED);
     ede:	93 9a       	sbi	0x12, 3	; 18
     ee0:	33 e7       	ldi	r19, 0x73	; 115
     ee2:	a3 2e       	mov	r10, r19
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	b3 2e       	mov	r11, r19
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
     eec:	f5 01       	movw	r30, r10
     eee:	61 91       	ld	r22, Z+
     ef0:	5f 01       	movw	r10, r30
     ef2:	6f 3f       	cpi	r22, 0xFF	; 255
     ef4:	21 f0       	breq	.+8      	; 0xefe <main+0x6aa>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
     ef6:	c8 01       	movw	r24, r16
     ef8:	8c 0d       	add	r24, r12
     efa:	9d 1d       	adc	r25, r13
     efc:	1a db       	rcall	.-2508   	; 0x532 <gb_flash_write_byte_special>
     efe:	0f 5f       	subi	r16, 0xFF	; 255
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			start_timeout_timer();
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     f02:	00 34       	cpi	r16, 0x40	; 64
     f04:	11 05       	cpc	r17, r1
     f06:	91 f7       	brne	.-28     	; 0xeec <main+0x698>
     f08:	f0 e4       	ldi	r31, 0x40	; 64
     f0a:	cf 0e       	add	r12, r31
     f0c:	d1 1c       	adc	r13, r1
     f0e:	e1 1c       	adc	r14, r1
     f10:	f1 1c       	adc	r15, r1
     f12:	24 c4       	rjmp	.+2120   	; 0x175c <main+0xf08>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
     f14:	88 35       	cpi	r24, 0x58	; 88
     f16:	09 f0       	breq	.+2      	; 0xf1a <main+0x6c6>
     f18:	47 c0       	rjmp	.+142    	; 0xfa8 <main+0x754>
			usart_read_bytes(256);
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	a5 d8       	rcall	.-3766   	; 0x6a <usart_read_bytes>
			start_timeout_timer();
     f20:	3a dc       	rcall	.-1932   	; 0x796 <start_timeout_timer>
			PORTD |= (1<<ACTIVITY_LED);
     f22:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
     f24:	69 ea       	ldi	r22, 0xA9	; 169
     f26:	8a ea       	ldi	r24, 0xAA	; 170
     f28:	9a e0       	ldi	r25, 0x0A	; 10
     f2a:	a2 da       	rcall	.-2748   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
     f2c:	66 e5       	ldi	r22, 0x56	; 86
     f2e:	85 e5       	ldi	r24, 0x55	; 85
     f30:	95 e0       	ldi	r25, 0x05	; 5
     f32:	9e da       	rcall	.-2756   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
     f34:	56 01       	movw	r10, r12
     f36:	66 e2       	ldi	r22, 0x26	; 38
     f38:	c6 01       	movw	r24, r12
     f3a:	9a da       	rcall	.-2764   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
     f3c:	6f ef       	ldi	r22, 0xFF	; 255
     f3e:	c6 01       	movw	r24, r12
     f40:	97 da       	rcall	.-2770   	; 0x470 <gb_flash_write_bus_cycle>
     f42:	25 e8       	ldi	r18, 0x85	; 133
     f44:	2a 95       	dec	r18
     f46:	f1 f7       	brne	.-4      	; 0xf44 <main+0x6f0>
     f48:	00 00       	nop
     f4a:	03 e7       	ldi	r16, 0x73	; 115
     f4c:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     f4e:	81 2c       	mov	r8, r1
     f50:	91 2c       	mov	r9, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     f52:	f8 01       	movw	r30, r16
     f54:	61 91       	ld	r22, Z+
     f56:	8f 01       	movw	r16, r30
     f58:	c4 01       	movw	r24, r8
     f5a:	8a 0d       	add	r24, r10
     f5c:	9b 1d       	adc	r25, r11
     f5e:	88 da       	rcall	.-2800   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     f60:	ff ef       	ldi	r31, 0xFF	; 255
     f62:	8f 1a       	sub	r8, r31
     f64:	9f 0a       	sbc	r9, r31
     f66:	81 14       	cp	r8, r1
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	92 06       	cpc	r9, r18
     f6c:	91 f7       	brne	.-28     	; 0xf52 <main+0x6fe>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	d8 1a       	sub	r13, r24
     f72:	e8 0a       	sbc	r14, r24
     f74:	f8 0a       	sbc	r15, r24
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
     f76:	c6 01       	movw	r24, r12
     f78:	9a 95       	dec	r25
     f7a:	6a e2       	ldi	r22, 0x2A	; 42
     f7c:	79 da       	rcall	.-2830   	; 0x470 <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     f7e:	86 01       	movw	r16, r12
     f80:	01 50       	subi	r16, 0x01	; 1
     f82:	11 09       	sbc	r17, r1
     f84:	c8 01       	movw	r24, r16
     f86:	65 da       	rcall	.-2870   	; 0x452 <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
     f88:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <receivedBuffer+0xff>
     f8c:	89 17       	cp	r24, r25
     f8e:	09 f4       	brne	.+2      	; 0xf92 <main+0x73e>
     f90:	e5 c3       	rjmp	.+1994   	; 0x175c <main+0xf08>
				dataVerify = gb_flash_read_byte(address-1);
     f92:	c8 01       	movw	r24, r16
     f94:	5e da       	rcall	.-2884   	; 0x452 <gb_flash_read_byte>
     f96:	9d e0       	ldi	r25, 0x0D	; 13
     f98:	9a 95       	dec	r25
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <main+0x744>
     f9c:	00 00       	nop
				_delay_us(5);
				if (writingTimedout == 1) {
     f9e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
     fa2:	91 30       	cpi	r25, 0x01	; 1
     fa4:	89 f7       	brne	.-30     	; 0xf88 <main+0x734>
     fa6:	da c3       	rjmp	.+1972   	; 0x175c <main+0xf08>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
     fa8:	8a 37       	cpi	r24, 0x7A	; 122
     faa:	09 f0       	breq	.+2      	; 0xfae <main+0x75a>
     fac:	bc c0       	rjmp	.+376    	; 0x1126 <main+0x8d2>
			usart_read_bytes(128);
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	5b d8       	rcall	.-3914   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     fb4:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
     fb6:	69 e0       	ldi	r22, 0x09	; 9
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	59 da       	rcall	.-2894   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
     fbe:	6a ea       	ldi	r22, 0xAA	; 170
     fc0:	81 e2       	ldi	r24, 0x21	; 33
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	55 da       	rcall	.-2902   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
     fc6:	65 e5       	ldi	r22, 0x55	; 85
     fc8:	82 e2       	ldi	r24, 0x22	; 34
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	51 da       	rcall	.-2910   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     fce:	65 ea       	ldi	r22, 0xA5	; 165
     fd0:	8f e3       	ldi	r24, 0x3F	; 63
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	4d da       	rcall	.-2918   	; 0x470 <gb_flash_write_bus_cycle>
     fd6:	ed e0       	ldi	r30, 0x0D	; 13
     fd8:	ea 95       	dec	r30
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <main+0x784>
     fdc:	00 00       	nop
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
     fde:	61 e1       	ldi	r22, 0x11	; 17
     fe0:	80 e2       	ldi	r24, 0x20	; 32
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	45 da       	rcall	.-2934   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     fe6:	65 ea       	ldi	r22, 0xA5	; 165
     fe8:	8f e3       	ldi	r24, 0x3F	; 63
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	41 da       	rcall	.-2942   	; 0x470 <gb_flash_write_bus_cycle>
     fee:	fd e0       	ldi	r31, 0x0D	; 13
     ff0:	fa 95       	dec	r31
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <main+0x79c>
     ff4:	00 00       	nop
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	91 e2       	ldi	r25, 0x21	; 33
     ffc:	39 da       	rcall	.-2958   	; 0x470 <gb_flash_write_bus_cycle>
     ffe:	2d e0       	ldi	r18, 0x0D	; 13
    1000:	2a 95       	dec	r18
    1002:	f1 f7       	brne	.-4      	; 0x1000 <main+0x7ac>
    1004:	00 00       	nop
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
    1006:	6f e0       	ldi	r22, 0x0F	; 15
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	31 da       	rcall	.-2974   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
    100e:	65 e5       	ldi	r22, 0x55	; 85
    1010:	85 e2       	ldi	r24, 0x25	; 37
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	2d da       	rcall	.-2982   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
    1016:	65 e5       	ldi	r22, 0x55	; 85
    1018:	86 e2       	ldi	r24, 0x26	; 38
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	29 da       	rcall	.-2990   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
    101e:	6a ea       	ldi	r22, 0xAA	; 170
    1020:	87 e2       	ldi	r24, 0x27	; 39
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	25 da       	rcall	.-2998   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    1026:	65 ea       	ldi	r22, 0xA5	; 165
    1028:	8f e3       	ldi	r24, 0x3F	; 63
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	21 da       	rcall	.-3006   	; 0x470 <gb_flash_write_bus_cycle>
    102e:	8d e0       	ldi	r24, 0x0D	; 13
    1030:	8a 95       	dec	r24
    1032:	f1 f7       	brne	.-4      	; 0x1030 <main+0x7dc>
    1034:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
    1036:	6f e0       	ldi	r22, 0x0F	; 15
    1038:	80 e2       	ldi	r24, 0x20	; 32
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	19 da       	rcall	.-3022   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
    103e:	6a e2       	ldi	r22, 0x2A	; 42
    1040:	85 e2       	ldi	r24, 0x25	; 37
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	15 da       	rcall	.-3030   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
    1046:	6a ea       	ldi	r22, 0xAA	; 170
    1048:	86 e2       	ldi	r24, 0x26	; 38
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	11 da       	rcall	.-3038   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
    104e:	65 e5       	ldi	r22, 0x55	; 85
    1050:	87 e2       	ldi	r24, 0x27	; 39
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	0d da       	rcall	.-3046   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    1056:	65 ea       	ldi	r22, 0xA5	; 165
    1058:	8f e3       	ldi	r24, 0x3F	; 63
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	09 da       	rcall	.-3054   	; 0x470 <gb_flash_write_bus_cycle>
    105e:	9d e0       	ldi	r25, 0x0D	; 13
    1060:	9a 95       	dec	r25
    1062:	f1 f7       	brne	.-4      	; 0x1060 <main+0x80c>
    1064:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
    1066:	6f e0       	ldi	r22, 0x0F	; 15
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	01 da       	rcall	.-3070   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
    106e:	65 e5       	ldi	r22, 0x55	; 85
    1070:	85 e2       	ldi	r24, 0x25	; 37
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	fd d9       	rcall	.-3078   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
    1076:	65 e5       	ldi	r22, 0x55	; 85
    1078:	86 e2       	ldi	r24, 0x26	; 38
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	f9 d9       	rcall	.-3086   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
    107e:	60 ea       	ldi	r22, 0xA0	; 160
    1080:	87 e2       	ldi	r24, 0x27	; 39
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	f5 d9       	rcall	.-3094   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    1086:	65 ea       	ldi	r22, 0xA5	; 165
    1088:	8f e3       	ldi	r24, 0x3F	; 63
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	f1 d9       	rcall	.-3102   	; 0x470 <gb_flash_write_bus_cycle>
    108e:	ed e0       	ldi	r30, 0x0D	; 13
    1090:	ea 95       	dec	r30
    1092:	f1 f7       	brne	.-4      	; 0x1090 <main+0x83c>
    1094:	00 00       	nop
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <lastBankAccessed>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	91 e2       	ldi	r25, 0x21	; 33
    10a0:	1d d8       	rcall	.-4038   	; 0xdc <write_8bit_data>
    10a2:	fd e0       	ldi	r31, 0x0D	; 13
    10a4:	fa 95       	dec	r31
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <main+0x850>
    10a8:	00 00       	nop
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
    10aa:	60 e1       	ldi	r22, 0x10	; 16
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	df d9       	rcall	.-3138   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    10b2:	65 ea       	ldi	r22, 0xA5	; 165
    10b4:	8f e3       	ldi	r24, 0x3F	; 63
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	db d9       	rcall	.-3146   	; 0x470 <gb_flash_write_bus_cycle>
    10ba:	2d e0       	ldi	r18, 0x0D	; 13
    10bc:	2a 95       	dec	r18
    10be:	f1 f7       	brne	.-4      	; 0x10bc <main+0x868>
    10c0:	00 00       	nop
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
    10c2:	68 e0       	ldi	r22, 0x08	; 8
    10c4:	80 e2       	ldi	r24, 0x20	; 32
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	d3 d9       	rcall	.-3162   	; 0x470 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    10ca:	65 ea       	ldi	r22, 0xA5	; 165
    10cc:	8f e3       	ldi	r24, 0x3F	; 63
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	cf d9       	rcall	.-3170   	; 0x470 <gb_flash_write_bus_cycle>
    10d2:	8d e0       	ldi	r24, 0x0D	; 13
    10d4:	8a 95       	dec	r24
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <main+0x880>
    10d8:	00 00       	nop
    10da:	03 e7       	ldi	r16, 0x73	; 115
    10dc:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
    10de:	83 ef       	ldi	r24, 0xF3	; 243
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	80 17       	cp	r24, r16
    10e4:	91 07       	cpc	r25, r17
    10e6:	79 f0       	breq	.+30     	; 0x1106 <main+0x8b2>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
    10e8:	f8 01       	movw	r30, r16
    10ea:	61 91       	ld	r22, Z+
    10ec:	8f 01       	movw	r16, r30
    10ee:	c6 01       	movw	r24, r12
    10f0:	bf d9       	rcall	.-3202   	; 0x470 <gb_flash_write_bus_cycle>
    10f2:	fd e0       	ldi	r31, 0x0D	; 13
    10f4:	fa 95       	dec	r31
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <main+0x8a0>
    10f8:	00 00       	nop
				_delay_us(5);
				address++;
    10fa:	2f ef       	ldi	r18, 0xFF	; 255
    10fc:	c2 1a       	sub	r12, r18
    10fe:	d2 0a       	sbc	r13, r18
    1100:	e2 0a       	sbc	r14, r18
    1102:	f2 0a       	sbc	r15, r18
    1104:	ec cf       	rjmp	.-40     	; 0x10de <main+0x88a>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
    1106:	6f ef       	ldi	r22, 0xFF	; 255
    1108:	d7 01       	movw	r26, r14
    110a:	c6 01       	movw	r24, r12
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	a1 09       	sbc	r26, r1
    1110:	b1 09       	sbc	r27, r1
    1112:	ae d9       	rcall	.-3236   	; 0x470 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1114:	ef e1       	ldi	r30, 0x1F	; 31
    1116:	fe e4       	ldi	r31, 0x4E	; 78
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <main+0x8c4>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <main+0x8ca>
    111e:	00 00       	nop
			address++;
			_delay_ms(10);
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    1120:	81 e3       	ldi	r24, 0x31	; 49
    1122:	9f d7       	rcall	.+3902   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
    1124:	b3 cc       	rjmp	.-1690   	; 0xa8c <main+0x238>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		// Intel chips such as 28F640J5 (Thanks to lesserkuma for adding support)
		else if (receivedChar == GB_FLASH_WRITE_INTEL_BUFFERED_32BYTE) {
    1126:	89 37       	cpi	r24, 0x79	; 121
    1128:	09 f0       	breq	.+2      	; 0x112c <main+0x8d8>
    112a:	48 c0       	rjmp	.+144    	; 0x11bc <main+0x968>
			usart_read_bytes(32);
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9c d7       	rcall	.+3896   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			PORTD |= (1<<ACTIVITY_LED);
    1132:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(address, 0xE8);
    1134:	86 01       	movw	r16, r12
    1136:	68 ee       	ldi	r22, 0xE8	; 232
    1138:	c6 01       	movw	r24, r12
    113a:	9a d9       	rcall	.-3276   	; 0x470 <gb_flash_write_bus_cycle>
			
			// Wait until ready
			//do { status = gb_flash_read_byte(address); } while(status != 0x80);
			start_timeout_timer();
    113c:	2c db       	rcall	.-2472   	; 0x796 <start_timeout_timer>
			while (gb_flash_read_byte(address) != 0x80) {
    113e:	c8 01       	movw	r24, r16
    1140:	88 d9       	rcall	.-3312   	; 0x452 <gb_flash_read_byte>
    1142:	80 38       	cpi	r24, 0x80	; 128
    1144:	21 f0       	breq	.+8      	; 0x114e <main+0x8fa>
				if (writingTimedout == 1) {
    1146:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	c1 f7       	brne	.-16     	; 0x113e <main+0x8ea>
					break;
				}
			}
			
			if (writingTimedout == 0) {
    114e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    1152:	81 11       	cpse	r24, r1
    1154:	97 cb       	rjmp	.-2258   	; 0x884 <main+0x30>
				start_timeout_timer();
    1156:	1f db       	rcall	.-2498   	; 0x796 <start_timeout_timer>
				
				// Set buffer size
				gb_flash_write_bus_cycle(address, 0x1F);
    1158:	6f e1       	ldi	r22, 0x1F	; 31
    115a:	c8 01       	movw	r24, r16
    115c:	89 d9       	rcall	.-3310   	; 0x470 <gb_flash_write_bus_cycle>
    115e:	23 e7       	ldi	r18, 0x73	; 115
    1160:	a2 2e       	mov	r10, r18
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	b2 2e       	mov	r11, r18
    1166:	81 2c       	mov	r8, r1
    1168:	91 2c       	mov	r9, r1
				
				// Write data to buffer
				for (uint8_t x = 0; x < 32; x++) {
					gb_flash_write_bus_cycle(address, receivedBuffer[x]);
    116a:	f5 01       	movw	r30, r10
    116c:	61 91       	ld	r22, Z+
    116e:	5f 01       	movw	r10, r30
    1170:	c4 01       	movw	r24, r8
    1172:	80 0f       	add	r24, r16
    1174:	91 1f       	adc	r25, r17
    1176:	7c d9       	rcall	.-3336   	; 0x470 <gb_flash_write_bus_cycle>
    1178:	ff ef       	ldi	r31, 0xFF	; 255
    117a:	8f 1a       	sub	r8, r31
    117c:	9f 0a       	sbc	r9, r31
				
				// Set buffer size
				gb_flash_write_bus_cycle(address, 0x1F);
				
				// Write data to buffer
				for (uint8_t x = 0; x < 32; x++) {
    117e:	20 e2       	ldi	r18, 0x20	; 32
    1180:	82 16       	cp	r8, r18
    1182:	91 04       	cpc	r9, r1
    1184:	91 f7       	brne	.-28     	; 0x116a <main+0x916>
    1186:	80 e2       	ldi	r24, 0x20	; 32
    1188:	c8 0e       	add	r12, r24
    118a:	d1 1c       	adc	r13, r1
    118c:	e1 1c       	adc	r14, r1
    118e:	f1 1c       	adc	r15, r1
					gb_flash_write_bus_cycle(address, receivedBuffer[x]);
					address++;
				}
				
				// Write buffer to flash
				gb_flash_write_bus_cycle(address-32, 0xD0);
    1190:	86 01       	movw	r16, r12
    1192:	00 52       	subi	r16, 0x20	; 32
    1194:	11 09       	sbc	r17, r1
    1196:	60 ed       	ldi	r22, 0xD0	; 208
    1198:	c8 01       	movw	r24, r16
    119a:	6a d9       	rcall	.-3372   	; 0x470 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    119c:	e7 e8       	ldi	r30, 0x87	; 135
    119e:	f1 e0       	ldi	r31, 0x01	; 1
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <main+0x94c>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <main+0x952>
    11a6:	00 00       	nop
				_delay_us(196);
				
				// Wait until ready
				//do { status = gb_flash_read_byte(address-32); } while(status != 0x80);
				while (gb_flash_read_byte(address-32) != 0x80) {
    11a8:	c8 01       	movw	r24, r16
    11aa:	53 d9       	rcall	.-3418   	; 0x452 <gb_flash_read_byte>
    11ac:	80 38       	cpi	r24, 0x80	; 128
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <main+0x95e>
    11b0:	d5 c2       	rjmp	.+1450   	; 0x175c <main+0xf08>
					if (writingTimedout == 1) {
    11b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	b9 f7       	brne	.-18     	; 0x11a8 <main+0x954>
    11ba:	d0 c2       	rjmp	.+1440   	; 0x175c <main+0xf08>
		}
		
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
    11bc:	8e 36       	cpi	r24, 0x6E	; 110
    11be:	19 f5       	brne	.+70     	; 0x1206 <main+0x9b2>
			usart_read_chars(); // Read address
    11c0:	69 d7       	rcall	.+3794   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
    11c2:	40 e1       	ldi	r20, 0x10	; 16
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	83 e7       	ldi	r24, 0x73	; 115
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	07 d3       	rcall	.+1550   	; 0x17de <strtol>
    11d0:	4b 01       	movw	r8, r22
    11d2:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for byte
    11d4:	42 d7       	rcall	.+3716   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
    11d6:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
    11da:	8e 36       	cpi	r24, 0x6E	; 110
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <main+0x98c>
    11de:	52 cb       	rjmp	.-2396   	; 0x884 <main+0x30>
				usart_read_chars(); // Read data
    11e0:	59 d7       	rcall	.+3762   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
    11e2:	40 e1       	ldi	r20, 0x10	; 16
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	83 e7       	ldi	r24, 0x73	; 115
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	f7 d2       	rcall	.+1518   	; 0x17de <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
    11f0:	93 9a       	sbi	0x12, 3	; 18
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    11f2:	74 ba       	out	0x14, r7	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    11f4:	7a ba       	out	0x1a, r7	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    11f6:	77 ba       	out	0x17, r7	; 23
				gba_flash_write_bus_cycle(flashAddress, flashByte);
    11f8:	ab 01       	movw	r20, r22
    11fa:	c5 01       	movw	r24, r10
    11fc:	b4 01       	movw	r22, r8
    11fe:	27 da       	rcall	.-2994   	; 0x64e <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
    1200:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
    1202:	81 e3       	ldi	r24, 0x31	; 49
    1204:	c1 c2       	rjmp	.+1410   	; 0x1788 <main+0xf34>
			}
		}
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
    1206:	81 37       	cpi	r24, 0x71	; 113
    1208:	11 f0       	breq	.+4      	; 0x120e <main+0x9ba>
    120a:	84 37       	cpi	r24, 0x74	; 116
    120c:	f1 f5       	brne	.+124    	; 0x128a <main+0xa36>
			PORTD |= (1<<ACTIVITY_LED);
    120e:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
    1210:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <receivedChar>
    1214:	84 37       	cpi	r24, 0x74	; 116
    1216:	19 f0       	breq	.+6      	; 0x121e <main+0x9ca>
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
    1218:	00 e4       	ldi	r16, 0x40	; 64
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <main+0x9ce>
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
    121e:	00 e0       	ldi	r16, 0x00	; 0
    1220:	11 e0       	ldi	r17, 0x01	; 1
			}
			usart_read_bytes(readLength);
    1222:	c8 01       	movw	r24, r16
    1224:	22 d7       	rcall	.+3652   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			start_timeout_timer();
    1226:	b7 da       	rcall	.-2706   	; 0x796 <start_timeout_timer>
    1228:	93 e7       	ldi	r25, 0x73	; 115
    122a:	a9 2e       	mov	r10, r25
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	b9 2e       	mov	r11, r25
    1230:	16 01       	movw	r2, r12
    1232:	27 01       	movw	r4, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    1234:	f5 01       	movw	r30, r10
    1236:	41 81       	ldd	r20, Z+1	; 0x01
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	54 2f       	mov	r21, r20
    123c:	44 27       	eor	r20, r20
    123e:	80 81       	ld	r24, Z
    1240:	48 2b       	or	r20, r24
				if (combinedBytes != 0xFFFF) {
    1242:	4f 3f       	cpi	r20, 0xFF	; 255
    1244:	ff ef       	ldi	r31, 0xFF	; 255
    1246:	5f 07       	cpc	r21, r31
    1248:	21 f0       	breq	.+8      	; 0x1252 <main+0x9fe>
					gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
    124a:	21 e0       	ldi	r18, 0x01	; 1
    124c:	c2 01       	movw	r24, r4
    124e:	b1 01       	movw	r22, r2
    1250:	74 da       	rcall	.-2840   	; 0x73a <gba_flash_write_byte>
				}
				address++;
    1252:	2f ef       	ldi	r18, 0xFF	; 255
    1254:	22 1a       	sub	r2, r18
    1256:	32 0a       	sbc	r3, r18
    1258:	42 0a       	sbc	r4, r18
    125a:	52 0a       	sbc	r5, r18
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	a8 0e       	add	r10, r24
    1260:	b1 1c       	adc	r11, r1
				readLength = 256;
			}
			usart_read_bytes(readLength);
			start_timeout_timer();
			
			for (int x = 0; x < readLength; x += 2) {
    1262:	c5 01       	movw	r24, r10
    1264:	83 57       	subi	r24, 0x73	; 115
    1266:	90 40       	sbci	r25, 0x00	; 0
    1268:	80 17       	cp	r24, r16
    126a:	91 07       	cpc	r25, r17
    126c:	1c f3       	brlt	.-58     	; 0x1234 <main+0x9e0>
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	c9 1a       	sub	r12, r25
    1272:	d9 0a       	sbc	r13, r25
    1274:	e9 0a       	sbc	r14, r25
    1276:	f9 0a       	sbc	r15, r25
    1278:	01 50       	subi	r16, 0x01	; 1
    127a:	11 09       	sbc	r17, r1
    127c:	16 95       	lsr	r17
    127e:	07 95       	ror	r16
    1280:	c0 0e       	add	r12, r16
    1282:	d1 1e       	adc	r13, r17
    1284:	e1 1c       	adc	r14, r1
    1286:	f1 1c       	adc	r15, r1
    1288:	69 c2       	rjmp	.+1234   	; 0x175c <main+0xf08>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
    128a:	86 36       	cpi	r24, 0x66	; 102
    128c:	51 f5       	brne	.+84     	; 0x12e2 <main+0xa8e>
			PORTD |= (1<<ACTIVITY_LED);
    128e:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 256;
			usart_read_bytes(readLength);
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	ea d6       	rcall	.+3540   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			start_timeout_timer();
    1296:	7f da       	rcall	.-2818   	; 0x796 <start_timeout_timer>
    1298:	03 e7       	ldi	r16, 0x73	; 115
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	46 01       	movw	r8, r12
    129e:	57 01       	movw	r10, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    12a0:	f8 01       	movw	r30, r16
    12a2:	41 81       	ldd	r20, Z+1	; 0x01
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	54 2f       	mov	r21, r20
    12a8:	44 27       	eor	r20, r20
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2b       	or	r20, r24
				if (combinedBytes != 0xFFFF) {
    12ae:	4f 3f       	cpi	r20, 0xFF	; 255
    12b0:	ff ef       	ldi	r31, 0xFF	; 255
    12b2:	5f 07       	cpc	r21, r31
    12b4:	21 f0       	breq	.+8      	; 0x12be <main+0xa6a>
					gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	c5 01       	movw	r24, r10
    12ba:	b4 01       	movw	r22, r8
    12bc:	3e da       	rcall	.-2948   	; 0x73a <gba_flash_write_byte>
				}
				address++;
    12be:	2f ef       	ldi	r18, 0xFF	; 255
    12c0:	82 1a       	sub	r8, r18
    12c2:	92 0a       	sbc	r9, r18
    12c4:	a2 0a       	sbc	r10, r18
    12c6:	b2 0a       	sbc	r11, r18
    12c8:	0e 5f       	subi	r16, 0xFE	; 254
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
			
			int readLength = 256;
			usart_read_bytes(readLength);
			start_timeout_timer();
			
			for (int x = 0; x < readLength; x += 2) {
    12cc:	83 e7       	ldi	r24, 0x73	; 115
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	80 17       	cp	r24, r16
    12d2:	91 07       	cpc	r25, r17
    12d4:	29 f7       	brne	.-54     	; 0x12a0 <main+0xa4c>
    12d6:	90 e8       	ldi	r25, 0x80	; 128
    12d8:	c9 0e       	add	r12, r25
    12da:	d1 1c       	adc	r13, r1
    12dc:	e1 1c       	adc	r14, r1
    12de:	f1 1c       	adc	r15, r1
    12e0:	3d c2       	rjmp	.+1146   	; 0x175c <main+0xf08>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GBA_FLASH_WRITE_BUFFERED_256BYTE) {
    12e2:	83 36       	cpi	r24, 0x63	; 99
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <main+0xa94>
    12e6:	94 c0       	rjmp	.+296    	; 0x1410 <main+0xbbc>
			usart_read_bytes(256);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	be d6       	rcall	.+3452   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			PORTD |= (1<<ACTIVITY_LED);
    12ee:	93 9a       	sbi	0x12, 3	; 18
    12f0:	03 e7       	ldi	r16, 0x73	; 115
    12f2:	10 e0       	ldi	r17, 0x00	; 0
			
			// Setup buffered write
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
				start_timeout_timer();
    12f4:	50 da       	rcall	.-2912   	; 0x796 <start_timeout_timer>
				
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    12f6:	74 ba       	out	0x14, r7	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    12f8:	7a ba       	out	0x1a, r7	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    12fa:	77 ba       	out	0x17, r7	; 23
    12fc:	fe 01       	movw	r30, r28
    12fe:	31 96       	adiw	r30, 0x01	; 1
    1300:	5f 01       	movw	r10, r30
    1302:	d8 01       	movw	r26, r16
				
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
					localBuffer[x] = receivedBuffer[byteCounter];
    1304:	8d 91       	ld	r24, X+
    1306:	81 93       	st	Z+, r24
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
				
				// Store to local buffer
				uint8_t localBuffer[32];
				for (uint8_t x = 0; x < 32; x++) {
    1308:	89 a1       	ldd	r24, Y+33	; 0x21
    130a:	9a a1       	ldd	r25, Y+34	; 0x22
    130c:	e8 17       	cp	r30, r24
    130e:	f9 07       	cpc	r31, r25
    1310:	c9 f7       	brne	.-14     	; 0x1304 <main+0xab0>
					localBuffer[x] = receivedBuffer[byteCounter];
					byteCounter++;
				}
				
				gba_flash_write_bus_cycle(0x555, 0xAA);
    1312:	4a ea       	ldi	r20, 0xAA	; 170
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	65 e5       	ldi	r22, 0x55	; 85
    1318:	75 e0       	ldi	r23, 0x05	; 5
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	97 d9       	rcall	.-3282   	; 0x64e <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(0x2AA, 0x55);
    1320:	45 e5       	ldi	r20, 0x55	; 85
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	6a ea       	ldi	r22, 0xAA	; 170
    1326:	72 e0       	ldi	r23, 0x02	; 2
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	90 d9       	rcall	.-3296   	; 0x64e <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, 0x25);
    132e:	45 e2       	ldi	r20, 0x25	; 37
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	8b d9       	rcall	.-3306   	; 0x64e <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, 0x0F); // Length
    1338:	4f e0       	ldi	r20, 0x0F	; 15
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	c7 01       	movw	r24, r14
    133e:	b6 01       	movw	r22, r12
    1340:	86 d9       	rcall	.-3316   	; 0x64e <gba_flash_write_bus_cycle>
    1342:	92 e0       	ldi	r25, 0x02	; 2
    1344:	9a 95       	dec	r25
    1346:	f1 f7       	brne	.-4      	; 0x1344 <main+0xaf0>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <main+0xaf6>
				_delay_us(1);
				
				// Set address
				GBA_PORT_ROM_ADDR23_16 = (address >> 16);
    134a:	c7 01       	movw	r24, r14
    134c:	aa 27       	eor	r26, r26
    134e:	bb 27       	eor	r27, r27
    1350:	85 bb       	out	0x15, r24	; 21
				GBA_PORT_ROM_ADDR15_8 = (address >> 8);
    1352:	bb 27       	eor	r27, r27
    1354:	af 2d       	mov	r26, r15
    1356:	9e 2d       	mov	r25, r14
    1358:	8d 2d       	mov	r24, r13
    135a:	8b bb       	out	0x1b, r24	; 27
				GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
    135c:	c8 ba       	out	0x18, r12	; 24
				cs_mreqPin_low;
    135e:	94 98       	cbi	0x12, 4	; 18
				
				// Write data
				for (uint8_t x = 0; x < 32; x += 2) {
					GBA_PORT_ROM_DATA15_8 = localBuffer[x+1];
    1360:	f5 01       	movw	r30, r10
    1362:	81 81       	ldd	r24, Z+1	; 0x01
    1364:	8b bb       	out	0x1b, r24	; 27
					GBA_PORT_ROM_DATA7_0 = localBuffer[x];
    1366:	80 81       	ld	r24, Z
    1368:	88 bb       	out	0x18, r24	; 24
					
					wrPin_low;
    136a:	96 98       	cbi	0x12, 6	; 18
					asm volatile("nop");
    136c:	00 00       	nop
					asm volatile("nop");
    136e:	00 00       	nop
					asm volatile("nop");
    1370:	00 00       	nop
					wrPin_high;
    1372:	96 9a       	sbi	0x12, 6	; 18
					
					// Increment address
					rdPin_low;
    1374:	95 98       	cbi	0x12, 5	; 18
					asm volatile("nop");
    1376:	00 00       	nop
					rdPin_high;
    1378:	95 9a       	sbi	0x12, 5	; 18
    137a:	f2 e0       	ldi	r31, 0x02	; 2
    137c:	af 0e       	add	r10, r31
    137e:	b1 1c       	adc	r11, r1
				GBA_PORT_ROM_ADDR15_8 = (address >> 8);
				GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
				cs_mreqPin_low;
				
				// Write data
				for (uint8_t x = 0; x < 32; x += 2) {
    1380:	89 a1       	ldd	r24, Y+33	; 0x21
    1382:	9a a1       	ldd	r25, Y+34	; 0x22
    1384:	a8 16       	cp	r10, r24
    1386:	b9 06       	cpc	r11, r25
    1388:	59 f7       	brne	.-42     	; 0x1360 <main+0xb0c>
    138a:	46 01       	movw	r8, r12
    138c:	57 01       	movw	r10, r14
    138e:	90 e1       	ldi	r25, 0x10	; 16
    1390:	89 0e       	add	r8, r25
    1392:	91 1c       	adc	r9, r1
    1394:	a1 1c       	adc	r10, r1
    1396:	b1 1c       	adc	r11, r1
    1398:	16 01       	movw	r2, r12
    139a:	27 01       	movw	r4, r14
    139c:	ef e0       	ldi	r30, 0x0F	; 15
    139e:	2e 0e       	add	r2, r30
    13a0:	31 1c       	adc	r3, r1
    13a2:	41 1c       	adc	r4, r1
    13a4:	51 1c       	adc	r5, r1
					rdPin_low;
					asm volatile("nop");
					rdPin_high;
					address++;
				}
				cs_mreqPin_high;
    13a6:	94 9a       	sbi	0x12, 4	; 18
				
				// Write buffer to flash
				gba_flash_write_bus_cycle(address-15, 0x29);
    13a8:	c7 01       	movw	r24, r14
    13aa:	b6 01       	movw	r22, r12
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8f 4f       	sbci	r24, 0xFF	; 255
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	49 e2       	ldi	r20, 0x29	; 41
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	4a d9       	rcall	.-3436   	; 0x64e <gba_flash_write_bus_cycle>
    13ba:	8f e8       	ldi	r24, 0x8F	; 143
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <main+0xb6a>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <main+0xb70>
    13c4:	00 00       	nop
				_delay_us(200);
				
				// Verify last byte written
				uint16_t combinedBytes = (uint16_t) localBuffer[31] << 8 | (uint16_t) localBuffer[30];
    13c6:	ef 8c       	ldd	r14, Y+31	; 0x1f
    13c8:	f8 a0       	ldd	r15, Y+32	; 0x20
				uint16_t dataVerify = gba_read_16bit_data(address-1);
    13ca:	c2 01       	movw	r24, r4
    13cc:	b1 01       	movw	r22, r2
    13ce:	ba d6       	rcall	.+3444   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
				while (dataVerify != combinedBytes) {
    13d0:	8e 15       	cp	r24, r14
    13d2:	9f 05       	cpc	r25, r15
    13d4:	59 f0       	breq	.+22     	; 0x13ec <main+0xb98>
					dataVerify = gba_read_16bit_data(address-1);
    13d6:	c2 01       	movw	r24, r4
    13d8:	b1 01       	movw	r22, r2
    13da:	b4 d6       	rcall	.+3432   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    13dc:	e2 e0       	ldi	r30, 0x02	; 2
    13de:	ea 95       	dec	r30
    13e0:	f1 f7       	brne	.-4      	; 0x13de <main+0xb8a>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <main+0xb90>
					_delay_us(1);
					if (writingTimedout == 1) {
    13e4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
    13e8:	21 30       	cpi	r18, 0x01	; 1
    13ea:	91 f7       	brne	.-28     	; 0x13d0 <main+0xb7c>
						break;
					}
				}
				if (writingTimedout == 1) {
    13ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	51 f0       	breq	.+20     	; 0x1408 <main+0xbb4>
    13f4:	00 5e       	subi	r16, 0xE0	; 224
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
			usart_read_bytes(256);
			PORTD |= (1<<ACTIVITY_LED);
			
			// Setup buffered write
			int16_t byteCounter = 0;
			for (uint8_t b = 0; b < 8; b++) {
    13f8:	83 e7       	ldi	r24, 0x73	; 115
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	80 17       	cp	r24, r16
    13fe:	91 07       	cpc	r25, r17
    1400:	19 f0       	breq	.+6      	; 0x1408 <main+0xbb4>
    1402:	75 01       	movw	r14, r10
    1404:	64 01       	movw	r12, r8
    1406:	76 cf       	rjmp	.-276    	; 0x12f4 <main+0xaa0>
				}
				if (writingTimedout == 1) {
					break;
				}
			}
			check_if_timed_out(); // Send ACK if successful write
    1408:	d5 d9       	rcall	.-3158   	; 0x7b4 <check_if_timed_out>
    140a:	75 01       	movw	r14, r10
    140c:	64 01       	movw	r12, r8
    140e:	3a ca       	rjmp	.-2956   	; 0x884 <main+0x30>
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
    1410:	8c 36       	cpi	r24, 0x6C	; 108
    1412:	09 f0       	breq	.+2      	; 0x1416 <main+0xbc2>
    1414:	78 c0       	rjmp	.+240    	; 0x1506 <main+0xcb2>
			PORTD |= (1<<ACTIVITY_LED);
    1416:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    1418:	80 e4       	ldi	r24, 0x40	; 64
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	26 d6       	rcall	.+3148   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			start_timeout_timer();
    141e:	bb d9       	rcall	.-3210   	; 0x796 <start_timeout_timer>
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1420:	74 ba       	out	0x14, r7	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1422:	7a ba       	out	0x1a, r7	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1424:	77 ba       	out	0x17, r7	; 23
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
    1426:	40 e6       	ldi	r20, 0x60	; 96
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	c7 01       	movw	r24, r14
    142c:	b6 01       	movw	r22, r12
    142e:	0f d9       	rcall	.-3554   	; 0x64e <gba_flash_write_bus_cycle>
			gba_flash_write_bus_cycle(address, 0xD0);
    1430:	40 ed       	ldi	r20, 0xD0	; 208
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	c7 01       	movw	r24, r14
    1436:	b6 01       	movw	r22, r12
    1438:	0a d9       	rcall	.-3564   	; 0x64e <gba_flash_write_bus_cycle>
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
    143a:	48 ee       	ldi	r20, 0xE8	; 232
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	c7 01       	movw	r24, r14
    1440:	b6 01       	movw	r22, r12
    1442:	05 d9       	rcall	.-3574   	; 0x64e <gba_flash_write_bus_cycle>
    1444:	95 e8       	ldi	r25, 0x85	; 133
    1446:	9a 95       	dec	r25
    1448:	f1 f7       	brne	.-4      	; 0x1446 <main+0xbf2>
    144a:	00 00       	nop
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
    144c:	c7 01       	movw	r24, r14
    144e:	b6 01       	movw	r22, r12
    1450:	79 d6       	rcall	.+3314   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
			while (dataVerify != 0x0080) {
    1452:	80 38       	cpi	r24, 0x80	; 128
    1454:	91 05       	cpc	r25, r1
    1456:	59 f0       	breq	.+22     	; 0x146e <main+0xc1a>
				dataVerify = gba_read_16bit_data(address);
    1458:	c7 01       	movw	r24, r14
    145a:	b6 01       	movw	r22, r12
    145c:	73 d6       	rcall	.+3302   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    145e:	e5 e8       	ldi	r30, 0x85	; 133
    1460:	ea 95       	dec	r30
    1462:	f1 f7       	brne	.-4      	; 0x1460 <main+0xc0c>
    1464:	00 00       	nop
				_delay_us(50);
				if (writingTimedout == 1) {
    1466:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
    146a:	21 30       	cpi	r18, 0x01	; 1
    146c:	91 f7       	brne	.-28     	; 0x1452 <main+0xbfe>
				}
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    146e:	74 ba       	out	0x14, r7	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1470:	7a ba       	out	0x1a, r7	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1472:	77 ba       	out	0x17, r7	; 23
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
    1474:	4f e1       	ldi	r20, 0x1F	; 31
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	c7 01       	movw	r24, r14
    147a:	b6 01       	movw	r22, r12
    147c:	e8 d8       	rcall	.-3632   	; 0x64e <gba_flash_write_bus_cycle>
    147e:	03 e7       	ldi	r16, 0x73	; 115
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	46 01       	movw	r8, r12
    1484:	57 01       	movw	r10, r14
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
    1486:	f8 01       	movw	r30, r16
    1488:	41 81       	ldd	r20, Z+1	; 0x01
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	54 2f       	mov	r21, r20
    148e:	44 27       	eor	r20, r20
    1490:	80 81       	ld	r24, Z
    1492:	48 2b       	or	r20, r24
    1494:	c5 01       	movw	r24, r10
    1496:	b4 01       	movw	r22, r8
    1498:	da d8       	rcall	.-3660   	; 0x64e <gba_flash_write_bus_cycle>
				address++;
    149a:	ff ef       	ldi	r31, 0xFF	; 255
    149c:	8f 1a       	sub	r8, r31
    149e:	9f 0a       	sbc	r9, r31
    14a0:	af 0a       	sbc	r10, r31
    14a2:	bf 0a       	sbc	r11, r31
    14a4:	0e 5f       	subi	r16, 0xFE	; 254
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
    14a8:	83 eb       	ldi	r24, 0xB3	; 179
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	80 17       	cp	r24, r16
    14ae:	91 07       	cpc	r25, r17
    14b0:	51 f7       	brne	.-44     	; 0x1486 <main+0xc32>
    14b2:	90 e2       	ldi	r25, 0x20	; 32
    14b4:	c9 0e       	add	r12, r25
    14b6:	d1 1c       	adc	r13, r1
    14b8:	e1 1c       	adc	r14, r1
    14ba:	f1 1c       	adc	r15, r1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
    14bc:	40 ed       	ldi	r20, 0xD0	; 208
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	c7 01       	movw	r24, r14
    14c2:	b6 01       	movw	r22, r12
    14c4:	c4 d8       	rcall	.-3704   	; 0x64e <gba_flash_write_bus_cycle>
    14c6:	ef e6       	ldi	r30, 0x6F	; 111
    14c8:	f3 e0       	ldi	r31, 0x03	; 3
    14ca:	31 97       	sbiw	r30, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <main+0xc76>
    14ce:	00 c0       	rjmp	.+0      	; 0x14d0 <main+0xc7c>
    14d0:	00 00       	nop
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
    14d2:	c7 01       	movw	r24, r14
    14d4:	b6 01       	movw	r22, r12
    14d6:	36 d6       	rcall	.+3180   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
			while (dataVerify != 0x0080) {
    14d8:	80 38       	cpi	r24, 0x80	; 128
    14da:	91 05       	cpc	r25, r1
    14dc:	59 f0       	breq	.+22     	; 0x14f4 <main+0xca0>
				dataVerify = gba_read_16bit_data(address);
    14de:	c7 01       	movw	r24, r14
    14e0:	b6 01       	movw	r22, r12
    14e2:	30 d6       	rcall	.+3168   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    14e4:	f5 e8       	ldi	r31, 0x85	; 133
    14e6:	fa 95       	dec	r31
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <main+0xc92>
    14ea:	00 00       	nop
				_delay_us(50);
				if (writingTimedout == 1) {
    14ec:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	91 f7       	brne	.-28     	; 0x14d8 <main+0xc84>
				}
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    14f4:	74 ba       	out	0x14, r7	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    14f6:	7a ba       	out	0x1a, r7	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    14f8:	77 ba       	out	0x17, r7	; 23
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
    14fa:	4f ef       	ldi	r20, 0xFF	; 255
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	c7 01       	movw	r24, r14
    1500:	b6 01       	movw	r22, r12
    1502:	a5 d8       	rcall	.-3766   	; 0x64e <gba_flash_write_bus_cycle>
    1504:	2b c1       	rjmp	.+598    	; 0x175c <main+0xf08>
			
			check_if_timed_out(); // Send ACK if successful write
		}
		
		// Intel word programming
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
    1506:	85 37       	cpi	r24, 0x75	; 117
    1508:	09 f0       	breq	.+2      	; 0x150c <main+0xcb8>
    150a:	41 c0       	rjmp	.+130    	; 0x158e <main+0xd3a>
			PORTD |= (1<<ACTIVITY_LED);
    150c:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    150e:	80 e4       	ldi	r24, 0x40	; 64
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	ab d5       	rcall	.+2902   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			start_timeout_timer();
    1514:	40 d9       	rcall	.-3456   	; 0x796 <start_timeout_timer>
    1516:	43 e7       	ldi	r20, 0x73	; 115
    1518:	a4 2e       	mov	r10, r20
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	b4 2e       	mov	r11, r20
    151e:	16 01       	movw	r2, r12
    1520:	27 01       	movw	r4, r14
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1522:	74 ba       	out	0x14, r7	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1524:	7a ba       	out	0x1a, r7	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1526:	77 ba       	out	0x17, r7	; 23
				
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    1528:	f5 01       	movw	r30, r10
    152a:	01 81       	ldd	r16, Z+1	; 0x01
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	10 2f       	mov	r17, r16
    1530:	00 27       	eor	r16, r16
    1532:	80 81       	ld	r24, Z
    1534:	08 2b       	or	r16, r24
				gba_flash_write_bus_cycle(address, 0x40);
    1536:	40 e4       	ldi	r20, 0x40	; 64
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	c2 01       	movw	r24, r4
    153c:	b1 01       	movw	r22, r2
    153e:	87 d8       	rcall	.-3826   	; 0x64e <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, combinedBytes);
    1540:	a8 01       	movw	r20, r16
    1542:	c2 01       	movw	r24, r4
    1544:	b1 01       	movw	r22, r2
    1546:	83 d8       	rcall	.-3834   	; 0x64e <gba_flash_write_bus_cycle>
				
				// Verify status ok
				uint16_t status = gba_read_16bit_data(address);
    1548:	c2 01       	movw	r24, r4
    154a:	b1 01       	movw	r22, r2
    154c:	fb d5       	rcall	.+3062   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
				while ((status & 0x80) == 0) {
    154e:	87 fd       	sbrc	r24, 7
    1550:	0b c0       	rjmp	.+22     	; 0x1568 <main+0xd14>
					status = gba_read_16bit_data(address);
    1552:	c2 01       	movw	r24, r4
    1554:	b1 01       	movw	r22, r2
    1556:	f6 d5       	rcall	.+3052   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    1558:	f5 e0       	ldi	r31, 0x05	; 5
    155a:	fa 95       	dec	r31
    155c:	f1 f7       	brne	.-4      	; 0x155a <main+0xd06>
    155e:	00 00       	nop
					_delay_us(2);
					if (writingTimedout == 1) {
    1560:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
    1564:	91 30       	cpi	r25, 0x01	; 1
    1566:	99 f7       	brne	.-26     	; 0x154e <main+0xcfa>
						break;
					}
				}
				address++;
    1568:	2f ef       	ldi	r18, 0xFF	; 255
    156a:	22 1a       	sub	r2, r18
    156c:	32 0a       	sbc	r3, r18
    156e:	42 0a       	sbc	r4, r18
    1570:	52 0a       	sbc	r5, r18
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	a8 0e       	add	r10, r24
    1576:	b1 1c       	adc	r11, r1
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			start_timeout_timer();
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    1578:	93 eb       	ldi	r25, 0xB3	; 179
    157a:	a9 16       	cp	r10, r25
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	b9 06       	cpc	r11, r25
    1580:	81 f6       	brne	.-96     	; 0x1522 <main+0xcce>
    1582:	e0 e2       	ldi	r30, 0x20	; 32
    1584:	ce 0e       	add	r12, r30
    1586:	d1 1c       	adc	r13, r1
    1588:	e1 1c       	adc	r14, r1
    158a:	f1 1c       	adc	r15, r1
    158c:	e7 c0       	rjmp	.+462    	; 0x175c <main+0xf08>
		}
		
		// Intel flash command based chips, two chips interleaved (Flash2Advance 256M cart)
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		// Thanks to lesserkuma for adding support
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_INTERLEAVED_256BYTE) {
    158e:	86 37       	cpi	r24, 0x76	; 118
    1590:	09 f0       	breq	.+2      	; 0x1594 <main+0xd40>
    1592:	a0 c0       	rjmp	.+320    	; 0x16d4 <main+0xe80>
			PORTD |= (1<<ACTIVITY_LED);
    1594:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(256);
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	67 d5       	rcall	.+2766   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			start_timeout_timer();
    159c:	fc d8       	rcall	.-3592   	; 0x796 <start_timeout_timer>
    159e:	03 e7       	ldi	r16, 0x73	; 115
    15a0:	10 e0       	ldi	r17, 0x00	; 0
			
			// Loop four times, transferring 256 bytes over USB at once is faster than doing four transfers
			for (int c = 0; c < 4; c++) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    15a2:	74 ba       	out	0x14, r7	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    15a4:	7a ba       	out	0x1a, r7	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    15a6:	77 ba       	out	0x17, r7	; 23
				
				// Setup buffered write
				gba_flash_write_bus_cycle(address, 0xE8);
    15a8:	48 ee       	ldi	r20, 0xE8	; 232
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	c7 01       	movw	r24, r14
    15ae:	b6 01       	movw	r22, r12
    15b0:	4e d8       	rcall	.-3940   	; 0x64e <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address+1, 0xE8);
    15b2:	46 01       	movw	r8, r12
    15b4:	57 01       	movw	r10, r14
    15b6:	ff ef       	ldi	r31, 0xFF	; 255
    15b8:	8f 1a       	sub	r8, r31
    15ba:	9f 0a       	sbc	r9, r31
    15bc:	af 0a       	sbc	r10, r31
    15be:	bf 0a       	sbc	r11, r31
    15c0:	48 ee       	ldi	r20, 0xE8	; 232
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	c5 01       	movw	r24, r10
    15c6:	b4 01       	movw	r22, r8
    15c8:	42 d8       	rcall	.-3964   	; 0x64e <gba_flash_write_bus_cycle>
				
				// Wait until both chips are ready
				while (gba_read_16bit_data(address) != 0x80) {
    15ca:	c7 01       	movw	r24, r14
    15cc:	b6 01       	movw	r22, r12
    15ce:	ba d5       	rcall	.+2932   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    15d0:	80 38       	cpi	r24, 0x80	; 128
    15d2:	91 05       	cpc	r25, r1
    15d4:	49 f0       	breq	.+18     	; 0x15e8 <main+0xd94>
					if (writingTimedout == 1) {
    15d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	b1 f7       	brne	.-20     	; 0x15ca <main+0xd76>
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <main+0xd94>
						break;
					}
				}
				while (gba_read_16bit_data(address+1) != 0x80) {
					if (writingTimedout == 1) {
    15e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	31 f0       	breq	.+12     	; 0x15f4 <main+0xda0>
				while (gba_read_16bit_data(address) != 0x80) {
					if (writingTimedout == 1) {
						break;
					}
				}
				while (gba_read_16bit_data(address+1) != 0x80) {
    15e8:	c5 01       	movw	r24, r10
    15ea:	b4 01       	movw	r22, r8
    15ec:	ab d5       	rcall	.+2902   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    15ee:	80 38       	cpi	r24, 0x80	; 128
    15f0:	91 05       	cpc	r25, r1
    15f2:	b1 f7       	brne	.-20     	; 0x15e0 <main+0xd8c>
				}
				
				//do { status = gba_read_16bit_data(address); } while (status != 0x80);
				//do { status = gba_read_16bit_data(address+1); } while (status != 0x80);
				
				if (writingTimedout == 0) {
    15f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    15f8:	81 11       	cpse	r24, r1
    15fa:	5c c0       	rjmp	.+184    	; 0x16b4 <main+0xe60>
					start_timeout_timer();
    15fc:	cc d8       	rcall	.-3688   	; 0x796 <start_timeout_timer>
					
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
    15fe:	74 ba       	out	0x14, r7	; 20
					GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1600:	7a ba       	out	0x1a, r7	; 26
					GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1602:	77 ba       	out	0x17, r7	; 23
					
					// Set length (number of words+1 to write)
					gba_flash_write_bus_cycle(address, 0x0F); // 16 words
    1604:	4f e0       	ldi	r20, 0x0F	; 15
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	c7 01       	movw	r24, r14
    160a:	b6 01       	movw	r22, r12
    160c:	20 d8       	rcall	.-4032   	; 0x64e <gba_flash_write_bus_cycle>
					gba_flash_write_bus_cycle(address+1, 0x0F); // 16 words
    160e:	4f e0       	ldi	r20, 0x0F	; 15
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	c5 01       	movw	r24, r10
    1614:	b4 01       	movw	r22, r8
    1616:	1b d8       	rcall	.-4042   	; 0x64e <gba_flash_write_bus_cycle>
    1618:	1c a3       	std	Y+36, r17	; 0x24
    161a:	0b a3       	std	Y+35, r16	; 0x23
    161c:	16 01       	movw	r2, r12
    161e:	27 01       	movw	r4, r14
					
					// Write data (32 words total)
					uint16_t combinedBytes;
					for (int x = 0; x < 64; x += 2) {
    1620:	1f a2       	std	Y+39, r1	; 0x27
    1622:	1e a2       	std	Y+38, r1	; 0x26
						combinedBytes = (uint16_t) receivedBuffer[c*64+x+1] << 8 | (uint16_t) receivedBuffer[c*64+x];
						gba_flash_write_bus_cycle(address, combinedBytes);
    1624:	eb a1       	ldd	r30, Y+35	; 0x23
    1626:	fc a1       	ldd	r31, Y+36	; 0x24
    1628:	41 81       	ldd	r20, Z+1	; 0x01
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	54 2f       	mov	r21, r20
    162e:	44 27       	eor	r20, r20
    1630:	80 81       	ld	r24, Z
    1632:	48 2b       	or	r20, r24
    1634:	c2 01       	movw	r24, r4
    1636:	b1 01       	movw	r22, r2
    1638:	0a d8       	rcall	.-4076   	; 0x64e <gba_flash_write_bus_cycle>
						address++;
    163a:	ff ef       	ldi	r31, 0xFF	; 255
    163c:	2f 1a       	sub	r2, r31
    163e:	3f 0a       	sbc	r3, r31
    1640:	4f 0a       	sbc	r4, r31
    1642:	5f 0a       	sbc	r5, r31
					gba_flash_write_bus_cycle(address, 0x0F); // 16 words
					gba_flash_write_bus_cycle(address+1, 0x0F); // 16 words
					
					// Write data (32 words total)
					uint16_t combinedBytes;
					for (int x = 0; x < 64; x += 2) {
    1644:	8e a1       	ldd	r24, Y+38	; 0x26
    1646:	9f a1       	ldd	r25, Y+39	; 0x27
    1648:	02 96       	adiw	r24, 0x02	; 2
    164a:	9f a3       	std	Y+39, r25	; 0x27
    164c:	8e a3       	std	Y+38, r24	; 0x26
    164e:	eb a1       	ldd	r30, Y+35	; 0x23
    1650:	fc a1       	ldd	r31, Y+36	; 0x24
    1652:	32 96       	adiw	r30, 0x02	; 2
    1654:	fc a3       	std	Y+36, r31	; 0x24
    1656:	eb a3       	std	Y+35, r30	; 0x23
    1658:	80 34       	cpi	r24, 0x40	; 64
    165a:	91 05       	cpc	r25, r1
    165c:	19 f7       	brne	.-58     	; 0x1624 <main+0xdd0>
    165e:	16 01       	movw	r2, r12
    1660:	27 01       	movw	r4, r14
    1662:	f0 e2       	ldi	r31, 0x20	; 32
    1664:	2f 0e       	add	r2, r31
    1666:	31 1c       	adc	r3, r1
    1668:	41 1c       	adc	r4, r1
    166a:	51 1c       	adc	r5, r1
						gba_flash_write_bus_cycle(address, combinedBytes);
						address++;
					}
					
					// Write buffer to flash
					gba_flash_write_bus_cycle(address-32, 0xD0);
    166c:	40 ed       	ldi	r20, 0xD0	; 208
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	c7 01       	movw	r24, r14
    1672:	b6 01       	movw	r22, r12
    1674:	ec d7       	rcall	.+4056   	; 0x264e <__TEXT_REGION_LENGTH__+0x64e>
					gba_flash_write_bus_cycle(address-32+1, 0xD0);
    1676:	40 ed       	ldi	r20, 0xD0	; 208
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	c5 01       	movw	r24, r10
    167c:	b4 01       	movw	r22, r8
    167e:	e7 d7       	rcall	.+4046   	; 0x264e <__TEXT_REGION_LENGTH__+0x64e>
					
					// Wait until ready
					while (gba_read_16bit_data(address) != 0x80) {
    1680:	c2 01       	movw	r24, r4
    1682:	b1 01       	movw	r22, r2
    1684:	5f d5       	rcall	.+2750   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    1686:	80 38       	cpi	r24, 0x80	; 128
    1688:	91 05       	cpc	r25, r1
    168a:	21 f0       	breq	.+8      	; 0x1694 <main+0xe40>
						if (writingTimedout == 1) {
    168c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	b1 f7       	brne	.-20     	; 0x1680 <main+0xe2c>
							break;
						}
					}
					while (gba_read_16bit_data(address+1) != 0x80) {
    1694:	21 e2       	ldi	r18, 0x21	; 33
    1696:	c2 0e       	add	r12, r18
    1698:	d1 1c       	adc	r13, r1
    169a:	e1 1c       	adc	r14, r1
    169c:	f1 1c       	adc	r15, r1
    169e:	c7 01       	movw	r24, r14
    16a0:	b6 01       	movw	r22, r12
    16a2:	50 d5       	rcall	.+2720   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    16a4:	80 38       	cpi	r24, 0x80	; 128
    16a6:	91 05       	cpc	r25, r1
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <main+0xe64>
						if (writingTimedout == 1) {
    16aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	b1 f7       	brne	.-20     	; 0x169e <main+0xe4a>
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <main+0xe64>
    16b4:	16 01       	movw	r2, r12
    16b6:	27 01       	movw	r4, r14
    16b8:	00 5c       	subi	r16, 0xC0	; 192
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(256);
			start_timeout_timer();
			
			// Loop four times, transferring 256 bytes over USB at once is faster than doing four transfers
			for (int c = 0; c < 4; c++) {
    16bc:	83 e7       	ldi	r24, 0x73	; 115
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	80 17       	cp	r24, r16
    16c2:	91 07       	cpc	r25, r17
    16c4:	19 f0       	breq	.+6      	; 0x16cc <main+0xe78>
    16c6:	72 01       	movw	r14, r4
    16c8:	61 01       	movw	r12, r2
    16ca:	6b cf       	rjmp	.-298    	; 0x15a2 <main+0xd4e>
				}
				//do { status = gba_read_16bit_data(address); } while (status != 0x80);
				//do { status = gba_read_16bit_data(address+1); } while (status != 0x80);
			}
			
			check_if_timed_out(); // Send ACK if successful write
    16cc:	73 d8       	rcall	.-3866   	; 0x7b4 <check_if_timed_out>
    16ce:	72 01       	movw	r14, r4
    16d0:	61 01       	movw	r12, r2
    16d2:	d8 c8       	rjmp	.-3664   	; 0x884 <main+0x30>
		}

		// Sharp LH28F320BJE programming (Thanks to lesserkuma for adding support)
		else if (receivedChar == GBA_FLASH_WRITE_SHARP_64BYTE) {
    16d4:	88 37       	cpi	r24, 0x78	; 120
    16d6:	09 f0       	breq	.+2      	; 0x16da <main+0xe86>
    16d8:	43 c0       	rjmp	.+134    	; 0x1760 <main+0xf0c>
			uint16_t status = 0;
			
			PORTD |= (1<<ACTIVITY_LED);
    16da:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    16dc:	80 e4       	ldi	r24, 0x40	; 64
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	c4 d4       	rcall	.+2440   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
			start_timeout_timer();
    16e2:	59 d8       	rcall	.-3918   	; 0x796 <start_timeout_timer>
    16e4:	93 e7       	ldi	r25, 0x73	; 115
    16e6:	a9 2e       	mov	r10, r25
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b9 2e       	mov	r11, r25
    16ec:	16 01       	movw	r2, r12
    16ee:	27 01       	movw	r4, r14
			check_if_timed_out(); // Send ACK if successful write
		}

		// Sharp LH28F320BJE programming (Thanks to lesserkuma for adding support)
		else if (receivedChar == GBA_FLASH_WRITE_SHARP_64BYTE) {
			uint16_t status = 0;
    16f0:	91 2c       	mov	r9, r1
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Wait until ready
				while ((status & 0x80) != 0x80) {
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
    16f2:	74 ba       	out	0x14, r7	; 20
					GBA_DDR_ROM_ADDR15_8 = 0xFF;
    16f4:	7a ba       	out	0x1a, r7	; 26
					GBA_DDR_ROM_ADDR7_0 = 0xFF;
    16f6:	77 ba       	out	0x17, r7	; 23
			start_timeout_timer();
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Wait until ready
				while ((status & 0x80) != 0x80) {
    16f8:	97 fc       	sbrc	r9, 7
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <main+0xebc>
					// Set address lines as outputs
					GBA_DDR_ROM_ADDR23_16 = 0xFF;
					GBA_DDR_ROM_ADDR15_8 = 0xFF;
					GBA_DDR_ROM_ADDR7_0 = 0xFF;
					
					gba_flash_write_bus_cycle(address, 0x70); // Query status register
    16fc:	40 e7       	ldi	r20, 0x70	; 112
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	c2 01       	movw	r24, r4
    1702:	b1 01       	movw	r22, r2
    1704:	a4 d7       	rcall	.+3912   	; 0x264e <__TEXT_REGION_LENGTH__+0x64e>
					status = gba_read_16bit_data(address);
    1706:	c2 01       	movw	r24, r4
    1708:	b1 01       	movw	r22, r2
    170a:	1c d5       	rcall	.+2616   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    170c:	98 2e       	mov	r9, r24
    170e:	f1 cf       	rjmp	.-30     	; 0x16f2 <main+0xe9e>
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
				
				// Write one word to flash
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    1710:	f5 01       	movw	r30, r10
    1712:	01 81       	ldd	r16, Z+1	; 0x01
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	10 2f       	mov	r17, r16
    1718:	00 27       	eor	r16, r16
    171a:	80 81       	ld	r24, Z
    171c:	08 2b       	or	r16, r24
				gba_flash_write_bus_cycle(address, 0x10);
    171e:	40 e1       	ldi	r20, 0x10	; 16
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	c2 01       	movw	r24, r4
    1724:	b1 01       	movw	r22, r2
    1726:	93 d7       	rcall	.+3878   	; 0x264e <__TEXT_REGION_LENGTH__+0x64e>
				gba_flash_write_bus_cycle(address, combinedBytes);
    1728:	a8 01       	movw	r20, r16
    172a:	c2 01       	movw	r24, r4
    172c:	b1 01       	movw	r22, r2
    172e:	8f d7       	rcall	.+3870   	; 0x264e <__TEXT_REGION_LENGTH__+0x64e>
    1730:	fa e6       	ldi	r31, 0x6A	; 106
    1732:	fa 95       	dec	r31
    1734:	f1 f7       	brne	.-4      	; 0x1732 <main+0xede>
    1736:	00 c0       	rjmp	.+0      	; 0x1738 <main+0xee4>
				_delay_us(40);
				
				address++;
    1738:	2f ef       	ldi	r18, 0xFF	; 255
    173a:	22 1a       	sub	r2, r18
    173c:	32 0a       	sbc	r3, r18
    173e:	42 0a       	sbc	r4, r18
    1740:	52 0a       	sbc	r5, r18
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	a8 0e       	add	r10, r24
    1746:	b1 1c       	adc	r11, r1
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			start_timeout_timer();
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    1748:	e3 eb       	ldi	r30, 0xB3	; 179
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	ea 15       	cp	r30, r10
    174e:	fb 05       	cpc	r31, r11
    1750:	81 f6       	brne	.-96     	; 0x16f2 <main+0xe9e>
    1752:	f0 e2       	ldi	r31, 0x20	; 32
    1754:	cf 0e       	add	r12, r31
    1756:	d1 1c       	adc	r13, r1
    1758:	e1 1c       	adc	r14, r1
    175a:	f1 1c       	adc	r15, r1
				_delay_us(40);
				
				address++;
			}
			
			check_if_timed_out(); // Send ACK if successful write
    175c:	2b d8       	rcall	.-4010   	; 0x7b4 <check_if_timed_out>
    175e:	92 c8       	rjmp	.-3804   	; 0x884 <main+0x30>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		*/
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
    1760:	8d 34       	cpi	r24, 0x4D	; 77
    1762:	59 f4       	brne	.+22     	; 0x177a <main+0xf26>
			char commonChar = USART_Receive();
    1764:	7a d4       	rcall	.+2292   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
			if (commonChar == '1') {
    1766:	81 33       	cpi	r24, 0x31	; 49
    1768:	19 f4       	brne	.+6      	; 0x1770 <main+0xf1c>
				resetCommonLines = 1;
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	9d a3       	std	Y+37, r25	; 0x25
    176e:	8d c8       	rjmp	.-3814   	; 0x88a <main+0x36>
			}
			else if (commonChar == '0') {
    1770:	80 33       	cpi	r24, 0x30	; 48
    1772:	09 f0       	breq	.+2      	; 0x1776 <main+0xf22>
    1774:	87 c8       	rjmp	.-3826   	; 0x884 <main+0x30>
				resetCommonLines = 0;
    1776:	1d a2       	std	Y+37, r1	; 0x25
    1778:	89 c8       	rjmp	.-3822   	; 0x88c <main+0x38>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
    177a:	88 36       	cpi	r24, 0x68	; 104
    177c:	11 f4       	brne	.+4      	; 0x1782 <main+0xf2e>
			USART_Transmit(PCB_VERSION);
    177e:	84 e0       	ldi	r24, 0x04	; 4
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <main+0xf34>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
    1782:	86 35       	cpi	r24, 0x56	; 86
    1784:	19 f4       	brne	.+6      	; 0x178c <main+0xf38>
			USART_Transmit(FIRMWARE_VERSION);
    1786:	86 e1       	ldi	r24, 0x16	; 22
    1788:	6c d4       	rcall	.+2264   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
    178a:	7c c8       	rjmp	.-3848   	; 0x884 <main+0x30>
		}
		
		// Send back 32KB for a speed test
		else if (receivedChar == FAST_READ_CHECK) {
    178c:	8b 32       	cpi	r24, 0x2B	; 43
    178e:	51 f4       	brne	.+20     	; 0x17a4 <main+0xf50>
    1790:	00 e0       	ldi	r16, 0x00	; 0
    1792:	10 e4       	ldi	r17, 0x40	; 64
			for (uint16_t x = 0; x < 0x4000; x++) {
				USART_Transmit('1');
    1794:	81 e3       	ldi	r24, 0x31	; 49
    1796:	65 d4       	rcall	.+2250   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
				USART_Transmit('0');
    1798:	80 e3       	ldi	r24, 0x30	; 48
    179a:	63 d4       	rcall	.+2246   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
    179c:	01 50       	subi	r16, 0x01	; 1
    179e:	11 09       	sbc	r17, r1
			USART_Transmit(FIRMWARE_VERSION);
		}
		
		// Send back 32KB for a speed test
		else if (receivedChar == FAST_READ_CHECK) {
			for (uint16_t x = 0; x < 0x4000; x++) {
    17a0:	c9 f7       	brne	.-14     	; 0x1794 <main+0xf40>
    17a2:	70 c8       	rjmp	.-3872   	; 0x884 <main+0x30>
				USART_Transmit('0');
			}
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
    17a4:	8a 32       	cpi	r24, 0x2A	; 42
    17a6:	09 f0       	breq	.+2      	; 0x17aa <main+0xf56>
    17a8:	6d c8       	rjmp	.-3878   	; 0x884 <main+0x30>
			usart_read_chars();
    17aa:	74 d4       	rcall	.+2280   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
    17ac:	40 e1       	ldi	r20, 0x10	; 16
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	83 e7       	ldi	r24, 0x73	; 115
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	12 d0       	rcall	.+36     	; 0x17de <strtol>
			if (resetValue == RESET_VALUE) {
    17ba:	61 3e       	cpi	r22, 0xE1	; 225
    17bc:	75 4e       	sbci	r23, 0xE5	; 229
    17be:	87 40       	sbci	r24, 0x07	; 7
    17c0:	91 05       	cpc	r25, r1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <main+0xf72>
    17c4:	5f c8       	rjmp	.-3906   	; 0x884 <main+0x30>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
    17c6:	84 b7       	in	r24, 0x34	; 52
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
    17cc:	88 e1       	ldi	r24, 0x18	; 24
    17ce:	81 bd       	out	0x21, r24	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
    17d0:	8c e0       	ldi	r24, 0x0C	; 12
    17d2:	81 bd       	out	0x21, r24	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	9f ef       	ldi	r25, 0xFF	; 255
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <main+0xf84>
    17dc:	53 c8       	rjmp	.-3930   	; 0x884 <main+0x30>

000017de <strtol>:
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e4 ef       	ldi	r30, 0xF4	; 244
    17e4:	fb e0       	ldi	r31, 0x0B	; 11
    17e6:	78 c1       	rjmp	.+752    	; 0x1ad8 <__prologue_saves__+0x2>
    17e8:	5c 01       	movw	r10, r24
    17ea:	6b 01       	movw	r12, r22
    17ec:	7a 01       	movw	r14, r20
    17ee:	61 15       	cp	r22, r1
    17f0:	71 05       	cpc	r23, r1
    17f2:	19 f0       	breq	.+6      	; 0x17fa <strtol+0x1c>
    17f4:	fb 01       	movw	r30, r22
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	e1 14       	cp	r14, r1
    17fc:	f1 04       	cpc	r15, r1
    17fe:	29 f0       	breq	.+10     	; 0x180a <strtol+0x2c>
    1800:	c7 01       	movw	r24, r14
    1802:	02 97       	sbiw	r24, 0x02	; 2
    1804:	83 97       	sbiw	r24, 0x23	; 35
    1806:	08 f0       	brcs	.+2      	; 0x180a <strtol+0x2c>
    1808:	e2 c0       	rjmp	.+452    	; 0x19ce <strtol+0x1f0>
    180a:	e5 01       	movw	r28, r10
    180c:	21 96       	adiw	r28, 0x01	; 1
    180e:	f5 01       	movw	r30, r10
    1810:	10 81       	ld	r17, Z
    1812:	81 2f       	mov	r24, r17
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	11 d1       	rcall	.+546    	; 0x1a3a <isspace>
    1818:	89 2b       	or	r24, r25
    181a:	11 f0       	breq	.+4      	; 0x1820 <strtol+0x42>
    181c:	5e 01       	movw	r10, r28
    181e:	f5 cf       	rjmp	.-22     	; 0x180a <strtol+0x2c>
    1820:	1d 32       	cpi	r17, 0x2D	; 45
    1822:	29 f4       	brne	.+10     	; 0x182e <strtol+0x50>
    1824:	21 96       	adiw	r28, 0x01	; 1
    1826:	f5 01       	movw	r30, r10
    1828:	11 81       	ldd	r17, Z+1	; 0x01
    182a:	01 e0       	ldi	r16, 0x01	; 1
    182c:	07 c0       	rjmp	.+14     	; 0x183c <strtol+0x5e>
    182e:	1b 32       	cpi	r17, 0x2B	; 43
    1830:	21 f4       	brne	.+8      	; 0x183a <strtol+0x5c>
    1832:	e5 01       	movw	r28, r10
    1834:	22 96       	adiw	r28, 0x02	; 2
    1836:	f5 01       	movw	r30, r10
    1838:	11 81       	ldd	r17, Z+1	; 0x01
    183a:	00 e0       	ldi	r16, 0x00	; 0
    183c:	e1 14       	cp	r14, r1
    183e:	f1 04       	cpc	r15, r1
    1840:	09 f1       	breq	.+66     	; 0x1884 <strtol+0xa6>
    1842:	f0 e1       	ldi	r31, 0x10	; 16
    1844:	ef 16       	cp	r14, r31
    1846:	f1 04       	cpc	r15, r1
    1848:	29 f4       	brne	.+10     	; 0x1854 <strtol+0x76>
    184a:	3e c0       	rjmp	.+124    	; 0x18c8 <strtol+0xea>
    184c:	10 e3       	ldi	r17, 0x30	; 48
    184e:	e1 14       	cp	r14, r1
    1850:	f1 04       	cpc	r15, r1
    1852:	21 f1       	breq	.+72     	; 0x189c <strtol+0xbe>
    1854:	28 e0       	ldi	r18, 0x08	; 8
    1856:	e2 16       	cp	r14, r18
    1858:	f1 04       	cpc	r15, r1
    185a:	01 f1       	breq	.+64     	; 0x189c <strtol+0xbe>
    185c:	54 f4       	brge	.+20     	; 0x1872 <strtol+0x94>
    185e:	e2 e0       	ldi	r30, 0x02	; 2
    1860:	ee 16       	cp	r14, r30
    1862:	f1 04       	cpc	r15, r1
    1864:	21 f5       	brne	.+72     	; 0x18ae <strtol+0xd0>
    1866:	81 2c       	mov	r8, r1
    1868:	91 2c       	mov	r9, r1
    186a:	a1 2c       	mov	r10, r1
    186c:	b0 e4       	ldi	r27, 0x40	; 64
    186e:	bb 2e       	mov	r11, r27
    1870:	3d c0       	rjmp	.+122    	; 0x18ec <strtol+0x10e>
    1872:	fa e0       	ldi	r31, 0x0A	; 10
    1874:	ef 16       	cp	r14, r31
    1876:	f1 04       	cpc	r15, r1
    1878:	39 f0       	breq	.+14     	; 0x1888 <strtol+0xaa>
    187a:	20 e1       	ldi	r18, 0x10	; 16
    187c:	e2 16       	cp	r14, r18
    187e:	f1 04       	cpc	r15, r1
    1880:	b1 f4       	brne	.+44     	; 0x18ae <strtol+0xd0>
    1882:	2f c0       	rjmp	.+94     	; 0x18e2 <strtol+0x104>
    1884:	10 33       	cpi	r17, 0x30	; 48
    1886:	11 f1       	breq	.+68     	; 0x18cc <strtol+0xee>
    1888:	fa e0       	ldi	r31, 0x0A	; 10
    188a:	ef 2e       	mov	r14, r31
    188c:	f1 2c       	mov	r15, r1
    188e:	ac ec       	ldi	r26, 0xCC	; 204
    1890:	8a 2e       	mov	r8, r26
    1892:	98 2c       	mov	r9, r8
    1894:	a8 2c       	mov	r10, r8
    1896:	ac e0       	ldi	r26, 0x0C	; 12
    1898:	ba 2e       	mov	r11, r26
    189a:	28 c0       	rjmp	.+80     	; 0x18ec <strtol+0x10e>
    189c:	78 e0       	ldi	r23, 0x08	; 8
    189e:	e7 2e       	mov	r14, r23
    18a0:	f1 2c       	mov	r15, r1
    18a2:	81 2c       	mov	r8, r1
    18a4:	91 2c       	mov	r9, r1
    18a6:	a1 2c       	mov	r10, r1
    18a8:	e0 e1       	ldi	r30, 0x10	; 16
    18aa:	be 2e       	mov	r11, r30
    18ac:	1f c0       	rjmp	.+62     	; 0x18ec <strtol+0x10e>
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e8       	ldi	r25, 0x80	; 128
    18b6:	97 01       	movw	r18, r14
    18b8:	0f 2c       	mov	r0, r15
    18ba:	00 0c       	add	r0, r0
    18bc:	44 0b       	sbc	r20, r20
    18be:	55 0b       	sbc	r21, r21
    18c0:	de d0       	rcall	.+444    	; 0x1a7e <__udivmodsi4>
    18c2:	49 01       	movw	r8, r18
    18c4:	5a 01       	movw	r10, r20
    18c6:	12 c0       	rjmp	.+36     	; 0x18ec <strtol+0x10e>
    18c8:	10 33       	cpi	r17, 0x30	; 48
    18ca:	59 f4       	brne	.+22     	; 0x18e2 <strtol+0x104>
    18cc:	88 81       	ld	r24, Y
    18ce:	8f 7d       	andi	r24, 0xDF	; 223
    18d0:	88 35       	cpi	r24, 0x58	; 88
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <strtol+0xf8>
    18d4:	bb cf       	rjmp	.-138    	; 0x184c <strtol+0x6e>
    18d6:	19 81       	ldd	r17, Y+1	; 0x01
    18d8:	22 96       	adiw	r28, 0x02	; 2
    18da:	02 60       	ori	r16, 0x02	; 2
    18dc:	80 e1       	ldi	r24, 0x10	; 16
    18de:	e8 2e       	mov	r14, r24
    18e0:	f1 2c       	mov	r15, r1
    18e2:	81 2c       	mov	r8, r1
    18e4:	91 2c       	mov	r9, r1
    18e6:	a1 2c       	mov	r10, r1
    18e8:	68 e0       	ldi	r22, 0x08	; 8
    18ea:	b6 2e       	mov	r11, r22
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	cb 01       	movw	r24, r22
    18f4:	27 01       	movw	r4, r14
    18f6:	0f 2c       	mov	r0, r15
    18f8:	00 0c       	add	r0, r0
    18fa:	66 08       	sbc	r6, r6
    18fc:	77 08       	sbc	r7, r7
    18fe:	fe 01       	movw	r30, r28
    1900:	50 ed       	ldi	r21, 0xD0	; 208
    1902:	35 2e       	mov	r3, r21
    1904:	31 0e       	add	r3, r17
    1906:	29 e0       	ldi	r18, 0x09	; 9
    1908:	23 15       	cp	r18, r3
    190a:	70 f4       	brcc	.+28     	; 0x1928 <strtol+0x14a>
    190c:	2f eb       	ldi	r18, 0xBF	; 191
    190e:	21 0f       	add	r18, r17
    1910:	2a 31       	cpi	r18, 0x1A	; 26
    1912:	18 f4       	brcc	.+6      	; 0x191a <strtol+0x13c>
    1914:	39 ec       	ldi	r19, 0xC9	; 201
    1916:	33 2e       	mov	r3, r19
    1918:	06 c0       	rjmp	.+12     	; 0x1926 <strtol+0x148>
    191a:	2f e9       	ldi	r18, 0x9F	; 159
    191c:	21 0f       	add	r18, r17
    191e:	2a 31       	cpi	r18, 0x1A	; 26
    1920:	10 f5       	brcc	.+68     	; 0x1966 <strtol+0x188>
    1922:	29 ea       	ldi	r18, 0xA9	; 169
    1924:	32 2e       	mov	r3, r18
    1926:	31 0e       	add	r3, r17
    1928:	23 2d       	mov	r18, r3
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	2e 15       	cp	r18, r14
    192e:	3f 05       	cpc	r19, r15
    1930:	d4 f4       	brge	.+52     	; 0x1966 <strtol+0x188>
    1932:	47 fd       	sbrc	r20, 7
    1934:	15 c0       	rjmp	.+42     	; 0x1960 <strtol+0x182>
    1936:	86 16       	cp	r8, r22
    1938:	97 06       	cpc	r9, r23
    193a:	a8 06       	cpc	r10, r24
    193c:	b9 06       	cpc	r11, r25
    193e:	68 f0       	brcs	.+26     	; 0x195a <strtol+0x17c>
    1940:	a3 01       	movw	r20, r6
    1942:	92 01       	movw	r18, r4
    1944:	8d d0       	rcall	.+282    	; 0x1a60 <__mulsi3>
    1946:	63 0d       	add	r22, r3
    1948:	71 1d       	adc	r23, r1
    194a:	81 1d       	adc	r24, r1
    194c:	91 1d       	adc	r25, r1
    194e:	61 30       	cpi	r22, 0x01	; 1
    1950:	71 05       	cpc	r23, r1
    1952:	81 05       	cpc	r24, r1
    1954:	20 e8       	ldi	r18, 0x80	; 128
    1956:	92 07       	cpc	r25, r18
    1958:	10 f0       	brcs	.+4      	; 0x195e <strtol+0x180>
    195a:	4f ef       	ldi	r20, 0xFF	; 255
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <strtol+0x182>
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	21 96       	adiw	r28, 0x01	; 1
    1962:	10 81       	ld	r17, Z
    1964:	cc cf       	rjmp	.-104    	; 0x18fe <strtol+0x120>
    1966:	20 2f       	mov	r18, r16
    1968:	21 70       	andi	r18, 0x01	; 1
    196a:	c1 14       	cp	r12, r1
    196c:	d1 04       	cpc	r13, r1
    196e:	71 f0       	breq	.+28     	; 0x198c <strtol+0x1ae>
    1970:	44 23       	and	r20, r20
    1972:	29 f0       	breq	.+10     	; 0x197e <strtol+0x1a0>
    1974:	21 97       	sbiw	r28, 0x01	; 1
    1976:	f6 01       	movw	r30, r12
    1978:	d1 83       	std	Z+1, r29	; 0x01
    197a:	c0 83       	st	Z, r28
    197c:	07 c0       	rjmp	.+14     	; 0x198c <strtol+0x1ae>
    197e:	01 ff       	sbrs	r16, 1
    1980:	19 c0       	rjmp	.+50     	; 0x19b4 <strtol+0x1d6>
    1982:	22 97       	sbiw	r28, 0x02	; 2
    1984:	f6 01       	movw	r30, r12
    1986:	d1 83       	std	Z+1, r29	; 0x01
    1988:	c0 83       	st	Z, r28
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <strtol+0x1d6>
    198c:	47 ff       	sbrs	r20, 7
    198e:	12 c0       	rjmp	.+36     	; 0x19b4 <strtol+0x1d6>
    1990:	22 23       	and	r18, r18
    1992:	29 f0       	breq	.+10     	; 0x199e <strtol+0x1c0>
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e8       	ldi	r25, 0x80	; 128
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <strtol+0x1c8>
    199e:	6f ef       	ldi	r22, 0xFF	; 255
    19a0:	7f ef       	ldi	r23, 0xFF	; 255
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	9f e7       	ldi	r25, 0x7F	; 127
    19a6:	22 e2       	ldi	r18, 0x22	; 34
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <errno+0x1>
    19ae:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <errno>
    19b2:	09 c0       	rjmp	.+18     	; 0x19c6 <strtol+0x1e8>
    19b4:	22 23       	and	r18, r18
    19b6:	81 f0       	breq	.+32     	; 0x19d8 <strtol+0x1fa>
    19b8:	90 95       	com	r25
    19ba:	80 95       	com	r24
    19bc:	70 95       	com	r23
    19be:	61 95       	neg	r22
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	8f 4f       	sbci	r24, 0xFF	; 255
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	46 2f       	mov	r20, r22
    19c8:	37 2f       	mov	r19, r23
    19ca:	28 2f       	mov	r18, r24
    19cc:	12 c0       	rjmp	.+36     	; 0x19f2 <strtol+0x214>
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0d c0       	rjmp	.+26     	; 0x19f2 <strtol+0x214>
    19d8:	97 ff       	sbrs	r25, 7
    19da:	f5 cf       	rjmp	.-22     	; 0x19c6 <strtol+0x1e8>
    19dc:	82 e2       	ldi	r24, 0x22	; 34
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <errno+0x1>
    19e4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <errno>
    19e8:	6f ef       	ldi	r22, 0xFF	; 255
    19ea:	7f ef       	ldi	r23, 0xFF	; 255
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	9f e7       	ldi	r25, 0x7F	; 127
    19f0:	ea cf       	rjmp	.-44     	; 0x19c6 <strtol+0x1e8>
    19f2:	64 2f       	mov	r22, r20
    19f4:	73 2f       	mov	r23, r19
    19f6:	82 2f       	mov	r24, r18
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	e1 e1       	ldi	r30, 0x11	; 17
    19fe:	88 c0       	rjmp	.+272    	; 0x1b10 <__epilogue_restores__+0x2>

00001a00 <atoi>:
    1a00:	fc 01       	movw	r30, r24
    1a02:	88 27       	eor	r24, r24
    1a04:	99 27       	eor	r25, r25
    1a06:	e8 94       	clt
    1a08:	21 91       	ld	r18, Z+
    1a0a:	20 32       	cpi	r18, 0x20	; 32
    1a0c:	e9 f3       	breq	.-6      	; 0x1a08 <atoi+0x8>
    1a0e:	29 30       	cpi	r18, 0x09	; 9
    1a10:	10 f0       	brcs	.+4      	; 0x1a16 <atoi+0x16>
    1a12:	2e 30       	cpi	r18, 0x0E	; 14
    1a14:	c8 f3       	brcs	.-14     	; 0x1a08 <atoi+0x8>
    1a16:	2b 32       	cpi	r18, 0x2B	; 43
    1a18:	39 f0       	breq	.+14     	; 0x1a28 <atoi+0x28>
    1a1a:	2d 32       	cpi	r18, 0x2D	; 45
    1a1c:	31 f4       	brne	.+12     	; 0x1a2a <atoi+0x2a>
    1a1e:	68 94       	set
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <atoi+0x28>
    1a22:	13 d0       	rcall	.+38     	; 0x1a4a <__mulhi_const_10>
    1a24:	82 0f       	add	r24, r18
    1a26:	91 1d       	adc	r25, r1
    1a28:	21 91       	ld	r18, Z+
    1a2a:	20 53       	subi	r18, 0x30	; 48
    1a2c:	2a 30       	cpi	r18, 0x0A	; 10
    1a2e:	c8 f3       	brcs	.-14     	; 0x1a22 <atoi+0x22>
    1a30:	1e f4       	brtc	.+6      	; 0x1a38 <atoi+0x38>
    1a32:	90 95       	com	r25
    1a34:	81 95       	neg	r24
    1a36:	9f 4f       	sbci	r25, 0xFF	; 255
    1a38:	08 95       	ret

00001a3a <isspace>:
    1a3a:	91 11       	cpse	r25, r1
    1a3c:	0e c0       	rjmp	.+28     	; 0x1a5a <__ctype_isfalse>
    1a3e:	80 32       	cpi	r24, 0x20	; 32
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <isspace+0xe>
    1a42:	89 50       	subi	r24, 0x09	; 9
    1a44:	85 50       	subi	r24, 0x05	; 5
    1a46:	d0 f7       	brcc	.-12     	; 0x1a3c <isspace+0x2>
    1a48:	08 95       	ret

00001a4a <__mulhi_const_10>:
    1a4a:	7a e0       	ldi	r23, 0x0A	; 10
    1a4c:	97 9f       	mul	r25, r23
    1a4e:	90 2d       	mov	r25, r0
    1a50:	87 9f       	mul	r24, r23
    1a52:	80 2d       	mov	r24, r0
    1a54:	91 0d       	add	r25, r1
    1a56:	11 24       	eor	r1, r1
    1a58:	08 95       	ret

00001a5a <__ctype_isfalse>:
    1a5a:	99 27       	eor	r25, r25
    1a5c:	88 27       	eor	r24, r24

00001a5e <__ctype_istrue>:
    1a5e:	08 95       	ret

00001a60 <__mulsi3>:
    1a60:	db 01       	movw	r26, r22
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	2d d0       	rcall	.+90     	; 0x1ac2 <__muluhisi3>
    1a68:	bf 91       	pop	r27
    1a6a:	af 91       	pop	r26
    1a6c:	a2 9f       	mul	r26, r18
    1a6e:	80 0d       	add	r24, r0
    1a70:	91 1d       	adc	r25, r1
    1a72:	a3 9f       	mul	r26, r19
    1a74:	90 0d       	add	r25, r0
    1a76:	b2 9f       	mul	r27, r18
    1a78:	90 0d       	add	r25, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	08 95       	ret

00001a7e <__udivmodsi4>:
    1a7e:	a1 e2       	ldi	r26, 0x21	; 33
    1a80:	1a 2e       	mov	r1, r26
    1a82:	aa 1b       	sub	r26, r26
    1a84:	bb 1b       	sub	r27, r27
    1a86:	fd 01       	movw	r30, r26
    1a88:	0d c0       	rjmp	.+26     	; 0x1aa4 <__udivmodsi4_ep>

00001a8a <__udivmodsi4_loop>:
    1a8a:	aa 1f       	adc	r26, r26
    1a8c:	bb 1f       	adc	r27, r27
    1a8e:	ee 1f       	adc	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	a2 17       	cp	r26, r18
    1a94:	b3 07       	cpc	r27, r19
    1a96:	e4 07       	cpc	r30, r20
    1a98:	f5 07       	cpc	r31, r21
    1a9a:	20 f0       	brcs	.+8      	; 0x1aa4 <__udivmodsi4_ep>
    1a9c:	a2 1b       	sub	r26, r18
    1a9e:	b3 0b       	sbc	r27, r19
    1aa0:	e4 0b       	sbc	r30, r20
    1aa2:	f5 0b       	sbc	r31, r21

00001aa4 <__udivmodsi4_ep>:
    1aa4:	66 1f       	adc	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	1a 94       	dec	r1
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <__udivmodsi4_loop>
    1ab0:	60 95       	com	r22
    1ab2:	70 95       	com	r23
    1ab4:	80 95       	com	r24
    1ab6:	90 95       	com	r25
    1ab8:	9b 01       	movw	r18, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	bd 01       	movw	r22, r26
    1abe:	cf 01       	movw	r24, r30
    1ac0:	08 95       	ret

00001ac2 <__muluhisi3>:
    1ac2:	40 d0       	rcall	.+128    	; 0x1b44 <__umulhisi3>
    1ac4:	a5 9f       	mul	r26, r21
    1ac6:	90 0d       	add	r25, r0
    1ac8:	b4 9f       	mul	r27, r20
    1aca:	90 0d       	add	r25, r0
    1acc:	a4 9f       	mul	r26, r20
    1ace:	80 0d       	add	r24, r0
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	11 24       	eor	r1, r1
    1ad4:	08 95       	ret

00001ad6 <__prologue_saves__>:
    1ad6:	2f 92       	push	r2
    1ad8:	3f 92       	push	r3
    1ada:	4f 92       	push	r4
    1adc:	5f 92       	push	r5
    1ade:	6f 92       	push	r6
    1ae0:	7f 92       	push	r7
    1ae2:	8f 92       	push	r8
    1ae4:	9f 92       	push	r9
    1ae6:	af 92       	push	r10
    1ae8:	bf 92       	push	r11
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	ca 1b       	sub	r28, r26
    1b00:	db 0b       	sbc	r29, r27
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	09 94       	ijmp

00001b0e <__epilogue_restores__>:
    1b0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b10:	39 88       	ldd	r3, Y+17	; 0x11
    1b12:	48 88       	ldd	r4, Y+16	; 0x10
    1b14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b20:	b9 84       	ldd	r11, Y+9	; 0x09
    1b22:	c8 84       	ldd	r12, Y+8	; 0x08
    1b24:	df 80       	ldd	r13, Y+7	; 0x07
    1b26:	ee 80       	ldd	r14, Y+6	; 0x06
    1b28:	fd 80       	ldd	r15, Y+5	; 0x05
    1b2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b30:	b9 81       	ldd	r27, Y+1	; 0x01
    1b32:	ce 0f       	add	r28, r30
    1b34:	d1 1d       	adc	r29, r1
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	ed 01       	movw	r28, r26
    1b42:	08 95       	ret

00001b44 <__umulhisi3>:
    1b44:	a2 9f       	mul	r26, r18
    1b46:	b0 01       	movw	r22, r0
    1b48:	b3 9f       	mul	r27, r19
    1b4a:	c0 01       	movw	r24, r0
    1b4c:	a3 9f       	mul	r26, r19
    1b4e:	01 d0       	rcall	.+2      	; 0x1b52 <__umulhisi3+0xe>
    1b50:	b2 9f       	mul	r27, r18
    1b52:	70 0d       	add	r23, r0
    1b54:	81 1d       	adc	r24, r1
    1b56:	11 24       	eor	r1, r1
    1b58:	91 1d       	adc	r25, r1
    1b5a:	08 95       	ret

00001b5c <_exit>:
    1b5c:	f8 94       	cli

00001b5e <__stop_program>:
    1b5e:	ff cf       	rjmp	.-2      	; 0x1b5e <__stop_program>
